-*- mode: outline; mode: flyspell -*-

* source tree layout

-- RUCKUS/src/pkgname --

These directories will either contain controlled source tar.bz2s, or a
source tree with a make target to create a tar.bz2 archive.

Each of these directories is UNDER ITS OWN LICENSE!

-- RUCKUS/packages/pkgname --

These directories will contain our SRP package files for creating
installable packages.

The contents of these directories are licensed under the GPL just like the
rest of Source Ruckus (See COPYING).  However, installation scripts for
proprietary packages don't make a whole lot of sense w/out the actual source
code... so contributions for installation scripts for proprietary software
probably won't be accepted for mainline inclusion.


* build user
The LFS books do the build as a non-privileged 'lfs' user.  I don't really
like this very much, as I'd rather preserve the history of who did a
particular build.  The benefit of creating an lfs user and creating its
login scripts is that we know exactly what's in them... so using an already
created user account might introduce some inconsistencies in the build
scripts.


* build process

** bootstrap-early
This step builds an environment suitable to start compiling the
cross-compilation suite.

*** e2fsprogs
*** python
*** srp
*** anything else our builder needs to run through its scripts

prefix: ~/RUCKUS/bootstrap-early


** bootstrap-cross
This step creates the cross-compilation suite of tools

prefix: ~/RUCKUS/bootstrap-cross


** bootstrap-final
This step builds the final bootstrap environment.  It is a basic bootable
system for the target architecture used to build the actual final system.
At the end of this stage, cross-compiled builds will have to reboot into the
new system (potentially on different hardware).

NOTE: Cross-compiling x86_64 on an x86 32bit host requires reboot into the
      x86_64 kernel, i think... not 100% sure.  Compiling for the same arch
      (x86 for x86) can just chroot into the baby system using the running
      kernel.  Cross-compiling for a completely different arch (ppc on an
      x86 host) will require getting the bootable filesystem migrated over
      to a ppc host to complete the build on.  Might be a good idea to just
      assume host and target architectures are different and always do a
      reboot...  Not sure how we'll automate the whole reboot and continue
      building thing... especially if a completely different host is
      required.

prefix: $RUCKUS/bootstrap


** build
This step builds up each segmented filesystem image

*** embedded.img
*** server.img
*** workstation.img

workstation.img should have debug symbols for everything, even though we
don't want ebedded.img or server.img to have debug enabled.

- build embedded
- dump embedded-with-debug.img
- strip --strip-unneeded
- dump embedded.img
- restore from embedded-with-debug.img
- build server
- dump server-with-debug.img
- strip --strip-unneeded
- dump server.img
- restore from server-with-debug.img
- build workstation
- dump workstation.img



** build-installer
This step builds a bootable ISO9660 filesystem to use as installation
media.  Should we perhaps create bootable flash drive installer, too?



* Extra stuff to add

** embedded.img
eglibc
busybox
zsh
vi
git (or should this go in server... might be handy here)
srp
mdlskel
tcpdump (maybe... could be handy)


** server.img
gcc
glib
texinfo
libupnp 1.4.2 or later (1.6.6)
libdlna 0.2.3
ushare hg (1.1a)
ffmpeg (servers should be able to encode video)
dvgrab
libgphoto2 (maybe move this to workstation)
media_utils
Xorg
gtk
qt (?)
emacs
firefox (gotta have a web browser)
xscreensaver
wireshark


** workstation.img
tetex
docbook
kino
vlc
wxgtk
audacity
Gthumb
ImageMagick
audacious
rhythmbox (?)
all of gnome
all of kde (?)
thunderbird



* misc notes
route add -net 239.0.0.0 netmask 255.0.0.0 eth0


genisoimage vs mkisofs?
