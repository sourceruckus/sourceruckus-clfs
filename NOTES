-*- mode: outline; mode: flyspell -*-

* version
v3.0?  Pretty sure last version was 2.0... 3.0 never actually got out of the
planning stages last time... maybe I should start this at 4.0?  maybe jump
it all the way to 5.0 just to show how much time there's been (mozilla-ish,
i know).  Or it could be 6.x since it's based off version 6.x of the LFS
book... although it's actually following v1.0 of the CLFS book more
closely... i don't konw.
 

* source tree layout
just have everything in a packages directory?  or a src directory?
splitting things up into contrib and src doesn't really make sense...


* build process

** bootstrap
This step builds an environment suitable to start compiling the
cross-compilation suite.

*** e2fsprogs
*** python
*** srp
*** anything else our builder needs to run through its scripts


** bootstrap-cross
This step creates the cross-compilation suite of tools


** stage1
This step builds a basic bootable/chrootable system for the target
architecture used to build the actual final system.  At the end of this
stage, cross-compiled builds will have to reboot into the new system
(potentially on different hardware).

NOTE: Cross-compiling x86_64 on an x86 32bit host requires reboot into the
      x86_64 kernel, i think... not 100% sure.  Compiling for the same arch
      (x86 for x86) can just chroot into the baby system using the running
      kernel.  Cross-compiling for a completely different arch (ppc on an
      x86 host) will require getting the bootable filesystem migrated over
      to a ppc host to complete the build on.  Might be a good idea to just
      assume host and target architectures are different and always do a
      reboot...  Not sure how we'll automate the whole reboot and continue
      building thing... especially if a completely different host is
      required.

** stage2
This step builds up each segmented filesystem image

*** embedded.img
*** server.img
*** workstation.img

** stage3
This step builds a bootable ISO9660 filesystem to use as installation
media.  Should we perhaps create bootable flash drive installer, too?



* Extra stuff to add

** embedded.img
eglibc
busybox
zsh
vi
git (or should this go in server... might be handy here)
srp
mdlskel
tcpdump (maybe... could be handy)


** server.img
gcc
glib
texinfo
libupnp 1.4.2 or later (1.6.6)
libdlna 0.2.3
ushare hg (1.1a)
ffmpeg (servers should be able to encode video)
dvgrab
libgphoto2 (maybe move this to workstation)
media_utils
Xorg
gtk
qt (?)
emacs
firefox (gotta have a web browser)
xscreensaver
wireshark


** workstation.img
tetex
docbook
kino
vlc
wxgtk
audacity
Gthumb
ImageMagick
audacious
rhythmbox (?)
all of gnome
all of kde (?)
thunderbird



* misc notes
route add -net 239.0.0.0 netmask 255.0.0.0 eth0


genisoimage vs mkisofs?
