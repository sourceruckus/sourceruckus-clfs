#!/bin/bash

# should set toplevel via autoconf?
toplevel=$PWD/../..

# source our common variables and functions
. $toplevel/utils/bootstrap-early/functions


# install linux headers
build_linux_headers()
{
    builddir=$PWD/.build/kernel
    # get the source tree into our build dir
    rsync -a --exclude .git $sourcedir/kernel/ $builddir || exit 1
    pushd $builddir
    make mrproper &&
    make ARCH=$ARCH_TARGET headers_check &&
    make ARCH=$ARCH_TARGET INSTALL_HDR_PATH=dest headers_install || exit 1

    # NOTE: We use /tools as apposed to /cross-tools here (just like the
    #       CLFS book).  There's nothing to cross-compile here, but it's
    #       needed now.
    rsync -va dest/include $PREFIX_FINAL || exit 1
    popd
}



build()
{
    # set some common variables for all targets
    OPTS="--prefix=$PREFIX_CROSS"
    OPTS+=" --disable-static"
    OPTS+=" --enable-shared"
    OPTS+=" --disable-nls"

    case "$1" in
	linux_headers)
	    build_linux_headers
	    ;;

	ncurses)
	    # only need a small part of this for now.  since I broke
	    # build_generic into a bunch of sub-methods, this is pretty easy
	    # to do.

	    # first, use the generic setup and configure
	    setup_generic $1 &&
	    configure_generic $1 $OPTS \
		--without-debug \
		--without-shared || exit 1

	    # now go into the builddir and use custom build/install commands
	    pushd $builddir &&
	    make -j$JOBCOUNT -C include && 
	    make -j$JOBCOUNT -C progs tic &&
	    install -m755 progs/tic $PREFIX_CROSS/bin &&
	    popd || exit 1
	    ;;

	gmp)
	    build_generic $1 $OPTS --enable-cxx
	    ;;

	mpfr)
	    LDFLAGS="-Wl,-rpath,$PREFIX_CROSS/lib" \
		build_generic $1 $OPTS \
		--with-gmp=$PREFIX_CROSS
	    ;;

	mpc)
	    LDFLAGS="-Wl,-rpath,$PREFIX_CROSS/lib" \
		build_generic $1 $OPTS \
		--with-gmp=$PREFIX_CROSS \
		--with-mpfr=$PREFIX_CROSS
	    ;;

	cloog)
            # FIXME: cloog's automake files are reeeealy old.  In addition to a
            #        bunch of deprecation warnings, bootstrapping also chokes
            #        on $(srcdir) usage in TESTS (tests/Makefile.am).  they're
            #        all over the place, and we only need the TESTS ones
            #        removed, so i'll make a patch for this instead of using
            #        sed...
	    LDFLAGS="-Wl,-rpath,$PREFIX_CROSS/lib" \
		build_generic $1 $OPTS \
		--with-gmp-prefix=$PREFIX_CROSS
	    ;;

	binutils)
            # FIXME: double check that these flags are getting configured
            #        appropriately in the build system...
            #
            #        verified 64bit multilib
            #
            # add 64bit support if desired
            if [ -n "$BUILD64" ]; then
                OPTS+=" --enable-64-bit-bfd"
            fi
            # disable multilib if we're building pure 32 or 64 bit
            if [ -z "$BUILD32" -o -z "$BUILD64" ]; then
                OPTS+=" --disable-multilib"
            fi
            echo "!!!!!!!!!!!! OPTS: $OPTS"

	    # NOTE: The CLFS book sets lib-path to /tools as apposed to
	    #       /tools-cross (i.e., $PREFIX_FINAL instead of
	    #       $PREFIX_CROSS).  This is not a typo.
	    AR=ar AS=as setup_generic $1 &&
	    AR=ar AS=as \
		configure_generic $1 $OPTS \
		--host=${CLFS_HOST} \
		--target=${CLFS_TARGET} \
		--with-sysroot=${CLFS} \
		--with-lib-path=$PREFIX_FINAL/lib || exit 1

	    pushd $builddir &&
	    make configure-host &&
	    make -j$JOBCOUNT &&
	    make install || exit 1

	    # Copy libiberty.h to $PREFIX_FINAL/include directory.
	    #
	    # NOTE: This file is being installed in $PREFIX_FINAL now
	    #       instead of in $PREFIX_CROSS because it's just a header
	    #       file and has to eventually be in PREFIX_FINAL.  Putting
	    #       it there now just makes the the final bootstrap binutils
	    #       target simpler.
	    mkdir -p $PREFIX_FINAL/include &&
	    cp -v $source/include/libiberty.h $PREFIX_FINAL/include || exit 1
	    popd
	    ;;

	gcc-static)
	    setup_generic gcc || exit 1
	    if [ ! -f $builddir/Makefile ]; then
		pushd $source || exit 1
		for p in $toplevel/utils/bootstrap-cross/patches/gcc/*.patch; do
		    patch -Np1 < $p || exit 1
		done
		popd
	    fi

	    # make GCC look in PREFIX_FINAL (i.e., not the host sys)
            pushd $source
	    echo "#undef STANDARD_STARTFILE_PREFIX_1" >> gcc/config/linux.h
            echo "#define STANDARD_STARTFILE_PREFIX_1 \"$PREFIX_FINAL/lib/\"" >> gcc/config/linux.h
	    echo "#undef STANDARD_STARTFILE_PREFIX_2" >> gcc/config/linux.h
            echo "#define STANDARD_STARTFILE_PREFIX_2 \"\"" >> gcc/config/linux.h
            popd

	    # create a dummy limits.h so the build will not use the one
	    # provided by the host distro
	    mkdir -p $PREFIX_FINAL/include &&
	    touch $PREFIX_FINAL/include/limits.h || exit 1

	    # NOTE: gcc-static, eglibc32, eglibc64, and gcc-final should NOT
	    #       use our common OPTS.  these packages are VERY important and
	    #       so we're going to follow the CLFS book exactly.
	    OPTS=""

            AR=ar LDFLAGS="-Wl,-rpath,$PREFIX_CROSS/lib" \
                configure_generic gcc --prefix=$PREFIX_CROSS \
                --build=${CLFS_HOST} --host=${CLFS_HOST} --target=${CLFS_TARGET} \
                --with-sysroot=${CLFS} --with-local-prefix=$PREFIX_FINAL \
                --with-native-system-header-dir=$PREFIX_FINAL/include --disable-nls \
                --disable-shared --with-mpfr=$PREFIX_CROSS --with-gmp=$PREFIX_CROSS \
                --with-cloog=$PREFIX_CROSS --with-mpc=$PREFIX_CROSS --without-headers \
                --with-newlib --disable-decimal-float --disable-libgomp --disable-libmudflap \
                --disable-libssp --disable-threads --disable-libatomic --disable-libitm \
                --disable-libsanitizer --disable-libquadmath --disable-target-libiberty \
                --disable-target-zlib --with-system-zlib --enable-cloog-backend=isl \
                --disable-cloog-version-check --enable-languages=c \
                --enable-checking=release || exit 1

	    pushd $builddir &&
	    make -j$JOBCOUNT all-gcc all-target-libgcc &&
	    make install-gcc install-target-libgcc &&
	    popd || exit 1
	    ;;

	eglibc-32bit)
	    setup_generic eglibc || exit 1

	    # the following lines need to be added to config.cache (in
	    # $builddir!) for EGLIBC to support NPTL.  without this,
	    # compilation fails.
	    pushd $builddir
	    echo libc_cv_forced_unwind=yes > config.cache
	    echo libc_cv_c_cleanup=yes >> config.cache
	    echo libc_cv_gnu89_inline=yes >> config.cache
	    echo libc_cv_ssp=no >> config.cache
	    popd

	    # NOTE: eglibc builds and installs in PREFIX_FINAL on purpose.
	    #       this package can safely be built now and installed in
	    #       /tools so we don't have to build it again during the
	    #       final bootstrap stage.  this is the way the CLFS book
	    #       does it, so we're following suit.
            #
	    # NOTE: gcc-static, eglibc32, eglibc64, and gcc-final should NOT
	    #       use our common OPTS.  these packages are VERY important and
	    #       so we're going to follow the CLFS book exactly.
	    OPTS=""

            BUILD_CC="gcc" CC="${CLFS_TARGET}-gcc ${BUILD32}" \
                AR="${CLFS_TARGET}-ar" RANLIB="${CLFS_TARGET}-ranlib" \
                CFLAGS="-march=$(cut -d- -f1 <<< $CLFS_TARGET32) -mtune=generic -g -O2" \
                configure_generic eglibc --prefix=$PREFIX_FINAL \
                --host=${CLFS_TARGET32} --build=${CLFS_HOST} \
                --disable-profile --with-tls --enable-kernel=2.6.32 --with-__thread \
                --with-binutils=$PREFIX_CROSS/bin --with-headers=$PREFIX_FINAL/include \
                --enable-obsolete-rpc --cache-file=config.cache || exit 1

	    pushd $builddir &&
	    make -j$JOBCOUNT &&
	    make install inst_vardbdir=$PREFIX_FINAL/var/db &&
	    popd || exit 1
	    ;;

	eglibc-64bit)
	    # assuming that eglibc-32bit has already been run, we already
	    # have a fully patched source tree, so setup_generic should just
	    # verify that the source tree exists and setup all our build
	    # variables.
	    #
            # NOTE: What we're doing here (and for gcc down below) is we're
            #       REUSING the prepped source tree from the 32bit build with a
            #       seperate BUILD dir.  We can do this because we built the
            #       32bit stuff out-of-tree.
            #
	    # NOTE: This means you CANNOT start a build at the eglibc-64bit
	    #       step unless you have a leftover eglibc tree from a previous
	    #       run or you set it up by hand!
	    setup_generic eglibc || exit 1

	    # however, we do have to adjust some variables
	    builddir=$PWD/.build/eglibc64
	    mkdir -p $builddir
	    echo "builddir: $builddir"

	    # the following lines need to be added to config.cache (in
	    # $builddir!) for EGLIBC to support NPTL.  without this,
	    # compilation fails.
	    pushd $builddir
	    echo libc_cv_forced_unwind=yes > config.cache
	    echo libc_cv_c_cleanup=yes >> config.cache
	    echo libc_cv_gnu89_inline=yes >> config.cache
	    echo libc_cv_ssp=no >> config.cache
	    popd

	    # install 64-bit libraries in lib64
	    pushd $builddir
	    echo "slibdir=$PREFIX_FINAL/lib64" >> configparms
	    popd

	    # NOTE: eglibc builds and installs in PREFIX_FINAL on purpose.
	    #       this package can safely be built now and installed in
	    #       /tools so we don't have to build it again during the
	    #       final bootstrap stage.  this is the way the CLFS book
	    #       does it, so we're following suit.
            #
	    # NOTE: gcc-static, eglibc32, eglibc64, and gcc-final should NOT
	    #       use our common OPTS.  these packages are VERY important and
	    #       so we're going to follow the CLFS book exactly.
	    OPTS=""

            BUILD_CC="gcc" CC="${CLFS_TARGET}-gcc ${BUILD64}" \
                AR="${CLFS_TARGET}-ar" RANLIB="${CLFS_TARGET}-ranlib" \
                configure_generic eglibc --prefix=$PREFIX_FINAL \
                --host=${CLFS_TARGET} --build=${CLFS_HOST} --libdir=$PREFIX_FINAL/lib64 \
                --disable-profile --with-tls --enable-kernel=2.6.32 --with-__thread \
                --with-binutils=$PREFIX_CROSS/bin --with-headers=$PREFIX_FINAL/include \
                --enable-obsolete-rpc --cache-file=config.cache || exit 1

	    pushd $builddir &&
	    make -j$JOBCOUNT &&
	    make install inst_vardbdir=$PREFIX_FINAL/var/db &&
	    popd || exit 1
	    ;;

	gcc)
	    # assuming that gcc-static has already been run, we already have
	    # a fully patched source tree, so setup_generic should just
	    # verify that the source tree exists and setup all our build
	    # variables.
            #
            # NOTE: What we're doing here (and for eglibc above) is we're
            #       REUSING the prepped source tree from the static build with
            #       a seperate BUILD dir.  We can do this because we built the
            #       static stuff out-of-tree.
            #
	    # NOTE: This means you CANNOT start a build at the gcc step unless
	    #       you have a leftover gcc tree from a previous run or you set
	    #       it up by hand!
	    setup_generic gcc || exit 1

	    # however, we do have to adjust some variables
	    builddir=$PWD/.build/gcc-final
	    mkdir -p $builddir
	    echo "builddir: $builddir"

	    # NOTE: gcc-static, eglibc32, eglibc64, and gcc-final should NOT
	    #       use our common OPTS.  these packages are VERY important and
	    #       so we're going to follow the CLFS book exactly.
            OPTS=""

            AR=ar LDFLAGS="-Wl,-rpath,$PREFIX_CROSS/lib" \
                configure_generic gcc --prefix=$PREFIX_CROSS \
                --build=${CLFS_HOST} --target=${CLFS_TARGET} --host=${CLFS_HOST} \
                --with-sysroot=${CLFS} --with-local-prefix=$PREFIX_FINAL \
                --with-native-system-header-dir=$PREFIX_FINAL/include --disable-nls \
                --enable-shared --disable-static --enable-languages=c,c++ \
                --enable-__cxa_atexit --enable-c99 --enable-long-long --enable-threads=posix \
                --with-mpc=$PREFIX_CROSS --with-mpfr=$PREFIX_CROSS --with-gmp=$PREFIX_CROSS \
                --with-cloog=$PREFIX_CROSS --enable-cloog-backend=isl --with-system-zlib \
                --disable-cloog-version-check --enable-checking=release \
                --enable-libstdcxx-time || exit 1

	    pushd $builddir &&
	    make -j$JOBCOUNT AS_FOR_TARGET="${CLFS_TARGET}-as" \
		LD_FOR_TARGET="${CLFS_TARGET}-ld" &&
	    make install &&
	    popd || exit 1
	    ;;

	*)
	    build_generic $1 $OPTS || exit 1
    esac
}


packages=""
packages+=" linux_headers"
packages+=" file"
packages+=" m4"
packages+=" ncurses"
packages+=" gmp"
packages+=" mpfr"
packages+=" mpc"
packages+=" cloog"
packages+=" binutils"
packages+=" gcc-static"
packages+=" eglibc-32bit"

if [ -n "$BUILD64" ]; then
    packages+=" eglibc-64bit"
fi

packages+=" gcc"


mkdir -p $PWD/.build

echo packages: $packages
for p in $packages; do
    echo "building bootstrap-cross package: $p"
    build $p || exit 1
done

# make a backup of our progress.
#
# NOTE: using sudo for this to make sure our build user has appropriate
#       permissions to read all the files we're backing up
echo -n "creating bootstrap-cross backup... "
sudo tar -zcf $BUILDROOT/baby-bootstrap-cross.tar.gz -C $CLFS . || exit 1
#sudo tar -jcf $BUILDROOT/baby-bootstrap-cross.tar.bz2 -C $CLFS . || exit 1
#sudo tar -Jcf $BUILDROOT/baby-bootstrap-cross.tar.xz -C $CLFS . || exit 1
echo "done."
