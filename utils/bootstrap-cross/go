#!/bin/bash

# should set toplevel via autoconf?
toplevel=$PWD/../..

# source our common variables and functions
. $toplevel/utils/bootstrap-early/functions


# install linux headers
build_linux_headers()
{
    builddir=$PWD/.build/kernel
    # get the source tree into our build dir
    rsync -a --exclude .git $sourcedir/kernel/ $builddir || exit 1
    pushd $builddir
    make mrproper &&
    make ARCH=$ARCH_TARGET headers_check &&
    make ARCH=$ARCH_TARGET INSTALL_HDR_PATH=dest headers_install || exit 1

    # FIXME: CLFS book used /tools as apposed to /cross-tools here... not
    #        sure why.  it might just be that this is really a
    #        bootstrap-final chore that needs to be done prior to building
    #        bootstrap-cross...  need to investigate later.
    mkdir -p $PREFIX_FINAL/include &&
    rsync -va dest/include $PREFIX_FINAL || exit 1
    popd
}



build()
{
    case "$1" in
	linux_headers)
	    build_linux_headers
	    ;;

	ncurses)
	    # only need a small part of this for now.  since I broke
	    # build_generic into a bunch of sub-methods, this is pretty easy
	    # to do.

	    # first, use the generic setup and configure
	    setup_generic $1 &&
	    configure_generic $1 --prefix=$PREFIX_CROSS \
		--without-debug \
		--without-shared || exit 1

	    # now go into the builddir and use custom build/install commands
	    pushd $builddir &&
	    make -j$JOBCOUNT -C include && 
	    make -j$JOBCOUNT -C progs tic &&
	    install -m755 progs/tic $PREFIX_CROSS/bin &&
	    popd || exit 1
	    ;;

	gmp)
	    CPPFLAGS=-fexceptions \
		build_generic $1 --prefix=$PREFIX_CROSS --enable-cxx
	    ;;

	mpfr)
	    LDFLAGS="-Wl,-rpath,$PREFIX_CROSS/lib" \
		build_generic $1 --prefix=$PREFIX_CROSS \
		--enable-shared \
		--with-gmp=$PREFIX_CROSS
	    ;;

	mpc)
	    LDFLAGS="-Wl,-rpath,$PREFIX_CROSS/lib" \
		build_generic $1 --prefix=$PREFIX_CROSS \
		--with-gmp=$PREFIX_CROSS \
		--with-mpfr=$PREFIX_CROSS
	    ;;

	ppl)
	    # we have patches for the autoconf files, so lets make sure
	    # autoreconf gets called
	    autoreconf=yes
	    LDFLAGS="-Wl,-rpath,$PREFIX_CROSS/lib" \
		build_generic $1 --prefix=$PREFIX_CROSS \
		--enable-shared \
		--enable-interfaces="c,cxx" \
		--disable-optimization \
		--with-libgmp-prefix=$PREFIX_CROSS \
		--with-libgmpxx-prefix=$PREFIX_CROSS
	    ;;

	cloog-ppl)
	    # we patch the autoconf files
	    autoreconf=yes
	    LDFLAGS="-Wl,-rpath,$PREFIX_CROSS/lib" \
		build_generic $1 --prefix=$PREFIX_CROSS \
		--enable-shared \
		--with-bits=gmp \
		--with-gmp=$PREFIX_CROSS \
		--with-ppl=$PREFIX_CROSS
	    ;;

	binutils)
	    # this was using /tools as apposed to /tools-cross in the CLFS
	    # book
	    
	    # FIXME: not sure if sysroot should be BABY or INSTALLROOT...

	    AR=ar AS=as setup_generic $1 &&
	    AR=ar AS=as \
		configure_generic $1 --prefix=$PREFIX_CROSS \
		--host=${MACHTYPE_HOST} \
		--target=${MACHTYPE_TARGET} \
		--with-sysroot=${BABY} \
		--with-lib-path=$PREFIX_FINAL/lib \
		--disable-nls \
		--enable-shared \
		--enable-64-bit-bfd || exit 1

	    pushd $builddir &&
	    make configure-host &&
	    make -j$JOBCOUNT &&
	    make install || exit 1

	    # Copy libiberty.h to $PREFIX_FINAL/include directory.
	    #
	    # NOTE: This file is being installed in $PREFIX_FINAL now
	    #       instead of in $PREFIX_CROSS because it's just a header
	    #       file and has to eventually be in PREFIX_FINAL.  Putting
	    #       it there now just makes the the final bootstrap binutils
	    #       target simpler.
	    mkdir -p $PREFIX_FINAL/include &&
	    cp -v $sourcedir/include/libiberty.h $PREFIX_FINAL/include || exit 1
	    popd
	    ;;

	gcc-static)
	    setup_generic gcc &&
	    if [ ! -f $builddir/Makefile ]; then
		pushd $sourcedir || exit 1
		for p in $toplevel/utils/bootstrap-cross/patches/gcc/*.patch; do
		    patch -Np1 < $p || exit 1
		done
		popd
	    fi

	    # create a dummy limits.h so the build will not use the one
	    # provided by the host distro
	    mkdir -p $PREFIX_FINAL/include &&
	    touch $PREFIX_FINAL/include/limits.h || exit 1

	    # FIXME: not sure if sysroot should be BABY or INSTALLROOT...

	    AR=ar LDFLAGS="-Wl,-rpath,$PREFIX_CROSS/lib" \
		configure_generic gcc --prefix=$PREFIX_CROSS \
		--build=${MACHTYPE_HOST} \
		--host=${MACHTYPE_HOST} \
		--target=${MACHTYPE_TARGET} \
		--with-sysroot=${BABY} \
		--with-local-prefix=$PREFIX_FINAL \
		--disable-nls \
		--disable-shared \
		--with-mpfr=$PREFIX_CROSS \
		--with-gmp=$PREFIX_CROSS \
		--with-ppl=$PREFIX_CROSS \
		--with-cloog=$PREFIX_CROSS \
		--without-headers \
		--with-newlib \
		--disable-decimal-float \
		--disable-libgomp \
		--disable-libmudflap \
		--disable-libssp \
		--disable-threads \
		--enable-languages=c || exit 1

	    pushd $builddir || exit 1
	    make -j$JOBCOUNT all-gcc all-target-libgcc &&
	    make install-gcc install-target-libgcc || exit 1
	    popd
	    ;;

	eglibc-32bit)
	    setup_generic eglibc &&
	    if [ ! -f $builddir/Makefile ]; then
		pushd $sourcedir || exit 1
		for p in $toplevel/utils/bootstrap-cross/patches/eglibc/*.patch; do
		    patch -Np1 < $p || exit 1
		done
		popd
	    fi

	    # the following lines need to be added to config.cache (in
	    # $builddir!) for EGLIBC to support NPTL.  without this,
	    # compilation fails.
	    pushd $builddir
	    echo libc_cv_forced_unwind=yes > config.cache
	    echo libc_cv_c_cleanup=yes >> config.cache
	    echo libc_cv_gnu89_inline=yes >> config.cache
	    echo libc_cv_ssp=no >> config.cache
	    popd

	    BUILD_CC="gcc" CC="${MACHTYPE_TARGET}-gcc ${BUILD32}" \
		AR="${MACHTYPE_TARGET}-ar" RANLIB="${MACHTYPE_TARGET}-ranlib" \
		CFLAGS="-march=$(cut -d- -f1 <<< $MACHTYPE_TARGET32) -mtune=generic -g -O2" \
		configure_generic eglibc --prefix=$PREFIX_FINAL \
		--host=${MACHTYPE_TARGET32} \
		--build=${MACHTYPE_HOST} \
		--disable-profile \
		--enable-add-ons \
		--with-tls \
		--enable-kernel=2.6.0 \
		--with-__thread \
		--with-binutils=$PREFIX_CROSS/bin \
		--with-headers=$PREFIX_FINAL/include \
		--cache-file=config.cache || exit 1

	    compile_generic eglibc || exit 1

	    ;;

	eglibc-64bit)
	    # assuming that eglibc-32bit has already been run, we already
	    # have a fully patched source tree, so setup_generic should just
	    # verify that the source tree exists and setup all our build
	    # variables.
	    setup_generic eglibc &&
	    if [ ! -f $builddir/Makefile ]; then
		pushd $sourcedir || exit 1
		for p in $toplevel/utils/bootstrap-cross/patches/eglibc/*.patch; do
		    patch -Np1 < $p || exit 1
		done
		popd
	    fi

	    # however, we do have to adjust some variables
	    builddir=$PWD/.build/eglibc64
	    mkdir -p $builddir
	    echo "builddir: $builddir"

	    # the following lines need to be added to config.cache (in
	    # $builddir!) for EGLIBC to support NPTL.  without this,
	    # compilation fails.
	    pushd $builddir
	    echo libc_cv_forced_unwind=yes > config.cache
	    echo libc_cv_c_cleanup=yes >> config.cache
	    echo libc_cv_gnu89_inline=yes >> config.cache
	    echo libc_cv_ssp=no >> config.cache
	    popd

	    # install 64-bit libraries in lib64
	    pushd $builddir
	    echo "slibdir=$PREFIX_FINAL/lib64" >> configparms
	    popd

	    BUILD_CC="gcc" CC="${MACHTYPE_TARGET}-gcc ${BUILD64}" \
		AR="${MACHTYPE_TARGET}-ar" RANLIB="${MACHTYPE_TARGET}-ranlib" \
		configure_generic eglibc --prefix=$PREFIX_FINAL \
		--host=${MACHTYPE_TARGET} \
		--build=${MACHTYPE_HOST} \
		--libdir=$PREFIX_FINAL/lib64 \
		--disable-profile \
		--enable-add-ons \
		--with-tls \
		--enable-kernel=2.6.0 \
		--with-__thread \
		--with-binutils=$PREFIX_CROSS/bin \
		--with-headers=$PREFIX_FINAL/include \
		--cache-file=config.cache || exit 1

	    compile_generic eglibc || exit 1

	    ;;

	gcc)
	    # assuming that gcc-static has already been run, we already have
	    # a fully patched source tree, so setup_generic should just
	    # verify that the source tree exists and setup all our build
	    # variables.
	    setup_generic gcc &&
	    if [ ! -f $builddir/Makefile ]; then
		pushd $sourcedir || exit 1
		for p in $toplevel/utils/bootstrap-cross/patches/gcc/*.patch; do
		    patch -Np1 < $p || exit 1
		done
		popd
	    fi

	    # however, we do have to adjust some variables
	    builddir=$PWD/.build/gcc-final
	    mkdir -p $builddir
	    echo "builddir: $builddir"

	    AR=ar LDFLAGS="-Wl,-rpath,$PREFIX_CROSS/lib" \
		configure_generic gcc --prefix=$PREFIX_CROSS \
		--build=${MACHTYPE_HOST} \
		--target=${MACHTYPE_TARGET} \
		--host=${MACHTYPE_HOST} \
		--with-sysroot=${BABY} \
		--with-local-prefix=$PREFIX_FINAL \
		--disable-nls \
		--enable-shared \
		--enable-languages=c,c++ \
		--enable-__cxa_atexit \
		--with-mpfr=$PREFIX_CROSS \
		--with-gmp=$PREFIX_CROSS \
		--enable-c99 \
		--with-ppl=$PREFIX_CROSS \
		--with-cloog=$PREFIX_CROSS \
		--enable-long-long \
		--enable-threads=posix || exit 1

	    pushd $builddir || exit 1
	    make -j$JOBCOUNT_KBUILD AS_FOR_TARGET="${MACHTYPE_TARGET}-as" \
		LD_FOR_TARGET="${MACHTYPE_TARGET}-ld" &&
	    make install || exit 1
	    popd
	    ;;

	*)
	    build_generic $1 --prefix=$PREFIX_CROSS
	    ;;
    esac
}


packages=""
packages+=" linux_headers"
packages+=" file"
packages+=" ncurses"
packages+=" gmp"
packages+=" mpfr"
packages+=" mpc"
packages+=" ppl"
packages+=" cloog-ppl"
packages+=" binutils"
packages+=" gcc-static"
packages+=" eglibc-32bit"
packages+=" eglibc-64bit"
packages+=" gcc"

mkdir -p $PWD/.build

for p in $packages; do
    echo "building cross package: $p"
    build $p || exit 1
done
