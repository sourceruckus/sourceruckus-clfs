#!/bin/bash

# These variables get set by the Makefile, but try to autodetect them assuming
# we're building in-tree by hand if they're not set
[ -n "$ruckus_srcdir" ] || ruckus_srcdir=$PWD/../..
[ -n "$ruckus_builddir" ] || ruckus_builddir=$PWD/../..

# source our common variables and functions
. $ruckus_srcdir/utils/bootstrap-early/functions



build()
{
    # CLFS book says these NEED to be unset during cross stage
    unset CFLAGS
    unset CXXFLAGS

    # I'll unset these, too.  We set them in functions so that things building
    # during bootstrap-early can find other libraries installed in
    # PREFIX_EARLY.
    unset CPPFLAGS
    unset LDFLAGS

    # set some common variables for all targets
    OPTS="--prefix=$PREFIX_CROSS"
    OPTS+=" --disable-static"
    OPTS+=" --enable-shared"
    OPTS+=" --disable-nls"

    case "$1" in
	linux_headers)
            # FIXME: We should check out the specific version CLFS tests glibc
            #        with here, install it's headers in the final system
            #        ($CLFS/usr/include), and have the glibc package script
            #        slurp up the headers.

            setup_generic kernel || exit 1

            # get ready
	    MAKE="make KBUILD_SRC=$source -f $source/Makefile"
            MAKE+=" ARCH=$CLFS_ARCH"

            # NOTE: We use /tools as apposed to /cross-tools here (just like
            #       the CLFS book).  There's nothing to cross-compile here, but
            #       it's needed now.
            pushd $builddir &&
            $MAKE mrproper &&
            $MAKE headers_check &&
            $MAKE INSTALL_HDR_PATH=$PREFIX_FINAL headers_install &&
            popd || exit 1
	    ;;

	ncurses)
	    # only need a small part of this for now.  since I broke
	    # build_generic into a bunch of sub-methods, this is pretty easy
	    # to do.

	    # first, use the generic setup and configure
	    setup_generic $1 &&
	    configure_generic $1 $OPTS \
		--without-debug \
		--without-shared || exit 1

	    # now go into the builddir and use custom build/install commands
	    pushd $builddir &&
	    make -j$JOBCOUNT -C include && 
	    make -j$JOBCOUNT -C progs tic &&
	    install -m755 progs/tic $PREFIX_CROSS/bin &&
	    popd || exit 1
	    ;;

	pkg-config)
            # CLFS builds pkg-config as a part of the cross-compilation
            # toolchain so that it can have a pkg-config binary installed that
            # only searches in /tools
            #
            # NOTE: The internal glib snapshot can be used to remove a host
            #       system dependency, but if the host system has glib and a
            #       really old kernel that doesn't define PR_SET_NAME
            #       (<2.6.9?), it'll fail to compile.
            #
	    # NOTE: Some systems need march to be >= i486 to build the
	    #       included glib bits here...
            #
            # NOTE: We detect whether the host system has a usable glib
            #       available and only build the internal glib snapshot (with
            #       fingers crossed) if it's needed.
            if [ "$HOST_HAS_GLIB" = "yes" ]; then
                _FLAGS=
                _OPTS=
            else
                _FLAGS="-march=i486"
                _OPTS="--with-internal-glib"
            fi
            if [ -n "$BUILD32" ]; then
                # x86_64 multi
	        PKG_PATH="$PREFIX_FINAL/lib64/pkgconfig"
            else
                # x86 or x86_64 pure
	        PKG_PATH="$PREFIX_FINAL/lib/pkgconfig"
            fi
            PKG_PATH+=":$PREFIX_FINAL/tools/share/pkgconfig"
            CPPFLAGS=$_FLAGS \
		build_generic $1 --prefix=$PREFIX_CROSS \
		$_OPTS --with-pc-path=$PKG_PATH \
                --host=$CLFS_TARGET || exit 1
	    ;;

	gmp)
            # If you are building with a host which has 32-bit user-space with
            # a 64-bit capable CPU, cross-tools GMP will attempt to link with
            # 64-bit libraries. Adding ABI=32 to the configure call fixes
            # it.
            #
            # NOTE: We forcefully set ABI=32 if our host system's cpu (as
            #       reported by autoconf) doesn't have 64 in it... which could
            #       be incorrect in some bizarre case?
            if $(echo $CLFS_HOST | awk -F- '{print $1}' | grep -vq 64); then
                OPTS+=" ABI=32"
            fi
	    build_generic $1 $OPTS --enable-cxx || exit 1
	    ;;

	mpfr)
	    LDFLAGS="-Wl,-rpath,$PREFIX_CROSS/lib" \
		build_generic $1 $OPTS \
		--with-gmp=$PREFIX_CROSS || exit 1
	    ;;

	mpc)
	    LDFLAGS="-Wl,-rpath,$PREFIX_CROSS/lib" \
		build_generic $1 $OPTS \
		--with-gmp=$PREFIX_CROSS \
		--with-mpfr=$PREFIX_CROSS || exit 1
	    ;;

	isl)
	    LDFLAGS="-Wl,-rpath,$PREFIX_CROSS/lib" \
		build_generic $1 $OPTS \
		--with-gmp-prefix=$PREFIX_CROSS || exit 1
	    ;;

	cloog)
            setup_generic $1 &&
	    LDFLAGS="-Wl,-rpath,$PREFIX_CROSS/lib" \
		configure_generic $1 $OPTS \
		--with-gmp-prefix=$PREFIX_CROSS \
		--with-isl-prefix=$PREFIX_CROSS || exit 1

            pushd $builddir &&
            cp -v Makefile{,.orig} &&
            sed '/cmake/d' Makefile.orig > Makefile &&
            popd || exit 1

            compile_generic $1 || exit 1
	    ;;

	binutils)
            # add 64bit support if desired
            if [ -n "$BUILD64" ]; then
                OPTS+=" --enable-64-bit-bfd"
            fi
            # disable multilib if we're building pure 32 or 64 bit
            if [ -z "$BUILD32" ]; then
                OPTS+=" --disable-multilib"
                OPTS+=" --with-lib-path=$PREFIX_FINAL/lib"
            else
                OPTS+=" --with-lib-path=$PREFIX_FINAL/lib:$PREFIX_FINAL/lib64"
            fi

	    # NOTE: The CLFS book sets lib-path to /tools as apposed to
	    #       /tools-cross (i.e., $PREFIX_FINAL instead of
	    #       $PREFIX_CROSS).  This is not a typo.  The lib-path is for
	    #       run-time, at which point we'll be running the stage1
	    #       builder and we'll want the cross-compiled binutils to be
	    #       looking in PREFIX_FINAL.
	    AR=ar AS=as \
		build_generic $1 $OPTS \
		--host=${CLFS_HOST} \
		--target=${CLFS_TARGET} \
		--with-sysroot=${CLFS} \
                --disable-werror || exit 1
	    ;;

	gcc-static)
	    setup_generic gcc || exit 1

            # apply the CLFS specs patch
	    if [ ! -f $builddir/Makefile ]; then
                # NOTE: gcc has a different patch for pure64 than for x86 or
                #       x86_64 multilib.
                p=$ruckus_srcdir/utils/bootstrap-cross/patches/gcc
                if [ -n "$BUILD64" -a -z "$BUILD32" ]; then
                    p+=/*-pure64_specs-*.patch
                else
                    p+=/*-specs-*.patch
                fi
                echo "applying $p..."
		pushd $source &&
		patch -Np1 < $p || exit 1
		popd
	    fi

	    # make GCC look in PREFIX_FINAL (i.e., not the host sys)
            pushd $source
	    echo "#undef STANDARD_STARTFILE_PREFIX_1" >> gcc/config/linux.h
            echo "#define STANDARD_STARTFILE_PREFIX_1 \"$PREFIX_FINAL/lib/\"" >> gcc/config/linux.h
	    echo "#undef STANDARD_STARTFILE_PREFIX_2" >> gcc/config/linux.h
            echo "#define STANDARD_STARTFILE_PREFIX_2 \"\"" >> gcc/config/linux.h
            popd

	    # create a dummy limits.h so the build will not use the one
	    # provided by the host distro
	    mkdir -p $PREFIX_FINAL/include &&
	    touch $PREFIX_FINAL/include/limits.h || exit 1

	    # NOTE: gcc-static, glibc32, glibc64, and gcc-final should NOT use
	    #       our common OPTS.  these packages are VERY important and so
	    #       we're going to follow the CLFS book exactly.
	    OPTS=""

            # disable multilib if we're building pure 32 or 64 bit
            if [ -z "$BUILD32" ]; then
                OPTS+=" --disable-multilib"
            fi

            AR=ar LDFLAGS="-Wl,-rpath,$PREFIX_CROSS/lib" \
                configure_generic gcc $OPTS --prefix=$PREFIX_CROSS \
                --build=${CLFS_HOST} --host=${CLFS_HOST} --target=${CLFS_TARGET} \
                --with-sysroot=${CLFS} --with-local-prefix=$PREFIX_FINAL \
                --with-native-system-header-dir=$PREFIX_FINAL/include --disable-nls \
                --disable-shared --with-mpfr=$PREFIX_CROSS --with-gmp=$PREFIX_CROSS \
                --with-cloog=$PREFIX_CROSS --with-mpc=$PREFIX_CROSS --without-headers \
                --with-newlib --disable-decimal-float --disable-libgomp --disable-libmudflap \
                --disable-libssp --disable-libatomic --disable-libitm \
                --disable-libsanitizer --disable-libquadmath --disable-threads \
                --disable-target-zlib --with-system-zlib --with-isl=$PREFIX_CROSS \
                --enable-languages=c --enable-checking=release || exit 1

	    pushd $builddir &&
	    make -j$JOBCOUNT all-gcc all-target-libgcc &&
	    make install-gcc install-target-libgcc &&
	    popd || exit 1
	    ;;

	glibc-stage1)
	    setup_generic glibc || exit 1

            # Apply the following sed so the tzselect script works properly
            #
            # NOTE: In source dir!  This is OK because we build from a dist
            #       tarball (i.e., we're not polluting ruckus/src/gcc) and we
            #       actually want these changes to stick around until
            #       glibc-stage2.
            pushd $source &&
            cp -v timezone/Makefile{,.orig} &&
            sed 's/\\$$(pwd)/`pwd`/' timezone/Makefile.orig > timezone/Makefile &&
            popd || exit 1

	    # Add the following to config.cache to disable ssp when building
	    # Glibc
	    #
	    # NOTE: In $builddir!!!
	    pushd $builddir
	    echo "libc_cv_ssp=no" > config.cache
	    popd

	    # NOTE: glibc builds and installs in PREFIX_FINAL on purpose.
	    #       this package can safely be built now and installed in
	    #       /tools so we don't have to build it again during the
	    #       final bootstrap stage.  this is the way the CLFS book
	    #       does it, so we're following suit.
            #
	    # NOTE: gcc-static, glibc32, glibc64, and gcc-final should NOT use
	    #       our common OPTS.  these packages are VERY important and so
	    #       we're going to follow the CLFS book exactly.
	    OPTS=""

            if [ -n "$BUILD32" ]; then
                # x86_64 multi
                tmp_CC="${CLFS_TARGET}-gcc ${BUILD32}"
                tmp_host="--host=${CLFS_TARGET32}"
            elif [ -n "$BUILD64" ]; then
                # x86_64 pure
                tmp_CC="${CLFS_TARGET}-gcc ${BUILD64}"
                tmp_host="--host=${CLFS_TARGET}"
            else
                # x86
                tmp_CC="${CLFS_TARGET}-gcc"
                tmp_host="--host=${CLFS_TARGET}"
            fi
            echo tmp_CC: $tmp_CC
            echo tmp_CFLAGS: $tmp_CFLAGS
            echo tmp_host: $tmp_host

            BUILD_CC="gcc" CC=$tmp_CC \
                AR="${CLFS_TARGET}-ar" RANLIB="${CLFS_TARGET}-ranlib" \
                configure_generic glibc --prefix=$PREFIX_FINAL \
                $tmp_host --build=${CLFS_HOST} \
                --disable-profile --enable-kernel=2.6.32 \
                --with-binutils=$PREFIX_CROSS/bin --with-headers=$PREFIX_FINAL/include \
                --enable-obsolete-rpc --cache-file=config.cache || exit 1

            compile_generic glibc || exit 1
	    ;;

	glibc-stage2)
	    # assuming that glibc-stage1 has already been run, we already have
	    # a fully patched source tree, so setup_generic should just verify
	    # that the source tree exists and setup all our build variables.
	    #
            # NOTE: What we're doing here (and for gcc down below) is we're
            #       REUSING the prepped source tree from the 32bit build with a
            #       seperate BUILD dir.  We can do this because we built the
            #       32bit stuff out-of-tree.
            #
	    # NOTE: This means you CANNOT start a build at the glibc-stage2
	    #       step unless you have a leftover glibc tree from a previous
	    #       run or you set it up by hand!
	    setup_generic glibc || exit 1

	    # however, we do have to adjust some variables
	    builddir=$PWD/.build/glibc64
	    mkdir -p $builddir
	    echo "builddir: $builddir"

	    # Add the following to config.cache to disable ssp when building
	    # Glibc
	    #
	    # NOTE: In $builddir!!!
	    pushd $builddir
	    echo "libc_cv_ssp=no" > config.cache
	    popd

	    # install 64-bit libraries in lib64
	    pushd $builddir
	    echo "slibdir=$PREFIX_FINAL/lib64" >> configparms
	    popd

	    # NOTE: glibc builds and installs in PREFIX_FINAL on purpose.
	    #       this package can safely be built now and installed in
	    #       /tools so we don't have to build it again during the
	    #       final bootstrap stage.  this is the way the CLFS book
	    #       does it, so we're following suit.
            #
	    # NOTE: gcc-static, glibc32, glibc64, and gcc-final should NOT
	    #       use our common OPTS.  these packages are VERY important and
	    #       so we're going to follow the CLFS book exactly.
	    OPTS=""

            BUILD_CC="gcc" CC="${CLFS_TARGET}-gcc ${BUILD64}" \
                AR="${CLFS_TARGET}-ar" RANLIB="${CLFS_TARGET}-ranlib" \
                configure_generic glibc64 --prefix=$PREFIX_FINAL \
                --host=${CLFS_TARGET} --build=${CLFS_HOST} --libdir=$PREFIX_FINAL/lib64 \
                --disable-profile --enable-kernel=2.6.32 \
                --with-binutils=$PREFIX_CROSS/bin --with-headers=$PREFIX_FINAL/include \
                --enable-obsolete-rpc --cache-file=config.cache || exit 1

            compile_generic glibc64 || exit 1
	    ;;

	gcc)
	    # assuming that gcc-static has already been run, we already have
	    # a fully patched source tree, so setup_generic should just
	    # verify that the source tree exists and setup all our build
	    # variables.
            #
            # NOTE: What we're doing here (and for glibc above) is we're
            #       REUSING the prepped source tree from the static build with
            #       a seperate BUILD dir.  We can do this because we built the
            #       static stuff out-of-tree.
            #
	    # NOTE: This means you CANNOT start a build at the gcc step unless
	    #       you have a leftover gcc tree from a previous run or you set
	    #       it up by hand!
	    setup_generic gcc || exit 1

	    # however, we do have to adjust some variables
	    builddir=$PWD/.build/gcc-final
	    mkdir -p $builddir
	    echo "builddir: $builddir"

	    # NOTE: gcc-static, glibc32, glibc64, and gcc-final should NOT
	    #       use our common OPTS.  these packages are VERY important and
	    #       so we're going to follow the CLFS book exactly.
            OPTS=""

            # disable multilib if we're building pure 32 or 64 bit
            if [ -z "$BUILD32" ]; then
                OPTS+=" --disable-multilib"
            fi

            AR=ar LDFLAGS="-Wl,-rpath,$PREFIX_CROSS/lib" \
                configure_generic gcc-final $OPTS --prefix=$PREFIX_CROSS \
                --build=${CLFS_HOST} --target=${CLFS_TARGET} --host=${CLFS_HOST} \
                --with-sysroot=${CLFS} --with-local-prefix=$PREFIX_FINAL \
                --with-native-system-header-dir=$PREFIX_FINAL/include \
                --disable-nls --disable-static --enable-languages=c,c++ \
                --enable-__cxa_atexit --enable-threads=posix --with-mpc=$PREFIX_CROSS \
                --with-mpfr=$PREFIX_CROSS --with-gmp=$PREFIX_CROSS --with-cloog=$PREFIX_CROSS \
                --with-isl=$PREFIX_CROSS --with-system-zlib --enable-checking=release \
                --enable-libstdcxx-time || exit 1

	    pushd $builddir &&
	    make -j$JOBCOUNT AS_FOR_TARGET="${CLFS_TARGET}-as" \
		LD_FOR_TARGET="${CLFS_TARGET}-ld" &&
	    make install &&
	    popd || exit 1
	    ;;

	*)
	    build_generic $1 $OPTS || exit 1
            ;;
    esac
}


packages=""
# NOTE: CLFS added bc to cross-tools (and final system) on 2013-07-23... I
#       remember seing something on the mailing list... but I don't really
#       remember for sure why it was added.  I think it had something to do
#       with prepping the linux headers.
#
# FIXME: I don't understand why this isn't a host system requirement as
#        apposed to a cross-tools item... I suspect it ended up in
#        cross-tools for CLFS because it's so easy/quick to install, why
#        bother checking host system.  But we've got bootstrap-early to take
#        care of that...
#
# FIXME: I'm handling this in bootstrap-early unless breakage is encountered.
#packages+=" bc"
packages+=" file"
packages+=" linux_headers"
packages+=" m4"
packages+=" ncurses"
packages+=" pkg-config"
packages+=" gmp"
packages+=" mpfr"
packages+=" mpc"
packages+=" isl"
packages+=" cloog"
packages+=" binutils"
packages+=" gcc-static"
packages+=" glibc-stage1"

# NOTE: We only build stage2 if we're building x86_64 multilib, which is the
#       only case that this variable gets set.
if [ -n "$BUILD32" ]; then
    packages+=" glibc-stage2"
fi

packages+=" gcc"


mkdir -p $CLFS$PREFIX_CROSS $CLFS$PREFIX_FINAL

echo packages: $packages
for p in $packages; do
    echo -e "\n+++++ building bootstrap-cross package: $p"
    build $p || exit 1
done

touch .build/ALL_DONE
