#!/bin/bash

# !!!!!!!!!!!!!!! super important compatability warning of doom !!!!!!!!!!!!!!!
#
# The bootstrap-stage2 scripts run using busybox's ash shell (at least until
# bash is installed).  That means there are a few bash-isms that we MUST avoid
# using.  It also runs using the busybox versions of the GNU userspace (e.g.,
# sed, awk, grep), which may not have identical usage.  See similar comment
# block in bootstrap-early/functions for details.


# These variables get set by the init script, but try to autodetect them
# assuming we're building out-of-tree if they're not set
#
# FIXME: make stage2 builddir configurable somehow?
#
[ -n "$ruckus_srcdir" ] || ruckus_srcdir=/ruckus
[ -n "$ruckus_builddir" ] || ruckus_builddir=/ruckus-build

# set this so we can detect that we're in the stage2 bootstrap environment
RUCKUS_BOOTSTRAP_STAGE2=1

# source our common variables and functions
. $ruckus_srcdir/utils/bootstrap-early/functions

# change to the bootstrap-stage2 subdir
#
# NOTE: We cd to utils/bootstrap-stage2 so that we can be consistent with the
#       other bootstrap scripts, which are executed by make in their respective
#       subdirectory.
#
cd $ruckus_builddir/utils/bootstrap-stage2 || exit 1


build()
{
    # set some common variables for all targets
    OPTS="--prefix=$PREFIX_TOOLS"

    # put libs in lib64 if we're building x86_64 multilib
    if [ -n "$BUILD32" ]; then
	OPTS="$OPTS --libdir=$PREFIX_TOOLS/lib64"
    fi

    OPTS="$OPTS --disable-static"
    OPTS="$OPTS --enable-shared"
    OPTS="$OPTS --disable-nls"

    case "$1" in
	tcl)
	    setup_generic $1 || exit 1

            # override configure to move down a directory (we only need to
            # build part of tcl here).
	    configure=$source/unix/configure
	    echo configure: $configure

            # increase memory size for regular expressions
            #
            # NOTE: This builds out-of-tree using a source tarball, so we don't
            #       need to undo the modification when we're done.
            #
	    # FIXME: is this still needed...? looks like it's already 15000?
	    #        DUPTRAVERSE_MAX_DEPTH, right?
            pushd $source &&
            sed -i s/500/5000/ generic/regc_nfa.c &&
            popd || exit 1

	    configure_generic $1 $OPTS && 
	    compile_generic $1 || exit 1

	    # and do a bit of extra work
            #
            # NOTE: CLFS uses ln -sv here, but busybox doesn't support -v so we
            #       leave that off.
	    pushd $builddir &&
	    sudo make install-private-headers &&
	    sudo ln -s tclsh8.6 $PREFIX_TOOLS/bin/tclsh
	    popd || exit 1
	    ;;

	expect)
	    if [ -n "$BUILD32" ]; then
		OPTS="$OPTS --with-tcl=$PREFIX_TOOLS/lib64"
	    else
		OPTS="$OPTS --with-tcl=$PREFIX_TOOLS/lib"
	    fi
	    OPTS="$OPTS --with-tclinclude=$PREFIX_TOOLS/include"

	    setup_generic $1 &&
	    configure_generic $1 $OPTS || exit 1

	    # custom build script.  setting SCRIPTS like this causes expect
	    # to leave out a bunch of stuff we don't need right now.
	    pushd $builddir &&
	    make -j$JOBCOUNT &&
	    sudo make SCRIPTS="" install &&
	    popd || exit 1
	    ;;

        perl)
            # override configure (perl is special...) and setup for in-tree
            # building.
	    use_configure=configure.gnu build_in_tree=yes \
	        setup_generic $1 || exit 1

            # fix hardcoded path
            #
            # NOTE: Since we're building in a copy of our source tree, we don't
            #       have to worry about undoing this source modification.
            #
            pushd $source &&
            sed -i.orig "s|/usr/include|$PREFIX_TOOLS/include|g" \
                ext/Errno/Errno_pm.PL &&
            popd || exit 1

            # set OPTS
            #
            # NOTE: CLFS builds 32bit perl for x86 and x86_64, but it builds
            #       64bit for pure64.  I'm 99% sure this is because it's
            #       non-trivial to get perl to install into lib64, so they're
            #       just building for whatever arch is supposed to be in /lib.
            #
            # NOTE: We also have to set ranlib because perl's Configure script
            #       doesn't get along well with busybox and gets all screwed up
            #       resuling in failure to create libperl.a.
            #
            OPTS="--prefix=$PREFIX_TOOLS"
            OPTS="$OPTS -Dcc='gcc ${BUILD32}' -Dranlib=ranlib"

            configure_generic $1 $OPTS || exit 1

            # fix more busybox heartburn
            #
            # NOTE: This is done to remove 'u' from ar usage in the toplevel
            #       Makefile because busybox's ar command doesn't like it (and
            #       it doesn't appear to be needed anyway).
            pushd $builddir &&
            sed -i 's|rcu|rc|' Makefile &&
            popd || exit 1

            compile_generic $1 || exit 1

            # hold perl's hand even more
            #
            # NOTE: Perl's build system doesn't notice when it has failed and
            #       happily returns a successful exit status.  So we have to
            #       add a double check here for $PREFIX_TOOLS/bin/perl to be
            #       sure!
            [ -f $PREFIX_TOOLS/bin/perl ] || exit 42

            # and do a bit of extra work
            #
            # NOTE: CLFS uses ln -sv here, but busybox doesn't support -v so we
            #       leave that off.
	    sudo ln -sf $PREFIX_TOOLS/bin/perl /usr/bin || exit 1
            ;;

        python)
            # apply additional patches if we're building x86_64 multilib
            __patches=
            if [ -n "$BUILD32" ]; then
                __patches=$ruckus_srcdir/src/python/*.patch_maybe
            fi
            patches=$__patches \
                build_generic $1 $OPTS || exit 1
            ;;

        srp)
            # NOTE: Our python doesn't have bz2, because we haven't installed
            #       the legit bzip2 package (we use busybox's bzip support).
            #       Whatever, just disable it here.  We want to use lzma,
            #       anyway.
            #
            build_generic $1 $OPTS --disable-bzip2 || exit 1
            ;;

	*)
	    build_generic $1 $OPTS || exit 1
	    ;;
    esac
}


# FIXME: Might want to consider building native versions of the autotools so we
#        don't have to worry about pre-bootstrapping source trees prior to
#        booting.  Might not be worth the effort though... we'd have to draw a
#        line in the sand somewhere (i.e., do we want git too?  what about
#        bootstrap scripts that require networking?).


packages=""
packages="$packages tcl"
packages="$packages expect"
packages="$packages dejagnu"

# FIXME: This is now in CLFS Chapter 6, Constructing a Temporary System.  Not
#        sure why or when it got moved there.  Did it fail to cross-compile for
#        me at some point?
#
# FIXME: This looks to only be needed by the check targets of kbd and
#        libpipeline, both of which are needed by systemd (I think).  If I
#        don't do a make check on those, I can leave it out of bootstrap
#        entirely.  Also, CLFS only installs this in /tools... it's left off
#        the final system.  So we could get away with dropping it from
#        bootstrap and from the final system unless something else we've added
#        needs it.  Of course, if we never do a 'make check', we'll never need
#        it...
#
# FIXME: I should probably add this to the final workstation.img so that it's
#        available for development...
#
#packages="$packages check"

# NOTE: This is in CLFS Chapter 10, Installing Basic System Software, but
#       installs in /tools so I've moved it up here.  CLFS even has a note
#       saying that it really should be in Chapter 6, but it's a pain to
#       cross-compile and not needed for 1st boot of the temporary system, so
#       building here is easier to maintain.
packages="$packages perl"

# srp
packages="$packages python"
packages="$packages srp"

# NOTE: Probably not strictly a requirement... but otherwise we won't be able
#       to do any git tweakage (submodule, checkout, etc) in the build
#       environment.
#
# FIXME: If we can get away with building this here w/out having to add a bunch
#        of extra stuff, we should.
#
#packages="$packages git"


# FIXME: might want the following if we're building bare-metal instead of as a
#        xen domU.
#
# sshd (openssl/openssh, or dropbear (the embedded alernative))
#packages="$packages openssl"
#packages="$packages openssh"
#
# dhcp/dns
#packages="$packages dnsmasq"
#
# dev tools
#packages="$packages rsync"
#packages="$packages git"
#packages="$packages readline"
#packages="$packages emacs"
#packages="$packages zsh"


# FIXME: should this bootstrap environment actually BE my tiniest embedded
#        image?  this would allow us to build a console-only version of emacs
#        for use on embedded systems, but replace it (via the srp build system)
#        with a fully X-capable version later on...
#
#        even if we don't treat it as the tiny.img, we'll want to consider
#        leaving it on the system until we've built through the everything
#        image...  for example, we could build a text-mode emacs in /tools and
#        leave it on the system until after we've built a fully featured (x,
#        pdf, images, etc) emacs later on.  Same goes for Python, which we'll
#        want on small headless systems w/out X, but we'll want Python to
#        magically have the tk module by the time we're done building
#        development workstations.
#
#        the slippery slope here is that we're talking about fielding systems
#        that have cross-compiled gcc/glibc instead of natively-compiled
#        gcc/glibc...
#
#        could always just leave off python, srp, and all the other bootstrap
#        niceeties for fielded systems w/out x...  then add that all in via
#        whatever image adds it later.  In other words, our different tiny
#        embedded variants wouldn't have srp package management available after
#        installation.  This wouldn't be that big of a deal, except that I was
#        planning on using one of those for the bootable installer... which
#        would need srp.  I guess we could base the installer off of the
#        smallest image to include X?


for p in $packages; do
    echo "building bootstrap-stage2 package: $p"
    build $p || exit 1
done

echo ""
echo "-------------------------------------------------------------------"
echo "Work complete!  Time to kick off the final system builder!"
echo ""
exit 0





# NOTE: if the bootstrap system is feature-complete for my embedded
#       server, i can leave it booted up all the time (as apposed to
#       rebooting into fedora).  here's what i would need
#
#       www: i don't do anything fancy here... i think the busybox
#       httpd will suffice.  (although i'll need ImageMagick for photo
#       thumbnail generation)
#
#       nfs: i think i'd have to add nfs-utils for this...  don't
#       think busybox does nfs server.
#
#       dhcp: busybox dhcpd/dnsd functionality isn't sufficient.
#       we'll add dnsmasq to take care of dhcpd and dynamic dns.
#
#       ssh: i need to be able to ssh into the box...  openssl/openssh
#       or dropbear?
#
#       dev tools: i'm gonna need rsync and git.  would probably like
#       to have emacs and zsh, too.
#
#       python: probably need this to use media_utils, etc
#
#       multimedia: speaking of media_utils... that would require at
#       least having ImageMagick.  Maybe also need dvgrab and all the
#       multimedia libs up to ffmpeg...
#
#       syslog: can use busybox's syslogd and klogd, but have to add
#       init scripts or something...


# FIXME: considering including extra documentation tools in here as well, so
#        we don't have to wory about tools not existing yet in the bootstrap
#        environment.
#packages+=" tetex"
#packages+=" asdf"
#packages+=" xfig"
#packages+=" transfig"
#packages+=" netpbm"
#packages+=" latex2html"
#packages+=" graphviz"
#packages+=" doxygen"
#packages+=" ghostscript"
#packages+=" gtkdoc"

#packages+=" freetype"
#packages+=" docbook-xml"
#packages+=" docbook-xsl"
#packages+=" libxml2"
#packages+=" libxslt"
#packages+=" fontconfig"
