#!/bin/bash

# should set toplevel via autoconf?
toplevel=/ruckus

# source our common variables and functions
. $toplevel/utils/bootstrap-early/functions

# NOTE: The bootstrap-stage2 scripts run using busybox's ash shell.  That
#       meens there are a few bash-isms that we MUST avoid using.  Here's a
#       list of the ones that come to mind:
#
#       No += support, so OPTS+=' --foo' has to be OPTS="$OPTS --foo".
#
# FIXME: I don't know if nullglob or dotglob options exist in ash...


build()
{
    # set some common variables for all targets
    OPTS="--prefix=$PREFIX_FINAL"

    if [ -n "$BUILD64" ]; then
	OPTS="$OPTS --libdir=$PREFIX_FINAL/lib64"
    fi

    OPTS="$OPTS --disable-static"
    OPTS="$OPTS --enable-shared"
    OPTS="$OPTS --disable-nls"

    case "$1" in
	tcl)
	    # NOTE: we can't use setup_generic here because it assumes we're
	    #       gonna try to build in the toplevel direcory of the
	    #       source tree...  which isn't the case for tcl.
	    p=tcl
	    builddir=$PWD/.build/$p
	    source=$sourcedir/$p/unix
	    configure=$source/configure
	    mkdir -p $builddir

	    echo source: $source
	    echo builddir:  $builddir
	    echo configure: $configure

	    configure_generic $1 $OPTS && 
	    compile_generic $1 || exit 1

	    # and do a bit of extra work
	    pushd $builddir &&
	    sudo make install-private-headers &&
	    sudo ln -s tclsh8.5 $PREFIX_FINAL/bin/tclsh
	    popd || exit 1

	    ;;

	expect)

	    if [ -n "$BUILD64" ]; then
		OPTS="$OPTS --with-tcl=$PREFIX_FINAL/lib64"
	    else
		OPTS="$OPTS --with-tcl=$PREFIX_FINAL/lib"
	    fi
	    OPTS="$OPTS --with-tclinclude=$PREFIX_FINAL/include"

	    setup_generic $1 &&
	    configure_generic $1 $OPTS || exit 1

	    # custom build script.  setting SCRIPTS like this causes expect
	    # to leave out a bunch of stuff we don't need right now.
	    pushd $builddir &&
	    make -j$JOBCOUNT &&
	    sudo make SCRIPTS="" install &&
	    popd || exit 1
	    ;;

	*)
	    build_generic $1 $OPTS || exit 1
	    ;;
    esac
}


packages=""
packages="$packages tcl"
packages="$packages expect"
packages="$packages dejagnu"


cd $toplevel/utils/bootstrap-stage2
mkdir -p $PWD/.build

for p in $packages; do
    echo "building bootstrap-stage2 package: $p"
    build $p || exit 1
done

exit 0

# make a backup of our progress.
#
# NOTE: this has to be done using tar because dump can only do incrementals
#       of an entire filesystem
#
# NOTE: using sudo for this to make sure our build user has appropriate
#       permissions to read all the files we're backing up
cp $BUILDROOT/baby-bootstrap-stage1.snar \
    $BUILDROOT/baby-bootstrap-stage2.snar &&
sudo tar -vcf $BUILDROOT/baby-bootstrap-stage2.tar \
    -g $BUILDROOT/baby-bootstrap-stage2.snar -C $BABY . || exit 1
