# -*- mode: sh -*-

# !!!!!!!!!!!!!!! super important compatability warning of doom !!!!!!!!!!!!!!!
#
# The bootstrap-stage2 scripts run using busybox's ash shell (at least until
# bash is installed).  That means there are a few bash-isms that we MUST avoid
# using.  It also runs using the busybox versions of the GNU userspace (e.g.,
# sed, awk, grep), which may not have identical usage.
#
# Things to avoid:
#
# - No += support, so OPTS+=' --foo' has to be OPTS="$OPTS --foo".
#
# - Don't use shopt for special options (e.g., nullglob, dotglob), unless it's
#   to DISABLE a default bash-ism (e.g., command hashing), in which case you
#   must check the $BASH variable.
#
# - Can't use {} globbing (e.g., cp foo{,orig})
#
# - Cannot trap ERR.  The kernel's link-vmlinux.sh uses this (called during
#   mrproper)...
#
# Things that are still OK:
#
# - $() subshell expansion
# - wc -l usage
# - sed -i usage
# - cp, mv, rm, mkdir, rmdir, ln now support -v for verbose output
# - pushd/popd are made available here
# - sudo is made available (sort-of) here


# paths to the package scripts and source directories for each package
#
# NOTE: These MUST be absolute paths, because we change directory all over the
#       place and expect them to still be valid paths.
#packagedir=$ruckus_srcdir/packages
#sourcedir=$ruckus_srcdir/src

# written out by configure
#
# NOTE: This means that the ruckus-builder domu will need access to our
#       original build-dir...
#
# FIXME: double check that i don't use any of those variables in here or my
#        glibc.notes file.
#
#. $ruckus_builddir/utils/bootstrap-early/config


# this variable tells bootstrap scripts (probably just cpio and tar) to use
# our paxutils submodule instead of cloning their own.
#
# NOTE: If tar used .gitmodules for paxutils, this wouldn't be needed.
#       However, the tar boostrap script just does a git clone instead of
#       using submodules.  At least, for now...
#export PAXUTILS_SRCDIR=$ruckus_srcdir/src/paxutils

# this variable tells bootstrap scripts to not download new po files via
# rsync
#export SKIP_PO=t

# the presence of this file will indicate that we're running in the stage2
# bootstrap environment (i.e., booted up into baby system building the rest
# of the bootstrap utilities)
#RUCKUS_BOOTSTRAP_STAGE2_FILE=/.ruckus_bootstrap_stage2

# only add BOOTSTRAP_EARLY and BOOTSTRAP_CROSS to PATH if we haven't booted
# into the stage2 bootstrap system yet.
#
# FIXME: we need to be more careful here...
#
#        1. We may not want EARLY in our path anymore once we get into stage1
#           (i.e., we don't want to link against host system things while
#           cross-compiling stage1).  I ran into this on my avlinux box w/ make
#           accidentally detecing host system's guile, then trying to link
#           against it (this was actually because our pkg-config compiles in
#           the host system's pkg-config search path too, but illustrates the
#           point).
#
#if [ -z "$RUCKUS_BOOTSTRAP_STAGE2" ]; then
#    # setup environment to use our bootstrap-early stuff
#    export PATH=$PREFIX_HOSTPREP/bin:$PREFIX_HOSTPREP/sbin:$PATH
#    export MANPATH=$PREFIX_HOSTPREP/man:$PREFIX_HOSTPREP/share/man:$MANPATH
#    export PKG_CONFIG_PATH=$PREFIX_HOSTPREP/lib/pkg-config:$PKG_CONFIG_PATH
#    if [ -z "$LD_LIBRARY_PATH" ]; then
#       export LD_LIBRARY_PATH=$PREFIX_HOSTPREP/lib
#    else
#       export LD_LIBRARY_PATH=$PREFIX_HOSTPREP/lib:$LD_LIBRARY_PATH
#    fi
#
#    # and now add in the bootstrap-cross tools
#    export PATH=$PREFIX_CROSS/bin:$PREFIX_CROSS/sbin:$PATH
#    export MANPATH=$PREFIX_CROSS/man:$PREFIX_CROSS/share/man:$MANPATH
#    export PKG_CONFIG_PATH=$PREFIX_CROSS/lib/pkg-config:$PKG_CONFIG_PATH
#    if [ -z "$LD_LIBRARY_PATH" ]; then
#       export LD_LIBRARY_PATH=$PREFIX_CROSS/lib
#    else
#       export LD_LIBRARY_PATH=$PREFIX_CROSS/lib:$LD_LIBRARY_PATH
#    fi
#fi

# these variables will be used by default to determine the number of jobs to
# pass into make.
#
# FIXME: detect CPUCOUNT! do we have 'wc -l' in bootstrap_stage2?
#
export CPUCOUNT=$(grep "^processor" /proc/cpuinfo | wc -l)
export JOBCOUNT=$((CPUCOUNT+1))
export JOBCOUNT_KBUILD=$((CPUCOUNT*4))

# turn off bash's hash function.  we don't want bash caching PATH lookups
# while we're installing things all over the place...
#
# NOTE: This is a bash-only issue documented in the CLFS books.  The stage2
#       builder at least starts out using ash, which doesn't support hashing at
#       all (from what I can tell).  Later during the build, bash may start
#       getting used (after it gets installed), so we still need this
#       conditionally set.
#
if [ -n "$BASH" ]; then
    set +h
fi

# make sure we have a sane umask
#umask 022

# make sure we don't run into localization issues on old host systems
#export LC_ALL=POSIX

# make sure we have pushd/popd, since we use it all over the place
#
# NOTE: these two aliases are only set if a check for pushd fails.
need_pushd=0
pushd / >/dev/null 2>&1 && popd >/dev/null || need_pushd=1
if [ $need_pushd -eq 1 ]; then
    alias pushd='wd="$(pwd) ${wd}" && cd'
    alias popd='cd ${wd%% *} && wd=${wd#* }'
else
    # make bash's pushd/popd be quiet
    alias pushd='pushd >/dev/null'
    alias popd='popd >/dev/null'
fi

# provide sudo for stage2
#
# NOTE: This is so we can have the illusion of sudo in stage2, via busybox's
#       su.  Note that this only works because root doesn't have a password in
#       the bootstrap system.  The only real benefit of this really is that we
#       can maintain consistency with the rest of the scripts, and we don't
#       have to wory about quoting the argument to su.
#
#need_sudo=0
#which sudo >/dev/null || need_sudo=1
#if [ $need_sudo -eq 1 ]; then
#    sudo()
#    {
#       su -c "cd $PWD; $*"
#    }
#fi


# define generic builder method.  this does some magic to set up a build
# tree based on what's stored in sourcedir (ie, a source tree or a source
# tarball).  first arg is package name, the rest are passed on to configure.
#build_generic()
#{
#    setup_generic $* &&
#    configure_generic $* &&
#    compile_generic $* || exit 1
#}
#


# Takes a =build_id= as arg, creates a builddir for it.  Will use =SOURCE_DIR=
# for out-of-tree building by default.  If needed, the source dir will
# automatically get bootstrapped (via bootstrap_generic).  Sets the following
# variables in the environment:
#
#   =sourcedir= - The directory the sources live in.  By default, same as
#     =SOURCE_DIR=, but may be different if =checkout=, =copy=, or =patches=
#     variables are set.  See Options.
#
#   =builddir= - The working directory of the build.  By default, this is a
#     seperate directory for out-of-tree building.  Will be the same as
#     =sourcedir= (or a symlink to it) if =build_in_tree= variable is set.
#
#   =configure= - The absolute path to the configure script.
#
# Options:
#
#   =checkout= - If =SOURCE_DIR= is actually a git repo, specifying
#     checkout=tagname will cause a new source dir to be checked out using the
#     specified tagname.  The =source= variable will get set to the freshly
#     cloned tree.
#
#   =copy= - The =SOURCE_DIR= will get copied into a new directory.  The
#     =source= variable will get set to the new directory.
#
#   =build_in_tree= - The build will happen directly in the source tree.  Some
#     packages do not support out-of-tree building (or have buggy automake
#     files) and must be built in-tree.  This will generally be done in
#     conjunction with =copy= or =checkout=, unless the provided source is a
#     dist tarball.
#
#   =patches= - The =SOURCE_DIR= will get copied and the supplied list of
#     patches will be applied.  This implies =copy=.  The patches must be
#     specified with absolute paths, but shell globs can be used.
#
#   =use_configure= - The specified script will be checked for instead of the
#     default =configure= when deciding if bootstrapping is needed.  This is
#     for packages (e.g., perl) that have a configure.gnu script.
#
#
# NOTE: Unlike the setup_generic in the Source Ruckus boostrap builder, this
#       function gets executed AFTER the source tarball has been extracted (if
#       one was specified).
#
setup_generic()
{
    build_id=$1
    shift
    # defaults
    builddir=$BUILD_DIR/$build_id
    sourcedir=$SOURCE_DIR

    # allow user to override the name of the configure script
    #
    # NOTE: Added this specifically for perl, which uses configure.gnu
    [ -n "$use_configure" ] || use_configure="configure"

    # check for sourcedir modifiers
    #
    # FIXME: might not want patches implying copy...  this made sense in the
    #        ruckus bootstrap builder, but inside an srp build script we may
    #        just have a patch for the tarball we've extracted and not care
    #        about making a copy of the source tree (e.g., because we're just
    #        building a single pass for x86 or x86_64-64)
    #
    #        that being said, we cannot guarantee that the user didn't hand us
    #        patches for an external source tree that we really SHOULD make a
    #        copy of before we muck with it...
    #
    if [ -n "$copy" ] || [ -n "$patches" ]; then
        sourcedir=$SOURCE_DIR-$build_id
        echo "copying source tree from $SOURCE_DIR to $sourcedir..."
        cp -a $SOURCE_DIR $sourcedir || exit 1

        # fix relative paths in copied .git file(s)
        find $sourcedir -name .git -exec \
            sed -i "s|^gitdir: [./]*|gitdir: $SOURCE_DIR/.|" {} \;
        
    elif [ -n "$checkout" ]; then
        sourcedir=$SOURCE_DIR-$build_id
        echo -n "creating local checkout of $checkout from $SOURCE_DIR in" \
            "$sourcedir..."
        git clone --shared --branch $checkout $SOURCE_DIR $sourcedir || exit 1

    fi

    if [ -n "$build_in_tree" ]; then
        builddir=$sourcedir
    fi

    # apply additional patches, if specified
    if [ -n "$patches" ]; then
        pushd $sourcedir || exit 1
        for p in $patches; do
            echo "applying additional patch: $p"
            patch -Np1 < $p || exit 1
        done
        popd
    fi

    configure="$sourcedir/$use_configure"
    unset use_configure

    # We need to make sure the sourcetree has already been bootstrapped.
    #
    # FIXME: args? haven't implemented this yet...
    #
    if [ ! -x $configure ]; then
        echo "$configure missing, calling autoreconf_generic..."
        autoreconf_generic || exit 1
    fi

    mkdir -p $builddir

    echo sourcedir: $sourcedir
    echo builddir:  $builddir
    echo configure: $configure
}


# FIXME: why would i bother with this... take out the first time check and this
#        is a silly one-liner...
#
# depends on:
#  $source - directory where our sources live
#  $builddir - working dir for building
#  $configure - path to configure script
#
#configure_generic()
#{
#    p=$1
#    shift
#    echo autoreconf: $autoreconf
#
#    pushd $builddir || exit 1
#    # only explicitly run configure the first time
#    if [ ! -f Makefile ] || [ -n "$autoreconf" ]; then
#        if [ ! -x $configure ] || [ -n "$autoreconf" ]; then
#            autoreconf_generic || exit 1
#        fi
#        $configure $* || exit 1
#    fi
#    popd
#}

# FIXME: wait... this shouldn't be needed.  core.py will ensure that SOURCE_DIR
#        has been bootstrapped already, and we're either going to use that
#        directly, copy it, or clone it...  well, a clone might need this...
#        not many things are really going to do that in this context, though.
#        the only thing we used checkout for in the bootstrap builder was the
#        kernel (checkout specific CLFS-tested rev for headers, but use
#        submodule controlled rev for final build).
#
#autoreconf_generic()
#{
#    pushd $sourcedir || exit 1
#
#    # some scripts will automatically run ./configure unless NOCONFIGURE is
#    # set, so lets set it.
#    export NOCONFIGURE=1
#
#    # choose a bootstrap method
#    nothing_to_do=
#    if [ -x ./bootstrap.sh ]; then
#        echo "./bootstrap.sh..."
#        ./bootstrap.sh || exit 1
#    elif [ -x ./bootstrap ]; then
#        echo "./bootstrap..."
#        ./bootstrap || exit 1
#    elif [ -x ./autogen.sh ]; then
#        echo "./autogen.sh..."
#        ./autogen.sh || exit 1
#    elif [ -f ./configure.in ] || [ -f ./configure.ac ]; then
#        echo "autoreconf..."
#        autoreconf --force --install || exit 1
#    else
#        nothing_to_do=true
#        echo "autoreconf_generic: doing nothing..."
#    fi
#    unset NOCONFIGURE
#
#    # if we were previously set up to use our cross-compiler.  set it back
#    # up now
#    #
#    # FIXME: diff!
#    #
##    if [ "$should_cross_compile" = "true" ]; then
##       set_cross_compile
##    fi
#
#    popd
#}


compile_generic()
{
    pushd $builddir &&
    make -j$JOBCOUNT && make DESTDIR=$PAYLOAD_DIR install &&
    popd || exit 1
}


#set_cross_compile()
#{
#    export CC="${CLFS_TARGET}-gcc"
#    export CXX="${CLFS_TARGET}-g++"
#    export AR="${CLFS_TARGET}-ar"
#    export AS="${CLFS_TARGET}-as"
#    export RANLIB="${CLFS_TARGET}-ranlib"
#    export LD="${CLFS_TARGET}-ld"
#    export STRIP="${CLFS_TARGET}-strip"
#
#    # NOTE: We append BUILD64 to CC and CXX here unconditionally.  This is OK
#    #       because BUILD64 is unset if we're building x86 and both pure64 and
#    #       multilib x86_64 builds use BUILD64 for all the tools built via the
#    #       cross-compiler.
#    #
#    # FIXME: i'm not sure i like the fact that this is sorta hidden in
#    #        here... we'll see if i change my mind
#    export CC="${CC} ${BUILD64}"
#    export CXX="${CXX} ${BUILD64}"
#
#    export cross_compile=true
#}
#

#unset_cross_compile()
#{
#    [ "$cross_compile" != "true" ] && return
#    export CC=
#    export CXX=
#    export AR=
#    export AS=
#    export RANLIB=
#    export LD=
#    export STRIP=
#    export cross_compile=false
#}
