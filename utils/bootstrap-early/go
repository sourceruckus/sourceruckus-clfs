#!/bin/bash

# which packages need to be built is determined by configure script

# FIXME: should set toplevel via autoconf? (no, it would end up in config,
#        which we'd need to know toplevel for in order to find...)
toplevel=$PWD/../..

# source our common variables and functions
. $toplevel/utils/bootstrap-early/functions

# make sure we can find libs/includes installed in PREFIX_EARLY
#
# FIXME: configure for xen/tools suggests using {APPEND,PREPEND}_LIB
#        instead of LDFLAGS... do I really care?
if [ -z "$LDFLAGS" ]; then
    export LDFLAGS=-L$PREFIX_EARLY/lib
else
    export LDFLAGS="-L$PREFIX_EARLY/lib $LDFLAGS"
fi
# FIXME: configure for xen/tools suggests using {APPEND,PREPEND}_INCLUDES
#        instead of CPPFLAGS... do I really care?
if [ -z "CPPFLAGS" ]; then
    export CPPFLAGS=-I$PREFIX_EARLY/include
else
    export CPPFLAGS="-I$PREFIX_EARLY/include $CPPFLAGS"
fi


build()
{
    case "$1" in
	rsync)
	    # seems to have a parallel build problem... (still true as of
	    # v3.0.9)
	    JOBCOUNT=1 build_generic $1 --prefix=$PREFIX_EARLY || exit 1
	    ;;
        e2fsprogs)
            # work around e4defrag problem mentioned above
            #
            # FIXME: isn't there a config arg for this?
            #
            # FIXME: autoconf?
            sed -i.bak 's|.*E4DEFRAG_PROG=|#FOO|' \
                $toplevel/src/e2fsprogs/misc/Makefile.in &&
            build_generic $1 --prefix=$PREFIX_EARLY &&
            cp $toplevel/src/e2fsprogs/misc/Makefile.in.bak \
                $toplevel/src/e2fsprogs/misc/Makefile.in || exit 1
            ;;
	ncurses)
	    build_generic $1 --prefix=$PREFIX_EARLY --with-shared || exit 1
	    ;;
	help2man)
	    build_generic $1 --prefix=$PREFIX_EARLY --disable-nls || exit 1
	    ;;
	pkg-config)
            # NOTE: The internal glib snapshot can be used to remove a host
            #       system dependency, but if the host system has glib and a
            #       really old kernel that doesn't define PR_SET_NAME
            #       (<2.6.9?), it'll fail to compile.
            #
	    # NOTE: Some systems need march to be >= i486 to build the
	    #       included glib bits here...
            #
            # NOTE: We detect whether the host system has a usable glib
            #       available and only build the internal glib snapshot (with
            #       fingers crossed) if it's needed.
            if [ "$HOST_HAS_GLIB" = "yes" ]; then
                _FLAGS=
                _OPTS=
            else
                _FLAGS="-march=i486"
                _OPTS="--with-internal-glib"
            fi
	    # NOTE: We also autodetect what the host system's pkg-config had
	    #       compiled in for a search path, and add PREFIX_EARLY to it.
	    PKG_PATH=$(pkg-config --debug 2>&1 | awk -F\' '/^Scanning/ {printf "%s:", $2}')
	    PKG_PATH+="$PREFIX_EARLY/lib/pkgconfig:$PREFIX_EARLY/share/pkgconfig"
            CPPFLAGS=$_FLAGS \
		build_generic $1 --prefix=$PREFIX_EARLY \
		$_OPTS --with-pc-path=$PKG_PATH || exit 1
	    ;;
        bzip2)
            # Doesn't have configure
            build_in_tree=1 setup_generic $1 &&
            pushd $builddir &&
            make -j$JOBCOUNT && make PREFIX=$PREFIX_EARLY install &&
            popd || exit 1
            ;;
	texinfo)
	    # We have a configure.ac patch and need to force an autoreconf
            #
            # FIXME: Woah, we don't ALWAYS want to autoreconf... what about the
            #        2nd time through here when the tree's already been patched
            #        and autoreconfd... we should be able to jump write to
            #        building.  Maybe we should just patch the Makefile.in or
            #        configure script directly...
	    #
	    # We need to set LDFLAGS like this so that texinfo's build can
	    # find our bootstrap-early stuff (ncurses, specifically).
	    autoreconf=yes \
		LDFLAGS=-L$PREFIX_EARLY/lib \
		build_generic $1 --prefix=$PREFIX_EARLY || exit 1
	    ;;
	gperf)
	    # Won't build doc, at least on AVLinux 6, which is the
	    # only system I've run into that doesn't have gperf
	    # installed already...
	    setup_generic $1 &&
	    configure_generic $1 --prefix=$PREFIX_EARLY || exit 1

	    pushd $builddir &&
	    sed -i  '/cd doc;/d' Makefile &&
	    popd || exit 1

	    compile_generic $1 || exit 1
	    ;;
        syslinux)
            # oddball, doesn't have configure, and doesn't like -j
            #
            # NOTE: We do NOT build UEFI support into syslinux for
            #       bootstrapping, just old school BIOS support.
            build_in_tree=1 setup_generic $1 &&
            pushd $builddir &&
            make bios -j$JOBCOUNT clean &&
            make bios installer &&
            make bios install \
                BINDIR=$PREFIX_EARLY/bin SBINDIR=$PREFIX_EARLY/sbin \
                LIBDIR=$PREFIX_EARLY/lib DATADIR=$PREFIX_EARLY/share \
                MANDIR=$PREFIX_EARLY/share/man &&
            popd || exit 1
            ;;
        tar)
            GNULIB_SRCDIR=$toplevel/src/gnulib \
	        build_generic $1 --prefix=$PREFIX_EARLY || exit 1
            ;;
	dev86)
	    # very strange Makefile, no parallel build, no configure, no
	    # out-of-tree building
	    build_in_tree=1 setup_generic $1 || exit 1

	    pushd $builddir &&
	    make PREFIX=$PREFIX_EARLY < /dev/null &&
	    make install &&
	    popd || exit 1
	    ;;
	acpica)
	    # no configure, no out-of-tree building
	    build_in_tree=1 setup_generic $1 || exit 1

	    pushd $builddir &&
	    make -j$JOBCOUNT &&
	    mkdir -p $PREFIX_EARLY/bin &&
	    install -pD generate/unix/bin*/* $PREFIX_EARLY/bin/ &&
	    popd || exit 1
	    ;;
        libaio)
            # no configure, probably can't build out-of-tree
	    build_in_tree=1 setup_generic $1 || exit 1

            pushd $builddir &&
            make -j$JOBCOUNT &&
            make install prefix=$PREFIX_EARLY &&
            popd || exit 1
            ;;
        xen)
            # NOTE: The idea here is to just build enough of xen to be able to
            #       boot our stage2 system as a paravirtual domU.  This means
            #       we need the hypervisor and basic userland tools.
            #
            # NOTE: Xen can't build out-of-tree, because of it's strange
            #       half-breed autotools build system.
            #
            # NOTE: The build system needs the .git dir(s) to get copied as
            #       well.
            #
	    # FIXME: This has a bunch of requirements we're not
	    #        checking for.
	    build_in_tree=1 copy_git=1 setup_generic $1 || exit 1

            # NOTE: It also needs to be explicitly configured (i.e., Makefile
            #       already exists).
            #
            # NOTE: We disable building kernels, docs, and stubdom for
            #       bootstrap-early.  We'll want docs and stubdom in our final
            #       build, but we don't need them here or in stage1.
	    autoreconf=yes \
	        configure_generic $1 --prefix=$PREFIX_EARLY \
		--disable-kernels --disable-docs --disable-stubdom || exit 1

            # NOTE: I'm doing a make dist instead of make world because I
            #       don't feel like doing a clean on a freshly cloned source
            #       tree.  Saves a bunch of time, and shouldn't be needed.
            #
            # NOTE: We've patched Xen so that we can easily set CONFIG_DIR and
            #       VAR_DIR to be rooted inside PREFIX_EARLY.  Upstream
            #       hardcodes these to /etc and /var.
	    #
	    # FIXME: That being said, all we patched was the build
	    #        system... there's still /var and /etc stuff hardcoded all
	    #        over in the tools...
	    #
	    #        /etc: looks like maybe just the hotplug stuff?
	    #        along with all the qemu stuff... and pygrub?
	    #
	    #        /var: blktap, blktap2, console, xl.conf, ... oh
	    #        boy pretty much everything
	    pushd $builddir &&
            CONFIG_DIR=$PREFIX_EARLY/etc VAR_DIR=$PREFIX_EARLY/var \
	        make -j$JOBCOUNT dist &&
            CONFIG_DIR=$PREFIX_EARLY/etc VAR_DIR=$PREFIX_EARLY/var \
                make install &&
	    popd || exit 1
	    ;;
	*)
	    build_generic $1 --prefix=$PREFIX_EARLY || exit 1
	    ;;
    esac
}



# build and install each needed package
for p in $p_early; do
    echo -e "\n+++++ building bootstrap-early package: $p"
    build $p || exit 1
done
