#!/bin/bash

# which packages need to be built should be determined by configure script

# should set toplevel via autoconf?
toplevel=$PWD/../..

# source our common variables and functions
. $toplevel/utils/bootstrap-early/functions


packages=""

# add rsync so we can use it to copy source trees for packages that don't
# support out-of-tree builds
#
# FIXME: looks like rsync has a parallel build problem...
#
# FIXME: wait, it looks like we're using system rsync to rsync the rsync source
#        tree... pretty sure that's stoopid.
packages+=" rsync"

# gzip is needed so we can ensure tar can extract from tar.gz files
packages+=" gzip"

# bzip2 is also needed to make sure we can extract all our source tarballs
packages+=" bzip2"

# xz is needed to build syslinux (and potentially for uncompressing
# source tarballs, patches, etc)
packages+=" xz"

# tar is needed to make sure that we have a new enough version to extract
# tarballs compressed with xz and lzma
packages+=" tar"

# install these to make sure the rest of the build is done using the GNU
# build tools we test against
#
# installed automake-1.12.4 from source.tar.xz in /scrap/staging and edited
# m4/bootstrap to work from within a git submodule.
packages+=" m4" # automake 1.11.1
packages+=" autoconf" # m4 1.4.16
packages+=" automake" # autoconf 2.69
packages+=" gettext" # tarball
packages+=" libtool" # warned about libtool.m4 bootstrap failure
packages+=" pkg-config" # glib bits need libtool, hacked glib/configure.ac
packages+=" make" # automake 1.11.1, gettext 0.18.1, pkg-config

# FIXME: packages+=" gperf"
# FIXME: flex?
# FIXME: graphviz?
# FIXME: valgrind?
packages+=" bison"

# to ensure that we don't inadvertantly use a modified version with
# non-standard extensions to build our filesystems
#
# NOTE: e2fsprogs > v1.41.7 may not compile on systems with really old kernel
#       headers.  This can be worked around by hacking it's misc/Makefile.in to
#       not compile e4defrag.  It can also be worked around by rewinding the
#       e2fsprogs submodule to v1.41.7 prior to building bootstrap-early, then
#       fast forwarding it back to the modern day.  ;-)
#
packages+=" e2fsprogs"

# might also want to make sure that the host system has a usable ncurses
# (and ncurses-devel) library.  otherwise we can't run the 'menuconfig'
# target for kernel and busybox configuration
#
# NOTE: both the kernel and busybox fail to look for ncurses anywhere
#       other than in /usr... so in order to actually make use of
#       this, their source trees will need to be patched to point to
#       our bootstrap-early libraries.
#
packages+=" ncurses"

# help2man is needed to build man pages for texinfo after running autoreconf
packages+=" help2man"



build()
{
    case "$1" in
	rsync)
	    # seems to have a parallel build problem...
	    JOBCOUNT=1 build_generic $1 --prefix=$PREFIX_EARLY || exit 1
	    ;;
        e2fsprogs)
            sed -i.bak 's|.*E4DEFRAG_PROG=|#FOO|' \
                $toplevel/src/e2fsprogs/misc/Makefile.in &&
            build_generic $1 --prefix=$PREFIX_EARLY &&
            cp $toplevel/src/e2fsprogs/misc/Makefile.in.bak \
                $toplevel/src/e2fsprogs/misc/Makefile.in || exit 1
            ;;
	ncurses)
	    build_generic $1 --prefix=$PREFIX_EARLY --with-shared || exit 1
	    ;;
	help2man)
	    build_generic $1 --prefix=$PREFIX_EARLY --disable-nls || exit 1
	    ;;
        # FIXME: why, again, am i forcing autoreconf on these?
	m4|autoconf|automake|libtool|pkg-config)
	    autoreconf=yes build_generic $1 --prefix=$PREFIX_EARLY || exit 1
	    ;;
        make)
            # FIXME: did make REALLY need to be in-tree?
            autoreconf=yes build_in_tree=yes \
                build_generic $1 --prefix=$PREFIX_EARLY || exit 1
            ;;
        bison)
            # this guy needs to do update submodules
            #
            # NOTE: This is kinda involved because I don't want to have to
            #       maintain a fork of bison just to make it find our autoconf
            #       submodule instead of going out to gnu.org...
            #
            #       The sed statement replaces remote git URLs with ../ to use
            #       our other submodules, then we explicitly only update the
            #       autoconf module (i.e., we skip gnulib which is referenced
            #       directly via the GNULIB_SRCDIR variable).
            pushd $toplevel/src/bison && 
            sed -i 's|git://.*/|../|' .gitmodules &&
            git submodule update --init submodules/autoconf &&
            popd &&
	    autoreconf=yes build_generic $1 --prefix=$PREFIX_EARLY || exit 1
            ;;
	*)
	    build_generic $1 --prefix=$PREFIX_EARLY || exit 1
    esac
}

# FIXME: add code here to configure sudo. for now, I've set up my host
#        system to give my user unlimited unpassword root access...


# create a /bootstrap symlink on the host system pointing to $BABY/bootstrap
# so that we don't have to go crazy sorting out chroot vs non-chroot paths
# throughout.  this would probably involve having to sort out 2 sets of
# patches for each affected package, so requiring root priveledges for just
# this one thing seems like an ok compromise.
#
# FIXME: should reevaluate this later.  if sorting out /bootstrap vs
#        $BABY/bootstrap turns out to be easy, we should take this out.
mkdir -p $BABY$PREFIX_FINAL || exit 1
if [ "`readlink $PREFIX_FINAL 2>/dev/null`" != "$BABY$PREFIX_FINAL" ]; then
    echo "need root priveledges to create $PREFIX_FINAL symlink"
    sudo ln -s $BABY$PREFIX_FINAL $PREFIX_FINAL || exit 1
fi
mkdir -p $BABY$PREFIX_CROSS || exit 1
if [ "`readlink $PREFIX_CROSS 2>/dev/null`" != "$BABY$PREFIX_CROSS" ]; then
    echo "need root priveledges to create $PREFIX_CROSS symlink"
    sudo ln -s $BABY$PREFIX_CROSS $PREFIX_CROSS || exit 1
fi

# build and install each package in our /ruckus/staging tree
for p in $packages; do
    echo "building bootstrap-early package: $p"
    build $p || exit 1
done
