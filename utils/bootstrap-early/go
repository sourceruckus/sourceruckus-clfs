#!/bin/bash

# which packages need to be built should be determined by configure script

# should set toplevel via autoconf?
toplevel=$PWD/../..

# source our common variables and functions
. $toplevel/utils/bootstrap-early/functions


pacakges=""

# might need autotools
packages+=" autoconf automake libtool"

# add rsync so we can use it to copy source trees for packages that don't
# support out-of-tree builds
#packages+=" rsync"

# don't remember why
packages+=" bison"

# to ensure that we don't inadvertantly use a modified version with
# non-standard extensions to build our filesystems
packages+=" e2fsprogs"

# a lot of the build tools are written in python
packages+=" python"

# the Source Ruckus Packager
packages+=" srp"

# might want to make sure we have the worlds greatest scm tool
packages+=" git"

# might also want to make sure that the host system has a usable ncurses
# (and ncurses-devel) library.  otherwise we can't run the 'menuconfig'
# target for kernel and busybox configuration
packages+=" ncurses"

# help2man is needed to build man pages for texinfo after running autoreconf
packages+=" help2man"

# might need to add perl and texinfo, too
#packages+=" perl"
#packages+=" texinfo"

# FIXME: actually, I think python and srp need to be in /bootstrap... and
#        git doesn't really seem all that necesary either.

build_srp()
{
    builddir=$PWD/.build/srp
    rsync -a --exclude .git $packagedir/srp/ $builddir || exit 1
    pushd $builddir
    make PREFIX=$PREFIX_EARLY install || exit 1
    popd
}


build_git()
{
    builddir=$PWD/.build/git
    rsync -a --exclude .git $packagedir/git/ $builddir || exit 1
    pushd $builddir
    autoreconf &&
    ./configure --prefix=$PREFIX_EARLY &&
    make -j$JOBCOUNT install || exit 1
    popd
}


build()
{
    case "$1" in
	srp)
	    build_srp
	    ;;
	git)
	    build_git
	    ;;
	ncurses)
	    build_generic $1 --prefix=$PREFIX_EARLY --with-shared
	    ;;
	help2man)
	    build_generic $1 --prefix=$PREFIX_EARLY --disable-nls
	    ;;
	*)
	    build_generic $1 --prefix=$PREFIX_EARLY
    esac
}



# create a /bootstrap symlink on the host system pointing to $BABY/bootstrap
# so that we don't have to go crazy sorting out chroot vs non-chroot paths
# throughout.  this would probably involve having to sort out 2 sets of
# patches for each affected package, so requiring root priveledges for just
# this one thing seems like an ok compromise.
#
# FIXME: should reevaluate this later.  if sorting out /bootstrap vs
#        $BABY/bootstrap turns out to be easy, we should take this out.
mkdir -p $BABY$PREFIX_FINAL || exit 1
if [ "`readlink $PREFIX_FINAL 2>/dev/null`" != "$BABY$PREFIX_FINAL" ]; then
    echo "need root priveledges to create $PREFIX_FINAL symlink"
    su -c "ln -s $BABY$PREFIX_FINAL $PREFIX_FINAL" || exit 1
fi
mkdir -p $BABY$PREFIX_CROSS || exit 1
if [ "`readlink $PREFIX_CROSS 2>/dev/null`" != "$BABY$PREFIX_CROSS" ]; then
    echo "need root priveledges to create $PREFIX_CROSS symlink"
    su -c "ln -s $BABY$PREFIX_CROSS $PREFIX_CROSS" || exit 1
fi

# build and install each package in our /ruckus/staging tree
for p in $packages; do
    echo "building package: $p"
    build $p || exit 1
done
