#!/bin/bash

# which packages need to be built should be determined by configure script

# should set toplevel via autoconf?
toplevel=$PWD/../..

# source our common variables and functions
. $toplevel/utils/bootstrap-early/functions



build()
{
    case "$1" in
	rsync)
	    # seems to have a parallel build problem... (still true as of
	    # v3.0.9)
	    JOBCOUNT=1 build_generic $1 --prefix=$PREFIX_EARLY || exit 1
	    ;;
        e2fsprogs)
            # work around e4defrag problem mentioned above
            sed -i.bak 's|.*E4DEFRAG_PROG=|#FOO|' \
                $toplevel/src/e2fsprogs/misc/Makefile.in &&
            build_generic $1 --prefix=$PREFIX_EARLY &&
            cp $toplevel/src/e2fsprogs/misc/Makefile.in.bak \
                $toplevel/src/e2fsprogs/misc/Makefile.in || exit 1
            ;;
	ncurses)
	    build_generic $1 --prefix=$PREFIX_EARLY --with-shared || exit 1
	    ;;
	help2man)
	    build_generic $1 --prefix=$PREFIX_EARLY --disable-nls || exit 1
	    ;;
	pkg-config)
	    # NOTE: Some systems need march to be >= i486 to build the
	    #       included glib bits here...
            #
            # NOTE: The internal glib snapshot can be used to remove a host
            #       system dependency, but if the host system has glib and a
            #       really old kernel that doesn't define PR_SET_NAME
            #       (<2.6.9?), it'll fail to compile.
            #
            # FIXME: autoconf for this?
	    CPPFLAGS=-march=i486 \
		build_generic $1 --prefix=$PREFIX_EARLY \
		--with-internal-glib || exit 1
	    ;;
        bzip2)
            # Doesn't have configure
            build_in_tree=1 setup_generic $1 &&
            pushd $builddir &&
            make -j$JOBCOUNT && make PREFIX=$PREFIX_EARLY install &&
            popd || exit 1
            ;;
	texinfo)
	    # We have a configure.ac patch and need to force an autoreconf
	    #
	    # We need to set LDFLAGS like this so that texinfo's build can
	    # find our bootstrap-early stuff (ncurses, specifically).
	    autoreconf=yes \
		LDFLAGS=-L$PREFIX_EARLY/lib \
		build_generic $1 --prefix=$PREFIX_EARLY || exit 1
	    ;;
	gperf)
	    # Won't build doc, at least on AVLinux 6, which is the
	    # only system I've run into that doesn't have gperf
	    # installed already...
	    setup_generic $1 &&
	    configure_generic $1 --prefix=$PREFIX_EARLY || exit 1

	    pushd $builddir &&
	    sed -i  '/cd doc;/d' Makefile &&
	    popd || exit 1

	    compile_generic $1 || exit 1
	    ;;
	*)
	    build_generic $1 --prefix=$PREFIX_EARLY || exit 1
	    ;;
    esac
}


# FIXME: add code here to configure sudo. for now, I've set up my host
#        system to give my user unlimited unpassword root access...


# create a /tools symlink on the host system pointing to $CLFS/tools
# so that we don't have to go crazy sorting out chroot vs non-chroot paths
# throughout.  this would probably involve having to sort out 2 sets of
# patches for each affected package, so requiring root priveledges for just
# this one thing seems like an ok compromise.



mkdir -p $CLFS$PREFIX_FINAL || exit 1
if [ "`readlink $PREFIX_FINAL 2>/dev/null`" != "$CLFS$PREFIX_FINAL" ]; then
    echo "need root priveledges to create $PREFIX_FINAL symlink"
    sudo ln -s $CLFS$PREFIX_FINAL $PREFIX_FINAL || exit 1
fi
mkdir -p $CLFS$PREFIX_CROSS || exit 1
if [ "`readlink $PREFIX_CROSS 2>/dev/null`" != "$CLFS$PREFIX_CROSS" ]; then
    echo "need root priveledges to create $PREFIX_CROSS symlink"
    sudo ln -s $CLFS$PREFIX_CROSS $PREFIX_CROSS || exit 1
fi

# build and install each needed package
for p in $p_early; do
    echo "building bootstrap-early package: $p"
    build $p || exit 1
done
