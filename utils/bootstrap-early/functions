# -*- mode: sh -*-

packagedir=$toplevel/packages
sourcedir=$toplevel/src

INSTALLROOT=$HOME/RUCKUS
PREFIX_EARLY=$INSTALLROOT/bootstrap-early
PREFIX_CROSS=/bootstrap-cross

# this is where our baby filesystem will eventually be mounted
BABY=$INSTALLROOT/baby

# FIXME: should think about defining a variable for $BABY/bootstrap.  the
#        /bootstrap moniker is hardcoded into a bunch of source files (into
#        patches actually), so this might be non-trivial
PREFIX_FINAL=/bootstrap

# this variable tells bootstrap scripts where to find gnulib, to avoid them
# all trying to create their own local clone
export GNULIB_SRCDIR=$toplevel/src/gnulib

# this variable tells bootstrap scripts to not download new po files via
# rsync
export SKIP_PO=t

# setup environment to use our bootstrap-early stuff
export PATH=$PREFIX_EARLY/bin:$PREFIX_EARLY/sbin:$PATH
export MANPATH=$PREFIX_EARLY/man:$PREFIX_EARLY/share/man:$MANPATH
export PKG_CONFIG_PATH=$PREFIX_EARLY/lib/pkg-config:$PKG_CONFIG_PATH
if [ -z "$LD_LIBRARY_PATH" ]; then
    export LD_LIBRARY_PATH=$PREFIX_EARLY/lib
else
    export LD_LIBRARY_PATH=$PREFIX_EARLY/lib:$LD_LIBRARY_PATH
fi

# and now add in the bootstrap-cross tools
export PATH=$PREFIX_CROSS/bin:$PREFIX_CROSS/sbin:$PATH
export MANPATH=$PREFIX_CROSS/man:$PREFIX_CROSS/share/man:$MANPATH
export PKG_CONFIG_PATH=$PREFIX_CROSS/lib/pkg-config:$PKG_CONFIG_PATH
if [ -z "$LD_LIBRARY_PATH" ]; then
    export LD_LIBRARY_PATH=$PREFIX_CROSS/lib
else
    export LD_LIBRARY_PATH=$PREFIX_CROSS/lib:$LD_LIBRARY_PATH
fi


# set host and target variables.  this should eventually be done via autoconf

# NOTE: MACHTYPE on a fedora 32bit box is 'i386-redhat-linux-gnu', but on a SUSE box it's just 'i686'
#export CLFS_HOST="$(echo ${MACHTYPE} | \
#    sed "s/$(echo ${MACHTYPE} | cut -d- -f2)/cross/")"

export MACHTYPE_HOST="i686-cross-linux-gnu"

export MACHTYPE_TARGET="x86_64-ruckus-linux-gnu"

export MACHTYPE_TARGET32="i686-pc-linux-gnu"

# these should also get determined by autoconf
export ARCH_TARGET=x86_64

# these variables seem like overkill, but might make things easier later on.
# they should probably also be set vi autoconf
export BUILD32="-m32"
export BUILD64="-m64"

# this variable will be used by default to determine the number of jobs to
# pass into make.
#
# FIXME: this should be configurable via autoconf?
export CPUCOUNT=$(grep "^processor" /proc/cpuinfo | wc -l)
export JOBCOUNT=$((CPUCOUNT+1))
export JOBCOUNT_KBUILD=$((CPUCOUNT*4))

# make sure nullglob is turned on.  this makes a glob that doesn't match any
# files expand to '' rather than the glob pattern itself.
#
# FIXME: I think this command is bash specific... zsh does this by default
shopt -s nullglob


# define generic builder method.  this does some magic to set up a build
# tree based on what's stored in sourcedir (ie, a source tree or a source
# tarball).  first arg is package name, the rest are passed on to configure.
build_generic()
{
    setup_generic $*
    configure_generic $*
    compile_generic $*
}


setup_generic()
{
    p=$1
    shift
    builddir=$PWD/.build/$p
    source=$sourcedir/$p
    configure=$source/configure
    #autoreconf="no"
    mkdir -p $builddir

    # figure out if we're using a source tarball or an already unpacked
    # source tree.  we do this by looking for Makefile, configure,
    # configure.ac, or configure.in in the sourcedir
    if [ ! -f $source/Makefile ] && [ ! -x $configure ] && [ ! -f $configure.ac ] && [ ! -f $configure.in ]; then
	echo "using source tarball"
	# using tarball.  need to modify some variables and extract the
	# source tree
	#autoreconf="no"
	mkdir -p $builddir/source || exit 1
	pushd $builddir/source
	echo "checking for previously extracted source tree..."
	if [ "." == "`ls -d ./*`" ]; then
	    echo "extracting..."
	    tar jxf $source/*.tar.bz2 || exit 1
	fi
	pushd ./* &&
	source=$PWD &&
	configure=$source/configure &&
	popd &&
	builddir=$builddir/build &&
	mkdir -p $builddir || exit 1
	popd
	# also apply any patches in the sourcedir
	pushd $source
	# only do this if we haven't previously configured
	if [ ! -f $builddir/Makefile ]; then
	    for p in $sourcedir/$p/*.patch; do
		#autoreconf="yes"
		echo "applying patch: $p"
		patch -Np1 < $p || exit 1
	    done
	fi
	popd
    fi
    echo source: $source
    echo builddir:  $builddir
    echo configure: $configure
}


configure_generic()
{
    p=$1
    shift
    #builddir=.build/$p
    #configure=$sourcedir/$p/configure
    #mkdir -p $builddir
    echo autoreconf: $autoreconf

    # go guild it!
    pushd $builddir || exit 1
    # only explicitly run configure the first time
    if [ ! -f Makefile ]; then
	if [ ! -x $configure ] || [ -n "$autoreconf" ]; then
	    pushd $(dirname $configure)
	    if [ -x ./bootstrap ]; then
		echo "./bootstrap..."
		./bootstrap || exit 1
	    elif [ -x ./autogen.sh ]; then
		echo "./autogen.sh..."
		./autogen.sh || exit 1
	    else
		echo "autoreconf..."
		autoreconf --install || exit 1
	    fi
	    if [ -f Makefile ]; then
		make distclean
	    fi
	    popd
	fi
	$configure $* || exit 1
    fi
    popd
}


compile_generic()
{
    p=$1
    shift
    #builddir=.build/$p
    #configure=$sourcedir/$p/configure
    #mkdir -p $builddir

    pushd $builddir &&
    make -j$JOBCOUNT && make install &&
    popd || exit 1
}
