# -*- mode: sh -*-

packagedir=$toplevel/packages
sourcedir=$toplevel/src

INSTALLROOT=$toplevel/..
BUILDROOT=$toplevel/.build
PREFIX_EARLY=$BUILDROOT/bootstrap-early
PREFIX_CROSS=/bootstrap-cross

# FIXME: PREFIX_CROSS should be $INSTALLROOT/.build/bootstrap-cross and we
#        probably don't need the /bootstrap-cross symlink.  Once everything
#        works, fix this and see what breaks.
#
# FIXME: Actually, stuff did break... but I don't remember what exactly.  it
#        was enough to be not worth fixing, though...

# this is where our baby filesystem lives while we're building it.  at the
# end of the bootstrap-stage1 stage, we'll move this to $INSTALLROOT.
# keeping it inside a different directory until then make maintainence
# easier (e.g., chown -R root:root $BABY won't mess with our source tree)
BABY=$BUILDROOT/baby

# FIXME: should think about defining a variable for $BABY/bootstrap.  the
#        /bootstrap moniker is hardcoded into a bunch of source files (into
#        patches actually), so this might be non-trivial
PREFIX_FINAL=/bootstrap

# this variable tells bootstrap scripts where to find gnulib, to avoid them
# all trying to create their own local clone
export GNULIB_SRCDIR=$toplevel/src/gnulib

# this variable tells bootstrap scripts to not download new po files via
# rsync
export SKIP_PO=t

# setup environment to use our bootstrap-early stuff
export PATH=$PREFIX_EARLY/bin:$PREFIX_EARLY/sbin:$PATH
export MANPATH=$PREFIX_EARLY/man:$PREFIX_EARLY/share/man:$MANPATH
export PKG_CONFIG_PATH=$PREFIX_EARLY/lib/pkg-config:$PKG_CONFIG_PATH
if [ -z "$LD_LIBRARY_PATH" ]; then
    export LD_LIBRARY_PATH=$PREFIX_EARLY/lib
else
    export LD_LIBRARY_PATH=$PREFIX_EARLY/lib:$LD_LIBRARY_PATH
fi

# and now add in the bootstrap-cross tools
export PATH=$PREFIX_CROSS/bin:$PREFIX_CROSS/sbin:$PATH
export MANPATH=$PREFIX_CROSS/man:$PREFIX_CROSS/share/man:$MANPATH
export PKG_CONFIG_PATH=$PREFIX_CROSS/lib/pkg-config:$PKG_CONFIG_PATH
if [ -z "$LD_LIBRARY_PATH" ]; then
    export LD_LIBRARY_PATH=$PREFIX_CROSS/lib
else
    export LD_LIBRARY_PATH=$PREFIX_CROSS/lib:$LD_LIBRARY_PATH
fi


# set host and target variables.  this should eventually be done via autoconf

# NOTE: MACHTYPE on a fedora 32bit box is 'i386-redhat-linux-gnu', but on a SUSE box it's just 'i686'
#export CLFS_HOST="$(echo ${MACHTYPE} | \
#    sed "s/$(echo ${MACHTYPE} | cut -d- -f2)/cross/")"

export MACHTYPE_HOST="i686-cross-linux-gnu"

export MACHTYPE_TARGET="x86_64-ruckus-linux-gnu"

export MACHTYPE_TARGET32="i686-pc-linux-gnu"

# these should also get determined by autoconf
export ARCH_TARGET=x86_64

# these variables seem like overkill, but might make things easier later on.
# they should probably also be set vi autoconf
export BUILD32="-m32"
export BUILD64="-m64"

# this variable will be used by default to determine the number of jobs to
# pass into make.
#
# FIXME: this should be configurable via autoconf?
export CPUCOUNT=$(grep "^processor" /proc/cpuinfo | wc -l)
export JOBCOUNT=$((CPUCOUNT+1))
export JOBCOUNT_KBUILD=$((CPUCOUNT*4))

# make sure nullglob is turned on.  this makes a glob that doesn't match any
# files expand to '' rather than the glob pattern itself.
#
# FIXME: I think this command is bash specific... zsh does this by default
#
# FIXME: ash (busybox's shell used in stage2) doesn't like the shopt command
#        but I don't remember exactly what type of glob I was refering to
#        above... fingers crossed...
shopt -s nullglob >/dev/null 2>&1

# NOTE: make sure we have pushd/popd, since we use it all over the place
#
# FIXME: these two aliases should probably only be done if needed... but I'm
#        not sure how to detect that.  In the stage2 ash shell, which popd
#        returns 1.  Should compare that to what happens in bash.
alias pushd='wd="$(pwd) ${wd}"; cd'
alias popd='cd ${wd%% *}; wd=${wd#* }'

# NOTE: and this is so we can have the illusion of sudo in stage2, via
#       busybox's su.  note that this only works because root doesn't have a
#       password in the bootstrap system.  the only real benefit of this
#       really is that we can maintain consistency with the rest of the
#       scripts, and we don't have to wory about quoting the argument to su.
#
#alias sudo='su -c'
sudo()
{
    su - -c "$*"
}


# define generic builder method.  this does some magic to set up a build
# tree based on what's stored in sourcedir (ie, a source tree or a source
# tarball).  first arg is package name, the rest are passed on to configure.
build_generic()
{
    setup_generic $* &&
    configure_generic $* &&
    compile_generic $* || exit 1
}


setup_generic()
{
    p=$1
    shift
    builddir=$PWD/.build/$p
    source=$sourcedir/$p
    configure=$source/configure
    #autoreconf="no"
    mkdir -p $builddir

    # figure out if we're using a source tarball or an already unpacked
    # source tree.  we do this by looking for Makefile, configure,
    # configure.ac, or configure.in in the sourcedir
    if [ ! -f $source/Makefile ] && [ ! -x $configure ] && [ ! -f $configure.ac ] && [ ! -f $configure.in ]; then
	echo "using source tarball"
	# using tarball.  need to modify some variables and extract the
	# source tree
	#autoreconf="no"
	mkdir -p $builddir/source || exit 1
	pushd $builddir/source
	echo "checking for previously extracted source tree..."
	if [ "." == "`ls -d ./*`" ]; then
	    echo "extracting..."
	    tar jxf $source/*.tar.bz2 || exit 1
	fi
	pushd ./* &&
	source=$PWD &&
	configure=$source/configure &&
	popd &&
	builddir=$builddir/build &&
	mkdir -p $builddir || exit 1
	popd
	# also apply any patches in the sourcedir
	pushd $source
	# only do this if we haven't previously configured
	if [ ! -f $builddir/Makefile ]; then
	    for p in $sourcedir/$p/*.patch; do
		#autoreconf="yes"
		echo "applying patch: $p"
		patch -Np1 < $p || exit 1
	    done
	fi
	popd

    elif [ -n "$build_in_tree" ]; then
	# this is a special case for source trees we have that can't handle
	# out-of-tree builds for one reason or another.  instead of setting
	# up for out-of-tree, it simply rsync's the source into where it
	# would be if we were using a tarball
	echo "copying source tree from $source to $builddir/source..."
	rsync -a --delete $source/ $builddir/source || exit 1
	source=$builddir/source
	builddir=$builddir/build
	mkdir -p $builddir || exit 1
    fi

    if [ -n "$build_in_tree" ]; then
	# some packages can't build out-of-tree.  we'll replace $builddir
	# with a symlink to our local source tree
	rmdir $builddir && ln -s $source $builddir || exit 1
	configure=./configure
    fi

    # apply additional patches, if specified
    if [ -n "$patches" ] && [ ! -f $builddir/Makefile ]; then
	pushd $source || exit 1
	for p in $patches; do
	    echo "applying additional patch: $p"
	    patch -Np1 < $p || exit 1
	done
	popd
    fi

    # We need to make sure the sourcetree has already been bootstrapped.
    if [ ! -x $configure ]; then
	autoreconf_generic || exit 1
    fi

    echo source: $source
    echo builddir:  $builddir
    echo configure: $configure
}


configure_generic()
{
    p=$1
    shift
    #builddir=.build/$p
    #configure=$sourcedir/$p/configure
    #mkdir -p $builddir
    echo autoreconf: $autoreconf

    # go guild it!
    pushd $builddir || exit 1
    # only explicitly run configure the first time
    if [ ! -f Makefile ] || [ -n "$autoreconf" ]; then
	if [ ! -x $configure ] || [ -n "$autoreconf" ]; then
	    autoreconf_generic || exit 1
	fi
	$configure $* || exit 1
    fi
    popd
}


autoreconf_generic()
{
    pushd $source || exit 1

    # make sure we're not using the cross-compiler, but keep track if we
    # were so we can turn it back on before returning
    should_cross_compile=$cross_compile
    unset_cross_compile

    # choose a bootstrap method
    if [ -x ./bootstrap ]; then
	echo "./bootstrap..."
	./bootstrap || exit 1
    elif [ -x ./autogen.sh ]; then
	echo "./autogen.sh..."
	./autogen.sh || exit 1
    elif [ -f ./configure.in ] || [ -f ./configure.ac ]; then
	echo "autoreconf..."
	autoreconf --force --install || exit 1
    else
	nothing_to_do=true
	echo "autoreconf_generic: doing nothing..."
    fi

    # make sure we're unconfigured.  some bootstrap and autogen.sh scripts
    # run configure at the end, but not all.  we have to be able to assume
    # consistent behavior here, so do a make distclean if Makefile exists
    # already.
    if [ -z "$nothing_to_do" ] && [ -f Makefile ]; then
	make distclean || exit 1
    fi

    # if we were previously set up to use our cross-compiler.  set it back
    # up now
    if [ -n "$should_cross_compile" ]; then
	set_cross_compile
    fi

    popd
}


compile_generic()
{
    p=$1
    shift
    #builddir=.build/$p
    #configure=$sourcedir/$p/configure
    #mkdir -p $builddir

    pushd $builddir &&
    make -j$JOBCOUNT && make install &&
    popd || exit 1
}


set_cross_compile()
{
    export CC="${MACHTYPE_TARGET}-gcc"
    export CXX="${MACHTYPE_TARGET}-g++"
    export AR="${MACHTYPE_TARGET}-ar"
    export AS="${MACHTYPE_TARGET}-as"
    export RANLIB="${MACHTYPE_TARGET}-ranlib"
    export LD="${MACHTYPE_TARGET}-ld"
    export STRIP="${MACHTYPE_TARGET}-strip"

    export CC="${CC} ${BUILD64}"
    export CXX="${CXX} ${BUILD64}"

    export cross_compile=true
}


unset_cross_compile()
{
    export CC=
    export CXX=
    export AR=
    export AS=
    export RANLIB=
    export LD=
    export STRIP=
    export cross_compile=
}
