# -*- mode: sh -*-

# !!!!!!!!!!!!!!! super important compatability warning of doom !!!!!!!!!!!!!!!
#
# The bootstrap-stage2 scripts run using busybox's ash shell (at least until
# bash is installed).  That means there are a few bash-isms that we MUST avoid
# using.  It also runs using the busybox versions of the GNU userspace (e.g.,
# sed, awk, grep), which may not have identical usage.
#
# Things to avoid:
#
# - No += support, so OPTS+=' --foo' has to be OPTS="$OPTS --foo".
#
# - Don't use shopt for special options (e.g., nullglob, dotglob), unless it's
#   to DISABLE a default bash-ism (e.g., command hashing), in which case you
#   must check the $BASH variable.
#
# - cp, mv, rm, etc don't support -v for verbose output.
#
# - Can't use {} globbing (e.g., cp foo{,orig})
#
# Things that are still OK:
#
# - $() subshell expansion
# - wc -l usage
# - sed -i usage
# - pushd/popd are made available here
# - sudo is made available (sort-of) here


# paths to the package scripts and source directories for each package
#
# NOTE: These MUST be absolute paths, because we change directory all over the
#       place and expect them to still be valid paths.
packagedir=$ruckus_srcdir/packages
sourcedir=$ruckus_srcdir/src

# written out by configure
#
# NOTE: This means that the ruckus-builder domu will need access to our
#       original build-dir...
. $ruckus_builddir/utils/bootstrap-early/config


# this variable tells bootstrap scripts (probably just cpio and tar) to use
# our paxutils submodule instead of cloning their own.
#
# NOTE: If tar used .gitmodules for paxutils, this wouldn't be needed.
#       However, the tar boostrap script just does a git clone instead of
#       using submodules.  At least, for now...
export PAXUTILS_SRCDIR=$ruckus_srcdir/src/paxutils

# this variable tells bootstrap scripts to not download new po files via
# rsync
export SKIP_PO=t

# the presence of this file will indicate that we're running in the stage2
# bootstrap environment (i.e., booted up into baby system building the rest
# of the bootstrap utilities)
RUCKUS_BOOTSTRAP_STAGE2_FILE=/.ruckus_bootstrap_stage2

# only add BOOTSTRAP_EARLY and BOOTSTRAP_CROSS to PATH if we haven't booted
# into the stage2 bootstrap system yet.
#
# FIXME: we need to be more careful here...
#
#        1. We may not want EARLY in our path anymore once we get into stage1
#           (i.e., we don't want to link against host system things while
#           cross-compiling stage1).  I ran into this on my avlinux box w/ make
#           accidentally detecing host system's guile, then trying to link
#           against it (this was actually because our pkg-config compiles in
#           the host system's pkg-config search path too, but illustrates the
#           point).
#
if [ -z "$RUCKUS_BOOTSTRAP_STAGE2" ]; then
    # setup environment to use our bootstrap-early stuff
    export PATH=$PREFIX_HOSTPREP/bin:$PREFIX_HOSTPREP/sbin:$PATH
    export MANPATH=$PREFIX_HOSTPREP/man:$PREFIX_HOSTPREP/share/man:$MANPATH
    export PKG_CONFIG_PATH=$PREFIX_HOSTPREP/lib/pkg-config:$PKG_CONFIG_PATH
    if [ -z "$LD_LIBRARY_PATH" ]; then
	export LD_LIBRARY_PATH=$PREFIX_HOSTPREP/lib
    else
	export LD_LIBRARY_PATH=$PREFIX_HOSTPREP/lib:$LD_LIBRARY_PATH
    fi

    # and now add in the bootstrap-cross tools
    export PATH=$PREFIX_CROSS/bin:$PREFIX_CROSS/sbin:$PATH
    export MANPATH=$PREFIX_CROSS/man:$PREFIX_CROSS/share/man:$MANPATH
    export PKG_CONFIG_PATH=$PREFIX_CROSS/lib/pkg-config:$PKG_CONFIG_PATH
    if [ -z "$LD_LIBRARY_PATH" ]; then
	export LD_LIBRARY_PATH=$PREFIX_CROSS/lib
    else
	export LD_LIBRARY_PATH=$PREFIX_CROSS/lib:$LD_LIBRARY_PATH
    fi
fi

# this variable will be used by default to determine the number of jobs to
# pass into make.
#
# FIXME: should this be configurable via autoconf?  --enable-parallelism=N
#        where N gets used instead of CPUCOUNT to calc JOBCOUNT and
#        JOBCOUNT_KBUILD?
#
# FIXME: not really sure why you'd want to override this via configure
#        script... maybe just to disable parallel building entirely?
export CPUCOUNT=$(grep "^processor" /proc/cpuinfo | wc -l)
export JOBCOUNT=$((CPUCOUNT+1))
export JOBCOUNT_KBUILD=$((CPUCOUNT*4))

# turn off bash's hash function.  we don't want bash caching PATH lookups
# while we're installing things all over the place...
#
# NOTE: This is a bash-only issue documented in the CLFS books.  The stage2
#       builder at least starts out using ash, which doesn't support hashing at
#       all (from what I can tell).  Later during the build, bash may start
#       getting used (after it gets installed), so we still need this
#       conditionally set.
#
if [ -n "$BASH" ]; then
    set +h
fi

# make sure we have a sane umask
umask 022

# make sure we don't run into localization issues on old host systems
export LC_ALL=POSIX

# make sure we have pushd/popd, since we use it all over the place
#
# NOTE: these two aliases are only set if a check for pushd fails.
need_pushd=0
pushd / >/dev/null 2>&1 && popd >/dev/null || need_pushd=1
if [ $need_pushd -eq 1 ]; then
    alias pushd='wd="$(pwd) ${wd}" && cd'
    alias popd='cd ${wd%% *} && wd=${wd#* }'
else
    # make bash's pushd/popd be quiet
    alias pushd='pushd >/dev/null'
    alias popd='popd >/dev/null'
fi

# provide sudo for stage2
#
# NOTE: This is so we can have the illusion of sudo in stage2, via busybox's
#       su.  Note that this only works because root doesn't have a password in
#       the bootstrap system.  The only real benefit of this really is that we
#       can maintain consistency with the rest of the scripts, and we don't
#       have to wory about quoting the argument to su.
#
need_sudo=0
which sudo >/dev/null || need_sudo=1
if [ $need_sudo -eq 1 ]; then
    sudo()
    {
	su -c "cd $PWD; $*"
    }
fi


# define generic builder method.  this does some magic to set up a build
# tree based on what's stored in sourcedir (ie, a source tree or a source
# tarball).  first arg is package name, the rest are passed on to configure.
build_generic()
{
    setup_generic $* &&
    configure_generic $* &&
    compile_generic $* || exit 1
}


setup_generic()
{
    p=$1
    shift
    builddir=$PWD/.build/$p
    source=$sourcedir/$p
    # allow user to override the name of the configure script
    #
    # NOTE: Added this specifically for perl, which uses configure.gnu
    [ -n "$use_configure" ] || use_configure="configure"
    configure="$source/$use_configure"
    mkdir -p $builddir

    # figure out if we're using a source tarball or an already unpacked
    # source tree.  we do this by looking for Makefile, configure,
    # configure.ac, or configure.in in the sourcedir
    if [ ! -f $source/Makefile ] && [ ! -x $configure ] && [ ! -f $configure.ac ] && [ ! -f $configure.in ]; then
	echo "using source tarball"
	# using tarball.  need to modify some variables and extract the
	# source tree
	mkdir -p $builddir/source || exit 1
	pushd $builddir/source
	echo "checking for previously extracted source tree..."
        if [ `find . -maxdepth 1 | wc -l` -eq 1 ]; then
	    echo "extracting..."
	    tar xf $source/*.tar.* || exit 1
	fi
	pushd ./* &&
	source=$PWD &&
	configure=$source/$use_configure &&
	popd &&
	builddir=$builddir/build &&
	mkdir -p $builddir || exit 1
	popd
	# also apply any patches in the sourcedir
	pushd $source
	# only do this if we haven't previously configured
	if [ ! -f $builddir/Makefile ]; then
            for p in `find $sourcedir/$p -maxdepth 1 -name \*.patch`; do
		echo "applying patch: $p"
		patch -Np1 < $p || exit 1
	    done
	fi
	popd

    elif [ -n "$build_in_tree" ]; then
	# this is a special case for source trees we have that can't handle
	# out-of-tree builds for one reason or another.  instead of setting
	# up for out-of-tree, it simply rsync's the source into where it
	# would be if we were using a tarball
        #
        # NOTE: I was sticking --exclude .git in this rsync command to save
        #       time copying stuff around... but some packages need the .git
        #       history to bootstrap propperly.  For example, xen tries to use
        #       some submodule commands during its build.
        #
        # FIXME: Conditionally excluding .git might be kinda silly... new
        #        versions of git don't actually keep the .git files in
        #        submodules, the .git file is just a reference to the
        #        toplevel/.git/modules/...
        #
        # NOTE: I was originally sticking --delete in the opts, but that forces
        #       us to completely rebuild every time through.  I'd rather we
        #       only rebuilt if needed.
        opts="-a"
        if [ -z "$copy_git" ]; then
            opts="$opts --exclude .git"
        fi
	echo "copying source tree from $source to $builddir/source..."
	rsync $opts $source/ $builddir/source || exit 1
	source=$builddir/source
	builddir=$builddir/build
	mkdir -p $builddir || exit 1

        # fix relative paths in copied .git file(s)
        find $source -name .git -exec \
            sed -i "s|^gitdir: [./]*|gitdir: $ruckus_srcdir/.|" {} \;
    fi

    if [ -n "$build_in_tree" ]; then
	# some packages can't build out-of-tree.  we'll replace $builddir
	# with a symlink to our local source tree
        #
        # NOTE: We need to check for the case where builddir is a symlink
        #       pointing to sourcedir (i.e., building in-tree).  You can't
        #       rmmdir a symlink... ;-)
        if [ -h $builddir ]; then
	    rm $builddir || exit 1
	else
	    rmdir $builddir || exit 1
	fi
        ln -fs $source $builddir || exit 1
	configure=$builddir/$use_configure
    fi

    # apply additional patches, if specified
    if [ -n "$patches" ] && [ ! -f $builddir/Makefile ]; then
	pushd $source || exit 1
	for p in $patches; do
	    echo "applying additional patch: $p"
	    patch -Np1 < $p || exit 1
	done
	popd
    fi

    # We need to make sure the sourcetree has already been bootstrapped.
    if [ ! -x $configure ]; then
	autoreconf_generic || exit 1
    fi

    echo source: $source
    echo builddir:  $builddir
    echo configure: $configure
}


configure_generic()
{
    p=$1
    shift
    echo autoreconf: $autoreconf

    # go guild it!
    pushd $builddir || exit 1
    # only explicitly run configure the first time
    if [ ! -f Makefile ] || [ -n "$autoreconf" ]; then
	if [ ! -x $configure ] || [ -n "$autoreconf" ]; then
	    autoreconf_generic || exit 1
	fi
	$configure $* || exit 1
    fi
    popd
}


autoreconf_generic()
{
    pushd $source || exit 1

    # make sure we're not using the cross-compiler, but keep track if we
    # were so we can turn it back on before returning
    should_cross_compile=$cross_compile
    unset_cross_compile

    # choose a bootstrap method
    nothing_to_do=
    # some scripts will automatically run ./configure unless NOCONFIGURE is
    # set, so lets set it.
    export NOCONFIGURE=1
    if [ -x ./bootstrap.sh ]; then
	echo "./bootstrap.sh..."
	./bootstrap.sh || exit 1
    elif [ -x ./bootstrap ]; then
	echo "./bootstrap..."
	./bootstrap || exit 1
    elif [ -x ./autogen.sh ]; then
	echo "./autogen.sh..."
	./autogen.sh || exit 1
    elif [ -f ./configure.in ] || [ -f ./configure.ac ]; then
	echo "autoreconf..."
	autoreconf --force --install || exit 1
    else
	nothing_to_do=true
	echo "autoreconf_generic: doing nothing..."
    fi
    unset NOCONFIGURE

    # if we were previously set up to use our cross-compiler.  set it back
    # up now
    if [ "$should_cross_compile" = "true" ]; then
	set_cross_compile
    fi

    popd
}


compile_generic()
{
    p=$1
    shift

    # if we're in the stage2 bootstrap, we need to install as root user.
    if [ -n "$RUCKUS_BOOTSTRAP_STAGE2" ]; then
	SUDO=sudo
    else
	SUDO=
    fi

    pushd $builddir &&
    make -j$JOBCOUNT && $SUDO make install &&
    popd || exit 1
}


set_cross_compile()
{
    export CC="${CLFS_TARGET}-gcc"
    export CXX="${CLFS_TARGET}-g++"
    export AR="${CLFS_TARGET}-ar"
    export AS="${CLFS_TARGET}-as"
    export RANLIB="${CLFS_TARGET}-ranlib"
    export LD="${CLFS_TARGET}-ld"
    export STRIP="${CLFS_TARGET}-strip"

    # NOTE: We append BUILD64 to CC and CXX here unconditionally.  This is OK
    #       because BUILD64 is unset if we're building x86 and both pure64 and
    #       multilib x86_64 builds use BUILD64 for all the tools built via the
    #       cross-compiler.
    #
    # FIXME: i'm not sure i like the fact that this is sorta hidden in
    #        here... we'll see if i change my mind
    export CC="${CC} ${BUILD64}"
    export CXX="${CXX} ${BUILD64}"

    export cross_compile=true
}


unset_cross_compile()
{
    [ "$cross_compile" != "true" ] && return
    export CC=
    export CXX=
    export AR=
    export AS=
    export RANLIB=
    export LD=
    export STRIP=
    export cross_compile=false
}
