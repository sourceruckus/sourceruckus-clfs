#!/bin/bash

# should set toplevel via autoconf?
toplevel=$PWD/../..

# source our common variables and functions
. $toplevel/utils/bootstrap-early/functions

# extra variables for the final bootstrap stage
export CC="${MACHTYPE_TARGET}-gcc"
export CXX="${MACHTYPE_TARGET}-g++"
export AR="${MACHTYPE_TARGET}-ar"
export AS="${MACHTYPE_TARGET}-as"
export RANLIB="${MACHTYPE_TARGET}-ranlib"
export LD="${MACHTYPE_TARGET}-ld"
export STRIP="${MACHTYPE_TARGET}-strip"


build()
{
    # set some common variables for all targets
    CC="${CC} ${BUILD64}"
    CXX="${CXX} ${BUILD64}"
    OPTS="--prefix=$PREFIX_FINAL"
    OPTS+=" --build=${MACHTYPE_HOST}"
    OPTS+=" --host=${MACHTYPE_TARGET}"
    OPTS+=" --libdir=$PREFIX_FINAL/lib64"

    case "$1" in
	gmp)
	    HOST_CC=gcc CPPFLAGS=-fexceptions \
		build_generic $1 $OPTS \
		--enable-cxx || exit 1
	    ;;

	mpfr)
	    build_generic $1 $OPTS \
		--enable-shared || exit 1
	    ;;

	ppl)
	    setup_generic $1 &&
	    configure_generic $1 $OPTS \
		--enable-interfaces="c,cxx" \
		--enable-shared \
		--disable-optimization \
		--with-libgmp-prefix=$PREFIX_FINAL \
		--with-libgmpxx-prefix=$PREFIX_FINAL || exit 1

	    pushd $builddir || exit 1
	    # CLFS: Wwhen PPL is cross-compiled, it does not check whether
	    # GMP was compiled with support for exceptions, and simply
	    # assumes it was not. This assumption is incorrect, so we will
	    # fix that:
	    echo '#define PPL_GMP_SUPPORTS_EXCEPTIONS 1' >> confdefs.h &&
	    popd || exit 1
	    
	    compile_generic $1 || exit 1
	    ;;

	cloog-ppl)
	    build_generic $1 $OPTS \
		--with-bits=gmp \
		--enable-shared \
		--with-gmp=$PREFIX_FINAL \
		--with-ppl=$PREFIX_FINAL || exit 1
	    ;;

	zlib)
	    # zlib doesn't support out-of-tree builds...
	    setup_generic $1 || exit 1
	    export builddir=$sourcedir

	    # and it doesn't use autotools... despite the "configure" script
	    # and autotool-ish configure flags
	    OPTS="--prefix=$PREFIX_FINAL"
	    OPTS+=" --libdir=$PREFIX_FINAL/lib64"
	    pushd $builddir &&
	    ./configure $OPTS &&
	    popd || exit 1

	    compile_generic $1 || exit 1
	    ;;

	binutils)
	    setup_generic $1 &&
	    configure_generic $1 $OPTS \
		--with-lib-path=$PREFIX_FINAL/lib64:$PREFIX_FINAL/lib \
		--disable-nls \
		--enable-shared \
		--enable-64-bit-bfd || exit 1

	    pushd $builddir &&
	    make configure-host &&
	    make -j3 &&
	    make install &&
	    popd || exit 1
	    ;;

	gcc)
	    setup_generic gcc || exit 1

	    if [ ! -f $builddir/Makefile ]; then
		pushd $sourcedir || exit 1
		# apply bootstrap patches from the bootstrap-cross stage.
		for p in $toplevel/utils/bootstrap-cross/patches/gcc/*.patch; do
		    patch -Np1 < $p || exit 1
		done

		# revert this one bootstrap-cross patch
		patch -R -Np1 < $toplevel/utils/bootstrap-cross/patches/gcc/0003-set-CROSS_SYSTEM_HEADER_DIR.patch || exit 1

		# and apply final bootstrap patches
		for p in $toplevel/utils/bootstrap/patches/gcc/*.patch; do
		    patch -Np1 < $p || exit 1
		done
		popd
	    fi

	    configure_generic $1 $OPTS \
		--target=${MACHTYPE_TARGET} \
		--with-local-prefix=$PREFIX_FINAL \
		--enable-long-long \
		--enable-c99 \
		--enable-shared \
		--enable-threads=posix \
		--enable-__cxa_atexit \
		--disable-nls \
		--enable-languages=c,c++ \
		--disable-libstdcxx-pch || exit 1

	    pushd $builddir || exit 1
	    #  The following will prevent GCC from looking in the wrong
	    #  directories for headers and libraries
	    sed -i "/^HOST_\(GMP\|PPL\|CLOOG\)\(LIBS\|INC\)/s:-[IL]/\(lib\|include\)::" Makefile || exit 1

	    make -j3 AS_FOR_TARGET="${AS}" LD_FOR_TARGET="${LD}" &&
	    make install &&
	    popd || exit 1
	    ;;

	ncurses)
	    build_generic $1 $OPTS \
		--with-shared \
		--without-debug \
		--without-ada \
		--enable-overwrite \
		--with-build-cc=gcc || exit 1
		;;

	busybox)
	    setup_generic $1 || exit 1

	    pushd $builddir || exit 1

	    # create .config
	    #
	    # FIXME: we probably want to not build e2fsprogs, iproute, etc.
	    #        maybe not util-linux-ng, too...
	    #
	    # FIXME: we're not using PAM... might want to add this in here
	    #
	    # NOTE: if you want to do a make menuconfig to tweak .config,
	    #       NCURSES_PREFIX has to be set to $PREFIX_FINAL.
	    cp $packagedir/$1/config-bootstrap .config &&
	    make KBUILD_SRC=$sourcedir -f $sourcedir/Makefile oldconfig || exit 1

	    # build
	    make -j3 ARCH=${ARCH_TARGET} \
		CROSS_COMPILE="${MACHTYPE_TARGET}-" || exit 1

	    # install
	    make ARCH=${ARCH_TARGET} \
		CROSS_COMPILE="${MACHTYPE_TARGET}-" \
		CONFIG_PREFIX=$PREFIX_FINAL install || exit 1

	    # FIXME: there are a bunch of config files in
	    #        $sourcedir/examples that we might want installed too
	    #cp $sourcedir/examples/depmod.pl $PREFIX_FINAL/bin &&
	    #chmod 755 $PREFIX_FINAL/bin/depmod.pl|| exit 1

	    popd

	    ;;

	flex)
	    setup_generic $1 || exit 1

	    # Make sure that Flex doesn't try to include headers from
	    # /usr/include.
	    pushd $sourcedir &&
	    sed -i "s/-I@includedir@//g" Makefile.in &&
	    popd || exit 1

	     # When Cross Compiling the configure script does not determine
	     # the correct values for the following, Set the values
	     # manually
	    pushd $builddir &&
	    echo ac_cv_func_malloc_0_nonnull=yes > config.cache &&
	    echo ac_cv_func_realloc_0_nonnull=yes >> config.cache &&
	    popd || exit 1

	    configure_generic $1 $OPTS \
		--cache-file=config.cache &&
	    compile_generic $1 || exit 1
	    ;;

	gettext)
	    setup_generic $1 || exit

	    # Only the programs in the gettext-tools directory need to be
	    # installed for the temp-system
	    sourcedir=$sourcedir/gettext-tools
	    configure=$sourcedir/configure

	    # When cross-compiling the Gettext configure script assumes we
	    # don't have a working wcwidth when we do. The following will
	    # fix possible compilation errors because of this assumption
	    pushd $builddir &&
	    echo "gl_cv_func_wcwidth_works=yes" > config.cache &&
	    popd || exit 1

	    configure_generic $1 $OPTS \
		--disable-shared \
		--cache-file=config.cache || exit 1

	    pushd $builddir &&
	    make -j3 -C gnulib-lib &&
	    make -j3 -C src msgfmt &&
	    cp -v src/msgfmt $PREFIX_FINAL/bin &&
	    popd || exit 1
	    ;;

	m4)
	    setup_generic $1 || exit 1

	    # Configure can not properly determine the results of the
	    # following tests
	    pushd $builddir &&
	    echo gl_cv_func_btowc_eof=yes > config.cache &&
	    echo gl_cv_func_mbrtowc_incomplete_state=yes >> config.cache &&
	    echo gl_cv_func_mbrtowc_sanitycheck=yes >> config.cache &&
	    echo gl_cv_func_mbrtowc_null_arg=yes >> config.cache &&
	    echo gl_cv_func_mbrtowc_retval=yes >> config.cache &&
	    echo gl_cv_func_mbrtowc_nul_retval=yes >> config.cache &&
	    echo gl_cv_func_wcrtomb_retval=yes >> config.cache &&
	    echo gl_cv_func_wctob_works=yes >> config.cache &&
	    popd || exit 1

	    configure_generic $1 $OPTS \
		--cache-file=config.cache &&
	    compile_generic || exit 1
	    ;;

	texinfo)
	    setup_generic $1 &&
	    configure_generic $1 $OPTS || exit 1

	    pushd $builddir &&
	    make -j3 -C tools/gnulib/lib &&
	    make -j3 -C tools &&
	    make -j3 &&
	    make install &&
	    popd || exit 1
	    ;;

	*)
	    build_generic $1 $OPTS || exit 1
	    ;;
    esac
}


packages=""
#packages+=" gmp"
#packages+=" mpfr"
#packages+=" mpc"
#packages+=" ppl"
#packages+=" cloog-ppl"
#packages+=" zlib"
#packages+=" binutils"
#packages+=" gcc"
#packages+=" ncurses"
#packages+=" busybox"
#packages+=" bison"
#packages+=" file"
#packages+=" flex"
packages+=" gettext"
packages+=" m4"
packages+=" make"
#packages+=" texinfo"

# boot packages
#packages+=" e2fsprogs"
#packages+=" udev"
#packages+=" grub"

# NOTE: The following CLFS /tools packages are replaced by our busybox
#       package's equivilent tools
#
#packages+=" bash"
#packages+=" coreutils"
#packages+=" diffutils"
#packages+=" findutils" # missing locate...
#packages+=" gawk"
#packages+=" grep"
#packages+=" gzip"
#packages+=" patch"
#packages+=" sed"
#packages+=" tar"
#packages+=" vim"
#packages+=" xz-utils"

# NOTE: The following CLFS /tools packages (for booting) are currently
#       replaced by our busybox package... but we might want to actually
#       install the real versions.  util-linux-ng, for example, installs
#       pkg-config files that are searched for when building udev and/or hal
#       later on...
#
#packages+=" util-linux-ng"
#packages+=" sysvinit"
#packages+=" module-init-tools"

# NOTE: The following CLFS final system packages are replaced by our busybox
#       package's equivilent tools
#
#packages+=" inetd"
#packages+=" less/more"
#packages+=" iproute2"

# NOTE: The following non-CLFS packages are also replaced by our busybox
#       setup
#
#packages+=" cpio"
#packages+=" rpm"
#packages+=" httpd"
#packages+=" dhcpd"
#packages+=" dhcpclient"
#pacakges+=" bind"

mkdir -p $PWD/.build

for p in $packages; do
    echo "building cross package: $p"
    build $p || exit 1
done
