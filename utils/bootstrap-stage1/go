#!/bin/bash

# These variables get set by the Makefile, but try to autodetect them assuming
# we're building in-tree by hand if they're not set
[ -n "$ruckus_srcdir" ] || ruckus_srcdir=$PWD/../..
[ -n "$ruckus_builddir" ] || ruckus_builddir=$PWD/../..

# source our common variables and functions
. $ruckus_srcdir/utils/bootstrap-early/functions

# we've got bootstrap-stage1-specific config files in here
ruckus_confdir=$ruckus_srcdir/utils/bootstrap-stage1/config


build()
{
    # FIXME: CLFS book says CFLAGS and CXXFLAGS NEED to be unset
    #        during cross stage, but it writes the unset commands into
    #        .bashrc, which is still in use in later stages prior to
    #        booting/chrooting into the baby system...  Do we need to
    #        unset them here?
    unset CFLAGS
    unset CXXFLAGS
    unset CPPFLAGS
    unset LDFLAGS

    # set some common variables for all targets
    #
    # NOTE: We don't need any conditionals here because all supported build
    #       types use CLFS_TARGET for --host throughout the stage1 bootstrap.
    OPTS="--prefix=$PREFIX_TOOLS"
    OPTS+=" --build=${CLFS_HOST}"
    OPTS+=" --host=${CLFS_TARGET}"

    # put libs in lib64 if we're building x86_64 multilib
    if [ -n "$BUILD32" ]; then
	OPTS+=" --libdir=$PREFIX_TOOLS/lib64"
    fi

    OPTS+=" --disable-static"
    OPTS+=" --enable-shared"
    OPTS+=" --disable-nls"

    set_cross_compile

    case "$1" in
	gmp)
	    CC_FOR_BUILD=gcc \
		build_generic $1 $OPTS \
		--enable-cxx || exit 1
	    ;;

	zlib)
	    # NOTE: zlib doesn't use autotools... despite the "configure"
	    #       script and autotool-ish configure flags.  This means it
	    #       doesn't support out-of-tree builds, and its build system
	    #       usage is just different enough to break our
	    #       configure_generic routine...
	    #
	    # FIXME: i think zlib is using CMake, which we should
	    #        perhaps build support for into our generic build
	    #        scripts... although, the real problem here is
	    #        configure failing if passed any invalid args...
            #
	    build_in_tree=yes setup_generic $1 || exit 1

	    # NOTE: It also fails to configure if any unknown flags are passed
	    #       in, so we can't use our generic OPTS variable...
	    OPTS="--prefix=$PREFIX_TOOLS"

	    if [ -n "$BUILD32" ]; then
		OPTS+=" --libdir=$PREFIX_TOOLS/lib64"
	    fi

	    pushd $builddir &&
	    ./configure $OPTS &&
	    popd || exit 1

	    compile_generic $1 || exit 1
	    ;;

	binutils)
            # add 64bit support if desired
            if [ -n "$BUILD64" ]; then
                OPTS+=" --enable-64-bit-bfd"
            fi
            # disable multilib if we're building pure 32 or 64 bit
            if [ -z "$BUILD32" ]; then
                OPTS+=" --disable-multilib"
                OPTS+=" --with-lib-path=$PREFIX_TOOLS/lib"
            else
                OPTS+=" --with-lib-path=$PREFIX_TOOLS/lib64:$PREFIX_TOOLS/lib"
            fi

	    build_generic $1 $OPTS \
                --target=${CLFS_TARGET} \
                --enable-gold=yes \
                --enable-plugins \
                --with-system-zlib \
                --enable-threads || exit 1
	    ;;

	gcc)
	    setup_generic gcc || exit 1

            # apply the CLFS specs patch
	    if [ ! -f $builddir/Makefile ]; then
                # NOTE: gcc has a different patch for pure64 than for x86 or
                #       x86_64 multilib.
                p=$ruckus_srcdir/utils/bootstrap-cross/patches/gcc
                if [ -n "$BUILD64" -a -z "$BUILD32" ]; then
                    p+=/*-pure64_specs-*.patch
                else
                    p+=/*-specs-*.patch
                fi
                # NOTE: We replace the hardcoded /tools directory in the CLFS
                #       patches with the configured value for $PREFIX_TOOLS so
                #       that we can build multiple systems on a single box
                #       w/out the /tools symlinks colliding.
                echo "applying $p (PREFIX_TOOLS=$PREFIX_TOOLS)..."
		pushd $source &&
                sed "s|/tools|$PREFIX_TOOLS|g" $p | patch -Np1 &&
		popd || exit 1
	    fi

	    # make GCC look in PREFIX_TOOLS (i.e., not the host sys)
            #
            # FIXME: This is only ok because we use a dist tarball for gcc's
            #        sources... if we ever swtich to a git tree, we'll need to
            #        either make a copy of the source tree or undo this at the
            #        end...
            #
            pushd $source
	    echo "#undef STANDARD_STARTFILE_PREFIX_1" >> gcc/config/linux.h
            echo "#define STANDARD_STARTFILE_PREFIX_1 \"$PREFIX_TOOLS/lib/\"" >> gcc/config/linux.h
	    echo "#undef STANDARD_STARTFILE_PREFIX_2" >> gcc/config/linux.h
            echo "#define STANDARD_STARTFILE_PREFIX_2 \"\"" >> gcc/config/linux.h
            popd

            # Apply a sed subsitution that will suppress the execution
            # of the fixincludes script:
            #
            # FIXME: same here, we could need to undo this
            pushd $source &&
            cp -v gcc/Makefile.in{,.orig} &&
            sed 's@\./fixinc\.sh@-c true@' gcc/Makefile.in.orig > gcc/Makefile.in &&
            popd || exit 1

	    # NOTE: gcc-static, glibc32, glibc64, and gcc-final should NOT use
	    #       our common OPTS.  these packages are VERY important and so
	    #       we're going to follow the CLFS book exactly.
	    OPTS=""

            # extra tweaks
            if [ -n "$BUILD32" ]; then
                # x86_64 multilib
                OPTS+=" --libdir=$PREFIX_TOOLS/lib64"
            else
                # x86_64 pure or x86
                OPTS+=" --disable-multilib"
            fi

            # FIXME: CLFS (per CLFS GIT-20170803) does NOT do --disable-nls in
            #        Chapter 6, but does in Chapter 5 (but only in x86 and
            #        x86_64-64)...  definately looks like there's unintentional
            #        inconsistency here...  not sure which way to go here...
            #
            #        For now, I'm going to NOT --disable-nls here.
            #
            configure_generic $1 $OPTS \
                --prefix=$PREFIX_TOOLS \
                --build=${CLFS_HOST} \
                --host=${CLFS_TARGET} \
                --target=${CLFS_TARGET} \
                --with-local-prefix=$PREFIX_TOOLS \
                --enable-languages=c,c++ \
                --with-system-zlib \
                --with-native-system-header-dir=$PREFIX_TOOLS/include \
                --disable-libssp \
                --enable-install-libiberty || exit 1

	    pushd $builddir || exit 1
	    make -j$JOBCOUNT AS_FOR_TARGET="${AS}" LD_FOR_TARGET="${LD}" &&
	    make install &&
	    popd || exit 1

            # Install the libiberty header file that is needed by some packages
            #
            # FIXME: looks like this is done elsewhere w/ CLFS GIT-20170803
            #
            #pushd $source &&
            #cp -v include/libiberty.h $PREFIX_TOOLS/include &&
            #popd || exit 1
	    ;;

	ncurses)
            # FIXME: There is also a CLFS patch to fix some bash-related
            #        problems, but I haven't run into the bug it fixes, so I've
            #        left it out for now.
	    build_generic $1 $OPTS \
                --with-shared \
                --without-debug \
                --without-ada \
                --enable-overwrite \
                --with-build-cc=gcc || exit 1
	    ;;

	busybox)
	    setup_generic $1 || exit 1

	    # get ready
	    MAKE="make KBUILD_SRC=$source -f $source/Makefile"
	    MAKE+=" ARCH=$CLFS_ARCH CROSS_COMPILE=$CLFS_TARGET-"
	    pushd $builddir &&
	    $MAKE mrproper &&
	    popd || exit 1

	    # create .config
	    #
	    # NOTE: We're planning on using the busybox variants of everything
	    #       possible.  Any exceptions will be noted.
	    #
	    # NOTE: if you want to do a make menuconfig to tweak .config,
	    #       NCURSES_PREFIX has to be set to $PREFIX_TOOLS in order
	    #       to use the ncurses installed via bootstrap-early (and
	    #       our KBUILD patch needs to be applied)
            #
            cp -v $packagedir/busybox/config $builddir/.config &&
	    pushd $builddir &&
	    $MAKE oldconfig &&
            popd || exit 1

	    # build
            pushd $builddir &&
	    $MAKE -j$JOBCOUNT_KBUILD &&
	    popd || exit 1

	    # install
            #
            # NOTE: We install this directly into $CLFS here and let the
            #       busybox package slurp these files up into its manifest.
            #
            pushd $builddir &&
	    $MAKE CONFIG_PREFIX=$CLFS install &&
            popd || exit 1

	    # NOTE: busybox binary is setuid root later on under
	    #       fix-perms

	    # FIXME: there are a bunch of config files in
	    #        $source/examples that we might want installed too
	    #cp $source/examples/depmod.pl $PREFIX_TOOLS/bin &&
	    #chmod 755 $PREFIX_TOOLS/bin/depmod.pl|| exit 1

            # install some extra files for the package to slurp up
            mkdir -p $CLFS/usr/share/busybox &&
            cp -va $source/examples $builddir/busybox.links \
                $CLFS/usr/share/busybox || exit 1

	    ;;

        bash)
            # NOTE: CLFS (GIT-20170803) applies upstream patches (up to
            #       patchlevel 12).  We track the git repo as a submodule and
            #       use the latest available (rigth now, patch 23)
            #
            setup_generic $1 || exit 1

            # fix a bunch of cross-compilation configure errors
            pushd $builddir
            cat > config.cache << "EOF"
ac_cv_func_mmap_fixed_mapped=yes
ac_cv_func_strcoll_works=yes
ac_cv_func_working_mktime=yes
bash_cv_func_sigsetjmp=present
bash_cv_getcwd_malloc=yes
bash_cv_job_control_missing=present
bash_cv_printf_a_format=yes
bash_cv_sys_named_pipes=present
bash_cv_ulimit_maxfds=yes
bash_cv_under_sys_siglist=yes
bash_cv_unusable_rtsigs=no
gt_cv_int_divbyzero_sigfpe=yes
EOF
            popd

	    configure_generic $1 $OPTS \
                --without-bash-malloc \
                --cache-file=config.cache &&
            compile_generic $1 || exit 1
            ;;

        gawk)
            # remove busybox's awk symlink
            #
            # NOTE: The gawk install target creates awk->gawk, but only if it
            #       doesn't already exist.
            rm -f $PREFIX_TOOLS/bin/awk

            # NOTE: Can't quite use the generic rule here.  Looks like gawk
            #       commits configure in git and it's bootstrap.sh script
            #       actually touches files in the right order to keep configure
            #       from getting auto-regenerated.
            #
            # FIXME: Why am I forcing an autoreconf if I don't have to...?  Did
            #        the included configure script not work for some reason?
            #        Did I just want to know that I *could* bootstrap it w/ the
            #        installed versions of autotools?
            #
            autoreconf=yes \
                build_generic $1 $OPTS || exit 1
            ;;

	gettext)
            # NOTE: The CLFS 3.0.0 book is getting away with just building
            #       specific binaries inside gettext-tools... I am not so
            #       lucky.  Not sure if it's because I'm building out-of-tree
            #       or if it's the fact that we're building from a git repo
            #       instead of a dist tarball, but my build just turns into a
            #       nightmare unless I just do a plain old full build.
            #
            #       I do need to disable building the man and texinfo pages,
            #       though...

	    setup_generic $1 || exit

	    # FIXME: We've got --enable-shared --disable-static in
	    #        $OPTS... Does disabling shared now re-enable static?
            #
            EMACS="no" \
	        configure_generic $1 $OPTS \
		--disable-shared  || exit 1

            # don't build man in gettext-runtime
            pushd $builddir/gettext-runtime &&
            sed -i 's|\(^SUBDIRS = [[:space:][:alnum:]$(-_]*\) man |\1 |' \
                Makefile &&
            popd || exit 1

            # don't build man or info in gettext-tools
            pushd $builddir/gettext-tools &&
            sed -i 's|\(^SUBDIRS = [[:space:][:alnum:]$(-_]*\) man |\1 |' \
                Makefile &&
            sed -i 's|\(^SUBDIRS =\) doc |\1 |' Makefile &&
            popd || exit 1

            # NOTE: Can't build in parallel (as of 0.19.8)
            #
            JOBCOUNT=1 compile_generic $1 || exit 1
	    ;;

	texinfo)
            PERL=/usr/bin/perl \
                build_generic $1 $OPTS || exit 1
            ;;

	create-dirs)
            # NOTE: This 1st block of dirs is copy-pasted from the x86 CLFS
            #       section (and is identical to pure64).  The extra dirs
            #       created by the x86_64-multilib section are created below.
            #
            # FIXME: The GIT-20170803 CLFS Book's multilib section doesn't
            #        create lib/firmware at all... I'm assuming that's a typo.
            #
            mkdir -pv ${CLFS}/{bin,boot,dev,{etc/,}opt,home,lib/firmware,mnt}
            mkdir -pv ${CLFS}/{proc,media/{floppy,cdrom},run/{,shm},sbin,srv,sys}
            mkdir -pv ${CLFS}/var/{lock,log,mail,spool}
            mkdir -pv ${CLFS}/var/{opt,cache,lib/{misc,locate},local}
            install -dv -m 0750 ${CLFS}/root
            install -dv -m 1777 ${CLFS}{/var,}/tmp
            ln -sv ../run ${CLFS}/var/run
            mkdir -pv ${CLFS}/usr/{,local/}{bin,include,lib,sbin,src}
            mkdir -pv ${CLFS}/usr/{,local/}share/{doc,info,locale,man}
            mkdir -pv ${CLFS}/usr/{,local/}share/{misc,terminfo,zoneinfo}
            mkdir -pv ${CLFS}/usr/{,local/}share/man/man{1,2,3,4,5,6,7,8}

	    if [ -n "$BUILD32" ]; then
		# multilib dirs
		mkdir -pv ${CLFS}/lib64
		mkdir -pv ${CLFS}/var/lib64/{misc,locate}
		mkdir -pv ${CLFS}/usr/{,local/}lib64
		install -dv ${CLFS}/usr/lib/locale
		ln -sv ../lib/locale ${CLFS}/usr/lib64
	    fi

	    # I like these too much to leave out...
	    mkdir -pv $CLFS/mnt/{cdrom,flash,floppy,crypt}

	    echo done
	    ;;

	create-symlinks)

            # remove busybox symlinks in $CLFS/{bin,sbin} that have legit
            # binaries present in $PREFIX_TOOLS/{bin,sbin}.
            #
            # NOTE: Originally, we installed busybox in $PREFIX_TOOLS, allowing
            #       further bootstrap package installation to overwrite bb
            #       symlinks in there.  When we moved busybox's installation to
            #       $CLFS (to avoid needlessly compiling it twice), it
            #       essentially "promotes" the bb versions of things because of
            #       how PATH is setup.  If we installed stuff in $PREFIX_TOOLS
            #       to be used instead of bb applets (e.g., binutils), we need
            #       to break the bb symlinks now.
            #
            echo checking busybox symlinks...
            pushd $CLFS
            for x in $(find bin sbin -lname \*busybox -exec ls $PREFIX_TOOLS/{} 2>/dev/null \;); do
                y=$(echo $x | sed "s|^$PREFIX_TOOLS/||")
                echo "removing bb applet symlink $y, exposing $x"
                rm -v $y || exit 1
            done
            popd

            # NOTE: This 1st block of symlinks is copy-pasted from the x86 CLFS
            #       section (and is identical to pure64).  The extra symlinks
            #       created by the x86_64-multilib section are created below.
            #
            # NOTE: Be careful updating, the sed statement's quotes are single
            #       in the CLFS book, but we stick $PREFIX_TOOLS in there,
            #       which doesn't get expanded unless we also switch to double
            #       qoutes.
            #
            ln -sv $PREFIX_TOOLS/bin/{bash,cat,echo,grep,login,pwd,stty} ${CLFS}/bin
            ln -sv $PREFIX_TOOLS/bin/file ${CLFS}/usr/bin
            ln -sv $PREFIX_TOOLS/lib/libgcc_s.so{,.1} ${CLFS}/usr/lib
            ln -sv $PREFIX_TOOLS/lib/libstdc++.so{.6,} ${CLFS}/usr/lib
            sed -e "s$PREFIX_TOOLS/usr/" $PREFIX_TOOLS/lib/libstdc++.la > ${CLFS}/usr/lib/libstdc++.la
            ln -sv bash ${CLFS}/bin/sh
            ln -sv $PREFIX_TOOLS/sbin/init ${CLFS}/sbin
            ln -sv $PREFIX_TOOLS/etc/{login.{access,defs},limits} ${CLFS}/etc

            if [ -n "$BUILD32" ]; then
                # x86_64 multilib only
                ln -sv $PREFIX_TOOLS/lib64/libgcc_s.so{,.1} ${CLFS}/usr/lib64
                ln -sv $PREFIX_TOOLS/lib64/libstdc++.so{.6,} ${CLFS}/usr/lib64
            fi

            # create /etc/mtab symlink for compatibility
            ln -sv /proc/self/mounts ${CLFS}/etc/mtab

            # remove the broken symlinks created by the copy-n-pasted CLFS
            # scriptlet above
            #
            # NOTE: As of CLFS GIT-20170803-x86_64, this removes the following
            #       broken symlinks:
            #
            #       $CLFS/etc/limits
            #       $CLFS/etc/login.{access,defs}
            #
            blarg=$(find $CLFS -xtype l -printf "%p ")
            if [ -n "$blarg" ]; then
                echo "WARNING: broken link(s) detected: $blarg"
                rm -vf $blarg
            fi
	    ;;

	create-conf)
	    # this will handle config files for init, mdev, users/groups,
            # logfiles, login scripts, fstab, needed device nodes, etc
	    
	    # copy rcS into etc
	    mkdir -vp $CLFS/etc/init.d &&
	    cp -v $ruckus_confdir/rcS $CLFS/etc/init.d || exit 1

            # install mdev config
            #
            # NOTE: We need replace uucp with tty in here for ttyS* because we
            #       haven't created a uucp user/group (yet?).
            #
            # FIXME: Should we just go ahead and make a uucp user account by
            #        default?  CLFS doesn't, but that doesn't mean I can't...
            #        Does busybox provide cu or any other tools from the uucp
            #        package?
            #
            cp -v $ruckus_srcdir/src/busybox/examples/mdev_fat.conf \
                $CLFS/etc/mdev.conf &&
            sed -i 's|uucp|tty|' $CLFS/etc/mdev.conf &&
            cp -v $ruckus_srcdir/src/busybox/examples/mdev.conf.* \
                $CLFS/etc/ || exit 1

	    # copy passwd and group files into etc
            #
            # NOTE: We maintain these as files instead of as here-documents so
            #       that we can tweak CLFS' recommendations more easily.
            #
            # NOTE: We use /bin/ash for root's shell (at least for now) because
            #       it plays nicer with Xen's virtual console device than bash
            #       does.
            #
            # FIXME: CLFS Systemd vs Sysvinit books have very different
            #        passwd/group files... gonna have to pick one...
            #
            #        I think we should be using the sysvinit one for now, since
            #        we're not going to build systemd to boot our bootstrap
            #        system.  During final build, if/when we build systemd,
            #        we'll add users/groups via srp.
            #
            # FIXME: The CLFS book (GIT-20170803) seems to have typos in the
            #        passwd file... it left out the "comment" field and didn't
            #        double up the ':' separator...
            #
	    cp -v $ruckus_confdir/{passwd,group} $CLFS/etc || exit 1
	    
	    # initialize login related log files.
	    #
            # NOTE: Only the SYSVINIT variant of CLFS does this.  These files
            #       are either not used by Systemd, or it creates them itself.
            #       Either way, since I'm still kinda undecided on final system
            #       init, and may use SYSVINIT for a while prior to installing
            #       Systemd, we'll create these.  Also of note, we create and
            #       chmod the files here but chgrp them in go2's fix_perms()
            #       (as root) after chowning everythig to 0:0.
            #
	    # NOTE: busybox's init replacement might not use these, but if
	    #       switch over to the real sysvinit later on we'll want
	    #       these files
            #
            touch ${CLFS}/var/log/{btmp,faillog,lastlog,wtmp} &&
            chmod -v 664 ${CLFS}/var/log/{faillog,lastlog} &&
            chmod -v 600 ${CLFS}/var/log/btmp || exit 1

	    # copy profile into root's homedir
            #
            # NOTE: We replace /tools with $PREFIX_TOOLS so we can build
            #       multiple systems on a single box w/out the /tools symlinks
            #       colliding.
            #
            sed "s|:/tools|:$PREFIX_TOOLS|g" $ruckus_confdir/profile \
                > $CLFS/root/.profile || exit 1

	    # make sure these build variables are set
            #
            # NOTE: The CLFS_HOST and CLFS_TARGET variables are no longer
            #       needed at this point.  The CLFS book does not put them in
            #       .profile and neither do we.
            #
            # NOTE: The BUILD32 and BUILD64 CLFS variables are used throughout
            #       the final system build.
            #
            # NOTE: The CLFS_TARGET32 variable is still needed when we go to
	    #       build some 32bit libs at the beginning of the final system
	    #       build (looks like cloog is the last one that needs it).
            #
	    echo export BUILD32=\"$BUILD32\" >> $CLFS/root/.profile
	    echo export BUILD64=\"$BUILD64\" >> $CLFS/root/.profile
	    echo export CLFS_TARGET32=\"$CLFS_TARGET32\" >> $CLFS/root/.profile

            # store this variable, too
            echo export CLFS_ARCH_STRING=\"$CLFS_ARCH_STRING\" \
                >> $CLFS/root/.profile

            # generate fstab
            #
            # FIXME: CLFS 3.0.0-systemd fstab is excluding some of the standard
            #        virtual filesystems... /proc, /sys, /run, and /dev... not
            #        sure why.
            #
            echo "# -*- mode: sh -*- " > $CLFS/etc/fstab
            echo "#" >> $CLFS/etc/fstab
            echo "# device  mount_point  fstype  options  dump  fsck_order" \
                >> $CLFS/etc/fstab
            echo "" >> $CLFS/etc/fstab
            if [ "$STAGE2_XEN" = "yes" ]; then
                echo "/dev/xvda1 / $CLFS_FSTYPE defaults 1 1" >> $CLFS/etc/fstab
            else
                echo "$CLFS_DEV / $CLFS_FSTYPE defaults 1 1" >> $CLFS/etc/fstab
            fi
            # NOTE: If configured, RUCKUS_DEV is passed in as the 2nd disk and
            #       mounted in /tmp/ruckus_dev.  /tmp/ruckus_dev/RUCKUS_PATH is
            #       then bind mounted to /ruckus.
            #
            # FIXME: Is there a performace penalty that could be avoided by
            #        mounting directly on /ruckus if RUCKUS_PATH == / ?
            #
            # NOTE: This is mounted read-only so that we can:
            #
            #       1) Continue to modify the /ruckus source tree from the
            #          dom0.
            #
            #       2) Make ABSOLUTELY sure that I don't ever smoke my /ruckus
            #          filesystem again.  Xen WILL let you pass /ruckus through
            #          read-write even if it's still mounted read-write on the
            #          dom0... at which point baaaad things happen.  :-/
            #
            #       3) Have the option to pass it through to multiple
            #          ruckus-builder domUs in parallel.
            #
            # FIXME: We have to set 'noload' for EXT4 to ensure that the
            #        journal doesn't get written to.  What happens if we're not
            #        using EXT4...?
            #
            if [ -n "$RUCKUS_DEV" ]; then
                mkdir -p $CLFS/ruckus $CLFS/tmp/ruckus_dev
                if [ "$STAGE2_XEN" = "yes" ]; then
                    echo "/dev/xvdb1 /tmp/ruckus_dev $RUCKUS_FSTYPE defaults,ro,noload 1 2" >> $CLFS/etc/fstab
                else
                    echo "$RUCKUS_DEV /tmp/ruckus_dev $RUCKUS_FSTYPE defaults 1 2" >> $CLFS/etc/fstab
                fi
                echo "/tmp/ruckus_dev /ruckus none bind 0 0" >> $CLFS/etc/fstab
            fi
            cat $ruckus_confdir/fstab >> $CLFS/etc/fstab || exit 1

            # install our inittab, which optionally starts the stage2 builder
            cp -v $ruckus_confdir/inittab $CLFS/etc/ || exit 1

	    # touch the stage2 file, which causes init to run the stage2 script
	    # on tty1 at boot
            if [ "$STAGE2_AUTO" = "yes" ]; then
	        touch $CLFS$RUCKUS_BOOTSTRAP_STAGE2_FILE || exit 1
            fi

	    ;;

	kernel)
            # FIXME: I should redo the kernel configs, perhaps using ruckusrd
            #        for initramfs...
            #
            #        Don't forget, this is the cross-compiled bare-bones kernel
            #        just to get us booted up...  if we can live w/out modules,
            #        that would be great.  That being said, it would be nice to
            #        be kinda distro-kernel-ish so that most people with most
            #        hardware can just use our bootstrap config... we'll see.
            #
            #        Either way, the version in src/kernel should get bumped up
            #        to v4.2+ so that we get multi-layered overlayfs.  And so
            #        that the following comment is true.  ;-)
            #
            # NOTE: This is built using the version checked out in the
            #       src/kernel submodule, which is NOT the same version CLFS
            #       uses.  We DO install the CLFS-matched kernel headers to go
            #       along with glibc in bootstrap-cross and bootstrap-stage2.
            #
	    setup_generic $1 || exit 1

	    if [ -n "$BUILD64" ]; then
		kernel_config=kernel-config-64bit
	    else
		kernel_config=kernel-config-32bit
	    fi

	    # get ready
            #
            # NOTE: Kbuild requires PWD to be $source, but will put all build
            #       files in an output dir via O=/path/to/outputdir.  Gives us
            #       the same result as the PWD=builddir -f
            #       /path/to/sourc/Makefile way of doing things, but does
            #       require some faith in the Makefile to respect outputdir
            #       100% of the time.  (FYI, I have never noticed KBuild
            #       writing into $source w/ outputdir set...).
            #
            # NOTE: Also, the make mrproper SHOULD be pointless.  We just
            #       created the directory fresh.  Unless this is a subsequent
            #       run w/ a dirty source tree... so we do it anyways.
            #
	    MAKE="make O=$builddir"
	    MAKE+=" ARCH=$CLFS_ARCH CROSS_COMPILE=$CLFS_TARGET-"
	    pushd $source &&
	    $MAKE mrproper &&
	    popd || exit 1

	    # get set
	    cp -v $ruckus_confdir/$kernel_config $builddir/.config &&
	    pushd $source &&
	    $MAKE olddefconfig &&
	    popd || exit 1

	    # NOTE: if you want to do a make menuconfig to tweak .config,
	    #       NCURSES_PREFIX has to be set to $PREFIX_TOOLS.

	    # go!
            #
            # FIXME: used to use INSTALL_MOD_PATH=$CLFS, but somewhere along
            #        the line CLFS switched to /tools... will modprobe work?
            #        will firmware get found?
            #
            # FIXME: i guess it must work, because i don't remember having any
            #        problems w/ modules last time i tried building...
            #
	    pushd $source &&
	    $MAKE -j$JOBCOUNT_KBUILD &&
            $MAKE INSTALL_MOD_PATH=$PREFIX_TOOLS modules_install &&
	    popd || exit 1

            # FIXME: CLFS does a make firmware_install... but that doesn't seem
            #        to be needed.  modules_install is installing the firmware
            #        already.  I'm guessing this is because they don't want to
            #        assume that you've configured with module support... but
            #        you may still need firmware?
            #
            #$MAKE INSTALL_MOD_PATH=$PREFIX_TOOLS firmware_install

            # FIXME: Do we need to run depmod -b $CLFS?  Looks like
            #        modules_install does it at the end...

            # FIXME: Let's try and use the same kernel config, but just sed
            #        LOCALVERSION into it.  Then, after we've booted (and
            #        automagically loaded needed modules), remove
            #        lib/{modules,firmware}

            # FIXME: chowning everything to root is following the build and
            #        source symlinks into my source tree... obviously don't
            #        want that... but where should these symlinks really point
            #        to on the booted system?
            #
            # FIXME: get this path right... see comment above about /lib vs
            #        /tools/lib.
            #
            rm -f $PREFIX_TOOLS/lib/modules/*/{build,source} || exit 1

	    # now actually install the resulting kernel files
            #
            # NOTE: We used to install in $CLFS/boot, but CLFS book shifted to
            #       $PREFIX_TOOLS at some point.  I guess it doesn't really
            #       matter, and sticking them in there does make it easier to
            #       remove the bootstrap files later on...
            #
	    pushd $builddir &&
            mkdir -p $PREFIX_TOOLS/boot &&
	    cp -v arch/$CLFS_ARCH/boot/bzImage \
                $PREFIX_TOOLS/boot/vmlinuz-ruckus-bootstrap &&
	    cp -v System.map $PREFIX_TOOLS/boot/System.map-ruckus-bootstrap &&
	    cp -v .config $PREFIX_TOOLS/boot/config-ruckus-bootstrap &&
	    popd || exit 1
	    ;;

        xen-detour)
	    # NOTE: Just build the hypervisor.  This step is generally just
	    #       done to augment the bootstrap-early xen build on 32bit
	    #       systems with a cross-compiled 64bit hypervisor.
	    #
            # NOTE: Xen can't build out-of-tree, because of it's strange
            #       half-breed autotools build system.
	    build_in_tree=1 setup_generic $1 || exit 1

            # NOTE: It also needs to be explicitly configured (i.e., Makefile
            #       already exists).
            #
            # NOTE: We disable building tools, kernels, docs, and stubdom for
            #       stage1.
	    autoreconf=yes \
	        configure_generic $1 --prefix=$PREFIX_HOSTPREP \
		--disable-tools \
		--disable-kernels --disable-docs --disable-stubdom || exit 1

	    # NOTE: The dist target should just be building the hypervisor, as
	    #       per our configure args above.
	    #
	    # NOTE: We set DESTDIR to install into $PREFIX_HOSTPREP/boot.
	    MAKE="make"
            case "$CLFS_ARCH" in
                i386)
                    MAKE+=" XEN_TARGET_ARCH=x86_32"
                    ;;
                *)
                    MAKE+=" XEN_TARGET_ARCH=$CLFS_ARCH"
            esac
	    MAKE+=" CROSS_COMPILE=$CLFS_TARGET-"
	    pushd $builddir &&
	    $MAKE -j$JOBCOUNT dist &&
            $MAKE DESTDIR=$PREFIX_HOSTPREP install &&
	    popd || exit 1
            ;;

        xen-slurp)
            # install hostprep's hypervisor in PREFIX_TOOLS if needed
            #
            # NOTE: If we're building a 32bit system, we won't be able to
            #       compile the hypervisor during the final build phase.
            #       Instead of building a new cross-compilation toolchain
            #       later, we just pre-install the hypervisor we built during
            #       hostprep onto the final system here.
            #
            # FIXME: Don't forget to make the xen final system build script
            #        slurp up the pre-existing hypervisor into it's package
            #        contents...
            #
            mkdir -p $PREFIX_TOOLS/boot &&
            cp -va $PREFIX_HOSTPREP/boot/xen* $PREFIX_TOOLS/boot/ || exit 1
	    ;;

	*)
	    build_generic $1 $OPTS || exit 1
	    ;;
    esac
}


packages=""

# busybox of doom!
#
# NOTE: We replace a ton of CLFS /tools packages by using busybox here.  The
#       busybox applets are less featureful than the full GNU tools, but
#       they're good enough to get our bootstrap system up and running quickly.
#
# NOTE: We configure busybox with basically everything turned on, and we just
#       blindly overwrite the applet links with real binaries as they get
#       built.
#
# NOTE: This means we'll be using busybox's init and mdev instead of sysvinit
#       and udev.  And we'll be providing our own simple bootscripts instead of
#       using the CLFS ones.
#
# NOTE: I'll keep the commented out list of CLFS packages up-to-date and in
#       order just to make pulling in CLFS updates easier.
#
# FIXME: what about my old patch for detecting non-/usr ncurses...?
#
# NOTE: I'll document some of the applet limitations here:
#
#       - findutils: No locate equivelent, but that's fine.
#
#       - mdev: Obviously, udev scripts won't work.
#
#       - init: Single runlevel only, but that's fine for now.
#
#       - losetup: No crypto support.
#
#       - bash/ash: Might run into bash script incompatibilities, although it
#         seems to be working fine for now.
#
#         UPDATE: I got tired of running into bash-specific things all over the
#                 place and added bash partway through the stage1 build.
#
#       - xz: Only supports decompressing... If we need to compress with xz
#         from the bootstrap system, we'll need to install the real xz package.
#         However, this does mean we're perfectly capable of untarring tar.xz
#         files transparently using busybox.
#
#         FIXME: is that still true?
#
#         We need to still build xz-utils, though, because we're going to need
#         liblzma.so for Python's lzma/xz support.
#
#       - ar: Doesn't support 's' (ranlib) or 'u' (update).  This really
#         shouldn't effect much in here, though, as we build binutils (which
#         includes a full-fledged ar) as soon as we can.
#
#       - vi: Just as painful to use as I remember the original vi
#         being... shocking, and yet oddly refreshing, after years of being
#         spoiled by vim.
#
#       - coreutils: mktemp requires exactly 6 Xs in TEMPLATE, which is what
#         the manpage for mkdtemp says, but not how mktemp behaves (it requires
#         just 3 or more).
#
packages+=" busybox"

packages+=" gmp"
packages+=" mpfr"
packages+=" mpc"
packages+=" isl"
packages+=" zlib"
packages+=" binutils"
packages+=" gcc"
packages+=" ncurses"

# NOTE: I really wanted to leave bash out of bootstrap entirely (and maybe even
#       out of the final system where I'll have zsh), but too many scripts keep
#       requiring extra bash-isms.  Ash just can't cut it...
#
# FIXME: I could actually move bash into stage2, which would avoid
#        cross-compilation issues.  I can successfully build all the way up
#        through the end of stage2 as of this writing w/out getting bitten by
#        missing bash features.
#
packages+=" bash"

# bb
#
#packages+=" bzip2"

# NOTE: We skip check because it's unneeded at this point (do to our other
#       deviations from the CLFS book?)
#
#packages+=" check"

# bb
#
#packages+=" coreutils"
#packages+=" diffutils"

packages+=" file"

# bb
#
#packages+=" findutils"

# FIXME: Really wanted to use bb awk, but glibc checks specifically for gawk >=
#        3.1.2.  According to the glibc INSTALL file:
#
#          Some `gawk' extensions are used, including the `asorti' function,
#          which was introduced in version 3.1.2 of `gawk'.
#
packages+=" gawk"

packages+=" gettext"

# bb
#
#packages+=" grep"
#packages+=" gzip"

packages+=" make"

# bb
#
#packages+=" patch"

# FIXME: Really want to use bb sed... but glibc INSTALL file says:
#
#          Most scripts work with any version of `sed'.  The known exception is
#          the script `po2test.sed' in the `intl' subdirectory which is used to
#          generate `msgs.h' for the test suite.  This script works correctly
#          only with GNU `sed' 3.02.  If you like to run the test suite, you
#          should definitely upgrade `sed'.
#
#        For now, I'm still using bb sed, and it gets through glibc's configure
#        script ok...
#
#packages+=" sed"

#packages+=" tar"

packages+=" texinfo"

# bb
#
#packages+=" util-linux"
#packages+=" vim"

# srp needs Python's lzma module, which needs liblzma... which buzybox doesn't
# provide.
#
# NOTE: We call this "xz" because that's the name of the git submodule.  CLFS
#       refers to it as "XZ Utils", as the dist tarball is named xz-utils.
#
packages+=" xz"


# boot prep
#
# FIXME: hmm... not sure how i'm gonna do this...  CLFS builds a bunch of
#        basic utils, udev, and a stripped down kernel in the target
#        filesystem (ie, not /tools) to make a bootable system.  Then
#        the next chapter in CLFS overwrites the installed files with the
#        final versions.  I guess this is doable...  The final system
#        packages are going to be packaged and installed with SRP, so we'll
#        have backup files all over the place that need to be remove.
#        Additionally, it would be nice if we could guarantee that there are
#        no bootstrap files left over.  Not sure how important that is,
#        though.

# NOTE: We skip bc because it's unneeded at this point.  CLFS builds it in
#       Chapter 7 (which roughly equates to our bootstrap-stage1), but then
#       they install it in /cross-tools (which is the prefix used for the cross
#       compilation toolchain).  I believe they did this because CLFS doesn't
#       have a bootstrap-early equivalent.  We check for bc via configure and
#       add it to hostprep (aka bootstrap-early) if needed.
#
#packages+=" bc"

# bb
#
#packages+=" boot-scripts"
#packages+=" e2fspogs"
#packages+=" kmod"
#packages+=" shadow"
#packages+=" sysvinit"
#packages+=" eudev"

packages+=" kernel"

# NOTE: We leave out grub for three reasons.
#
#       1) We boot our bootstrap system up as a Xen virtual machine, so we
#          don't need a bootloader.
#
#       2) I'd use SYSLINUX if we really need a bootloader at this point.
#          Better bang for the buck (EXT, FAT, IS9660 support, etc).
#
#       3) We've already checked the host system for syslinux via configure and
#          built it via hostprep if missing, so we know we can make the
#          bootstrap system bootable if not using Xen.  With syslinux
#          installed/configured on the bootstrap system, we'll be able to boot
#          bot won't necesarily be able to reinstall extlinux or make bootable
#          ISOs... but we'll cover that later on during the final system build.
#
#packages+=" grub"

packages+=" create-dirs"

packages+=" create-symlinks"

# this will handle config files for init, mdev, users/groups, logfiles,
# login scripts, fstab, etc
#
# NOTE: CLFS has a stand-alone section for device nodes that we've swallowed up
#       into fix_perms() in our go2 script (run via make install as root).
#
packages+=" create-conf"

# and so ends the list of CLFS packages


# We add this so that we can build perl in stage2, in-tree, from a git
# submodule (setup_generic uses rsync to copy the source tree in this case).
# Unfortunately, rsync needs to have perl in order to compile.  CLFS explicitly
# waits until booted to natively compile the temporary perl installation simply
# because it's such a pain to cross-compile, so we follow suit.  In other
# words, we're going to cross-compile rsync so that we don't have to
# cross-compile perl.
#
# NOTE: This also ensures that the rsync submodule is bootstrapped prior to
#       booting into the stage2 builder.
#
packages+=" rsync"


# If we have STAGE1_XEN_ONLY set, replace the entire pacakges list with just
# xen-detour.  Otherwise, if STAGE1_XEN is set, add xen-slurp to the package
# list.
if [ "$STAGE1_XEN_ONLY" = "yes" ]; then
    packages=xen-detour
elif [ "$STAGE1_XEN" = "yes" ]; then
    packages+=" xen-slurp"
fi


mkdir -p $CLFS$PREFIX_TOOLS

# now iterate through building for our target architecture using our
# cross-compiler.
for p in $packages; do
    echo -e "\n+++++ building bootstrap-stage1 package: $p"
    build $p || exit 1
done


# make a backup of our progress, because starting over sucks
#
# NOTE: This is a "new" GNU-format incremental backup, which uses a .snar file
#       to keep track of what's been archived when.
#
# NOTE: I considered removing the compression from our backup, because it
#       seemed like it was taking forever.  Here's some timing info from a
#       while ago.
#
#       Using tar's xz compression (-J), it's adding about 10 minutes to the
#       build time and compressed 890M down to about 180M on a 64bit-multilib
#       build.
#
#       Using bzip (-j) only took 2.5 minutes and resulted in a 290M archive.
#
#       Using gzip (-z) only took 1.5 minutes and resulted in a 350M file.
#
#       Piping tar into xz -0 took 1.5 minutes and resulted in a 240M file.
#       Looks like we have a winner.
#
if [ "$STAGE1_XEN_ONLY" != "yes" ]; then
    echo -n "creating bootstrap-stage1 backup... "
    cp $BUILDROOT/baby-bootstrap-cross.snar \
        $BUILDROOT/baby-bootstrap-stage1.snar &&
    tar -c \
        --exclude ./lost+found \
        --exclude .${ruckus_srcdir#$CLFS} \
        --exclude .${ruckus_builddir#$CLFS}* \
        -g $BUILDROOT/baby-bootstrap-stage1.snar \
        -C $CLFS . \
        | xz -0 > $BUILDROOT/baby-bootstrap-stage1.tar.xz || exit 1
    echo "done."
fi

exit 0
