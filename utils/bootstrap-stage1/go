#!/bin/bash

# should set toplevel via autoconf?
toplevel=$PWD/../..

# source our common variables and functions
. $toplevel/utils/bootstrap-early/functions


build()
{
    # set some common variables for all targets
    OPTS="--prefix=$PREFIX_FINAL"
    OPTS+=" --build=${MACHTYPE_HOST}"
    OPTS+=" --host=${MACHTYPE_TARGET}"

    if [ -n "$BUILD64" ]; then
	OPTS+=" --libdir=$PREFIX_FINAL/lib64"
    fi

    OPTS+=" --disable-static"
    OPTS+=" --enable-shared"
    OPTS+=" --disable-nls"

    set_cross_compile

    case "$1" in
	gmp)
	    HOST_CC=gcc CPPFLAGS=-fexceptions \
		build_generic $1 $OPTS \
		--enable-cxx || exit 1
	    ;;

	ppl)
	    # we patch autoconf files, so we need to make sure autoreconf
	    # gets called
	    setup_generic $1 &&
	    autoreconf=yes configure_generic $1 $OPTS \
		--enable-interfaces="c,cxx" \
		--disable-optimization \
		--with-libgmp-prefix=$PREFIX_FINAL \
		--with-libgmpxx-prefix=$PREFIX_FINAL || exit 1

	    pushd $builddir || exit 1
	    # CLFS: Wwhen PPL is cross-compiled, it does not check whether
	    # GMP was compiled with support for exceptions, and simply
	    # assumes it was not. This assumption is incorrect, so we will
	    # fix that:
	    echo '#define PPL_GMP_SUPPORTS_EXCEPTIONS 1' >> confdefs.h &&
	    popd || exit 1
	    
	    compile_generic $1 || exit 1
	    ;;

	cloog-ppl)
	    # we patch autoconf files, so we need to make sure autoreconf
	    # gets called
	    autoreconf=yes build_generic $1 $OPTS \
		--with-bits=gmp \
		--with-gmp=$PREFIX_FINAL \
		--with-ppl=$PREFIX_FINAL || exit 1
	    ;;

	zlib)
	    # zlib doesn't support out-of-tree builds...
	    build_in_tree=yes setup_generic $1 || exit 1

	    # and it doesn't use autotools... despite the "configure" script
	    # and autotool-ish configure flags
	    OPTS="--prefix=$PREFIX_FINAL"

	    if [ -n "$BUILD64" ]; then
		OPTS+=" --libdir=$PREFIX_FINAL/lib64"
	    fi

	    pushd $builddir &&
	    ./configure $OPTS &&
	    popd || exit 1

	    compile_generic $1 || exit 1
	    ;;

	binutils)
	    # FIXME: does the lib-path and 64-bit-bfd stuff have to be
	    #        conditional for 64 bit systems?  i'm thinking it might
	    #        be ok to compile on 32bit systems, but we'll see...
	    setup_generic $1 &&
	    configure_generic $1 $OPTS \
		--with-lib-path=$PREFIX_FINAL/lib64:$PREFIX_FINAL/lib \
		--enable-64-bit-bfd || exit 1

	    pushd $builddir &&
	    make configure-host &&
	    make -j$JOBCOUNT &&
	    make install &&
	    popd || exit 1
	    ;;

	gcc)
	    setup_generic gcc || exit 1

	    if [ ! -f $builddir/Makefile ]; then
		pushd $source || exit 1
		# apply bootstrap patches from the bootstrap-cross stage.
		for p in $toplevel/utils/bootstrap-cross/patches/gcc/*.patch; do
		    patch -Np1 < $p || exit 1
		done

		# revert this one bootstrap-cross patch
		patch -R -Np1 < $toplevel/utils/bootstrap-cross/patches/gcc/0003-set-CROSS_SYSTEM_HEADER_DIR.patch || exit 1

		# and apply final bootstrap patches
		for p in $toplevel/utils/bootstrap/patches/gcc/*.patch; do
		    patch -Np1 < $p || exit 1
		done
		popd
	    fi

	    # FIXME: should probably rework the gcc patches to modify
	    # Makefile.am instead of Makefile.in and then set autoreconf=yes
	    configure_generic $1 $OPTS \
		--target=${MACHTYPE_TARGET} \
		--with-local-prefix=$PREFIX_FINAL \
		--enable-long-long \
		--enable-c99 \
		--enable-threads=posix \
		--enable-__cxa_atexit \
		--enable-languages=c,c++ \
		--disable-libstdcxx-pch || exit 1

	    pushd $builddir || exit 1
	    #  The following will prevent GCC from looking in the wrong
	    #  directories for headers and libraries
	    sed -i "/^HOST_\(GMP\|PPL\|CLOOG\)\(LIBS\|INC\)/s:-[IL]/\(lib\|include\)::" Makefile || exit 1

	    make -j$JOBCOUNT AS_FOR_TARGET="${AS}" LD_FOR_TARGET="${LD}" &&
	    make install &&
	    popd || exit 1
	    ;;

	ncurses)
	    build_generic $1 $OPTS \
		--with-shared \
		--without-debug \
		--without-ada \
		--enable-overwrite \
		--with-build-cc=gcc || exit 1
		;;

	busybox)
	    setup_generic $1 || exit 1

	    pushd $builddir || exit 1

	    # create .config
	    #
	    # NOTE: planning on using the busybox variants of everything
	    #       possible except for programs provided by the following
	    #       packages:
	    #
	    #       - e2fsprogs (findfs, fsck.ext2, mkfs.ext2, etc)
	    #       - util-linux (blkid, mount, losetup, agetty, etc)
	    #
	    # NOTE: We're not using PAM here... might want to add this into
	    #       our final busybox config (assuming we actually compile
	    #       the PAM libs first).
	    #
	    # NOTE: if you want to do a make menuconfig to tweak .config,
	    #       NCURSES_PREFIX has to be set to $PREFIX_FINAL in order
	    #       to use the ncurses installed via bootstrap-early (and
	    #       our KBUILD patch needs to be applied)
	    cp $packagedir/$1/config-bootstrap .config &&
	    make KBUILD_SRC=$source -f $source/Makefile oldconfig || exit 1

	    # build
	    make -j$JOBCOUNT_KBUILD ARCH=${ARCH_TARGET} \
		CROSS_COMPILE="${MACHTYPE_TARGET}-" || exit 1

	    # install
	    make ARCH=${ARCH_TARGET} \
		CROSS_COMPILE="${MACHTYPE_TARGET}-" \
		CONFIG_PREFIX=$PREFIX_FINAL install || exit 1

	    # FIXME: setuid root?  install prints this warning:
	    #  --------------------------------------------------
	    #  You will probably need to make your busybox binary
	    #  setuid root to ensure all configured applets will
	    #  work properly.
	    #  --------------------------------------------------

	    # FIXME: there are a bunch of config files in
	    #        $source/examples that we might want installed too
	    #cp $source/examples/depmod.pl $PREFIX_FINAL/bin &&
	    #chmod 755 $PREFIX_FINAL/bin/depmod.pl|| exit 1

	    popd

	    ;;

	flex)
	    setup_generic $1 || exit 1

	    # Make sure that Flex doesn't try to include headers from
	    # /usr/include.
	    pushd $source &&
	    sed -i "s/-I@includedir@//g" Makefile.in &&
	    popd || exit 1

	    # When cross-compiling, the configure script does not determine
	    # the correct values for the following, so we'll set the values
	    # manually
	    pushd $builddir &&
	    echo ac_cv_func_malloc_0_nonnull=yes > config.cache &&
	    echo ac_cv_func_realloc_0_nonnull=yes >> config.cache &&
	    popd || exit 1

	    configure_generic $1 $OPTS \
		--cache-file=config.cache &&
	    compile_generic $1 || exit 1
	    ;;

	gettext)
	    setup_generic $1 || exit

	    # Only the programs in the gettext-tools directory need to be
	    # installed for the temp-system
	    source=$source/gettext-tools
	    configure=$source/configure
	    echo source: $source
	    echo configure: $configure

	    # When cross-compiling the Gettext configure script assumes we
	    # don't have a working wcwidth when we do. The following will
	    # fix possible compilation errors because of this assumption
	    pushd $builddir &&
	    echo "gl_cv_func_wcwidth_works=yes" > config.cache &&
	    popd || exit 1

	    configure_generic $1 $OPTS \
		--disable-shared \
		--cache-file=config.cache || exit 1

	    pushd $builddir &&
	    make -j$JOBCOUNT -C gnulib-lib &&
	    make -j$JOBCOUNT -C src msgfmt &&
	    cp -v src/msgfmt $PREFIX_FINAL/bin &&
	    popd || exit 1
	    ;;

	m4)
	    setup_generic $1 || exit 1

	    # Configure can not properly determine the results of the
	    # following tests
	    pushd $builddir &&
	    echo gl_cv_func_btowc_eof=yes > config.cache &&
	    echo gl_cv_func_mbrtowc_incomplete_state=yes >> config.cache &&
	    echo gl_cv_func_mbrtowc_sanitycheck=yes >> config.cache &&
	    echo gl_cv_func_mbrtowc_null_arg=yes >> config.cache &&
	    echo gl_cv_func_mbrtowc_retval=yes >> config.cache &&
	    echo gl_cv_func_mbrtowc_nul_retval=yes >> config.cache &&
	    echo gl_cv_func_wcrtomb_retval=yes >> config.cache &&
	    echo gl_cv_func_wctob_works=yes >> config.cache &&
	    popd || exit 1

	    configure_generic $1 $OPTS \
		--cache-file=config.cache &&
	    compile_generic || exit 1
	    ;;

	texinfo)
	    setup_generic $1 || exit 1

	    # need to set LDFLAGS like this so that texinfo's bootstrap
	    # native build can find our bootstrap-early stuff (ncurses,
	    # specifically)
	    autoreconf=yes LDFLAGS=-L$PREFIX_EARLY/lib \
		configure_generic $1 $OPTS || exit 1

	    pushd $builddir &&
	    make -j$JOBCOUNT -C tools/gnulib/lib &&
	    make -j$JOBCOUNT -C tools &&
	    make -j$JOBCOUNT &&
	    make install &&
	    popd || exit 1
	    ;;

	create-dirs)
	    mkdir -pv ${BABY}/{bin,boot,dev,{etc/,}opt,home,lib,mnt}
	    mkdir -pv $BABY/mnt/{cdrom,flash,floppy,crypt}
	    mkdir -pv ${BABY}/{proc,media/{floppy,cdrom},sbin,srv,sys}
	    mkdir -pv ${BABY}/var/{lock,log,mail,run,spool}
	    mkdir -pv ${BABY}/var/{opt,cache,lib/{misc,locate},local}
	    install -dv ${BABY}/root -m 0750
	    install -dv ${BABY}{/var,}/tmp -m 1777
	    mkdir -pv ${BABY}/usr/{,local/}{bin,include,lib,sbin,src}
	    mkdir -pv ${BABY}/usr/{,local/}share/{doc,info,locale,man}
	    mkdir -pv ${BABY}/usr/{,local/}share/{misc,terminfo,zoneinfo}
	    mkdir -pv ${BABY}/usr/{,local/}share/man/man{1,2,3,4,5,6,7,8}
	    for dir in ${BABY}/usr{,/local}; do
		ln -sv share/{man,doc,info} $dir 2>/dev/null
	    done
	    install -dv ${BABY}/usr/lib/locale

	    if [ -n "$BUILD64" ]; then
		mkdir -pv ${BABY}/lib64
		mkdir -pv ${BABY}/var/lib64/{misc,locate}
		mkdir -pv ${BABY}/usr/{,local/}lib64
		ln -sv ../lib/locale ${BABY}/usr/lib64 2>/dev/null
	    fi

	    echo done
	    ;;

	create-symlinks)
	    ln -sv $PREFIX_FINAL/bin/{bash,cat,echo,grep,pwd,sleep,stty,mount,umount} ${BABY}/bin 2>/dev/null
	    ln -sv $PREFIX_FINAL/sbin/{swapon,swapoff} $BABY/sbin 2>/dev/null
	    ln -sv $PREFIX_FINAL/bin/file ${BABY}/usr/bin 2>/dev/null
	    ln -sv $PREFIX_FINAL/lib/libgcc_s.so{,.1} ${BABY}/usr/lib 2>/dev/null
	    ln -sv $PREFIX_FINAL/lib/libstd*so* ${BABY}/usr/lib 2>/dev/null

	    if [ -n "$BUILD64" ]; then
		ln -sv $PREFIX_FINAL/lib64/libgcc_s.so{,.1} ${BABY}/usr/lib64 2>/dev/null
		ln -sv $PREFIX_FINAL/lib64/libstd*so* ${BABY}/usr/lib64 2>/dev/null
	    fi

	    # CLFS used bash for this one, but we're using busybox's ash
	    # instead.  in case we change this later, we just symlink our
	    # bootstrap sh symlink to our baby system's /bin/sh
	    ln -sv $PREFIX_FINAL/bin/sh ${BABY}/bin/sh 2>/dev/null

	    # we've got some more symlinks to make, because we use our
	    # boostrap busybox install in place of a bunch of extra packages
	    # that CLFS installs directly in the baby system.  the easiest
	    # thing to do here, is just make symlinks to all the busybox
	    # symlinks in the baby system by parsing busybox.links in
	    # busybox's builddir
	    for x in $(cat .build/busybox/busybox.links || exit 1); do
		ln -sv $PREFIX_FINAL$x $BABY$x 2>/dev/null
	    done
	    
	    echo done
	    ;;

	util-linux)
	    build_generic $1 $OPTS \
		--enable-login-utils \
		--disable-makeinstall-chown || exit 1
	    
	    # NOTES: CLFS excludes --prefix for this one, then has the make
	    #        install target use a DESTDIR, then move installed files
	    #        around by hand.  Not sure why.  I'm going to try to
	    #        make it work like the rest of the packages (i.e., use
	    #        --prefix=$PREFIX_FINAL combined with our /bootstrap
	    #        symlink) so that the install target works properly.
	    #
	    #pushd $builddir &&
	    #make -j$JOBCOUNT &&
	    #make install &&
	    #popd || exit 1

	    # FIXME: In addition to rearranging where all the files were
	    #        installed, the CLFS book also explicitly removes the
	    #        libtool libraries.  Not sure why this is done, and it
	    #        doesn't appear to be consistent with the handling of
	    #        the other packages.
	    #
	    # FIXME: Actually, I extended this to include the removal of
	    #        libmount.la
	    #rm -fv ${PREFIX_FINAL}/lib64/lib{blkid,uuid,mount}.la || exit 1
	    
	    echo done
	    ;;

	e2fsprogs)
	    setup_generic $1 || exit 1

	    if [ -n "$BUILD64" ]; then
	        # Change the library directory to lib64
		pushd $source &&
		sed -i.bak '/libdir.*=.*\/lib/s@/lib@/lib64@g' configure &&
		popd || exit 1
	    fi

	    # NOTE: PKG_CONFIG variable is used by e2fsprogs build scripts,
	    #       it's not something I added.
	    PKG_CONFIG=true configure_generic $1 $OPTS \
		--disable-fsck || exit 1

	    pushd $builddir &&
	    make -j$JOBCOUNT &&
	    make install &&
	    popd || exit 1

	    if [ -n "$BUILD64" ]; then
	        # NOTE: we need to undo the lib64 sed we did above, since we
	        #       could be working in-tree.
		pushd $source &&
		mv -v configure.bak configure &&
		popd || exit 1
	    fi

	    # NOTE: we don't compile/install the libblkid, libuuid, etc,
	    #       shared libs here.  I ran into cross-compilation problems
	    #       here, and they're not needed.  We'll build and install
	    #       them when we do our final e2fsprogs build later on.
	    #make install-libs || exit 1
	    
	    # make needed symlinks in baby
	    ln -sv $PREFIX_FINAL/sbin/{fsck.ext2,fsck.ext3,fsck.ext4,e2fsck} ${BABY}/sbin 2>/dev/null
	    echo done
	    ;;

	ntfs-3g)
	    # set build_in_tree because we have a bootstrap patch for
	    # configure.ac
	    build_in_tree=yes \
		patches=$toplevel/utils/bootstrap/patches/$1/*.patch \
		setup_generic $1 || exit 1

	    configure_generic $1 $OPTS \
		--disable-ldconfig \
		--exec-prefix=$PREFIX_FINAL || exit 1

	    pushd $builddir &&
	    make -j$JOBCOUNT &&
	    make DESTDIR=$BABY install &&
	    popd || exit 1

	    # FIXME: this might need extra setuid magic

	    ;;

	create-conf)
	    # this will handle config files for init, mdev, users/groups,
            # logfiles, login scripts, fstab, needed device nodes, etc
	    
	    # copy inittab and mdev.conf into etc
	    mkdir -vp $BABY/etc &&
	    cp -v config/inittab $BABY/etc &&
	    cp -v config/mdev.conf $BABY/etc || exit 1

	    # copy passwd and group files into etc
	    cp -v config/{passwd,group} $BABY/etc || exit 1
	    
	    # initialize login related log files.
	    #
	    # NOTE: busybox's init replacement might not use these, but if
	    #       switch over to the real sysvinit later on we'll want
	    #       these files
	    touch ${BABY}/var/run/utmp ${BABY}/var/log/{btmp,lastlog,wtmp} &&
	    chmod -v 664 ${BABY}/var/run/utmp ${BABY}/var/log/lastlog &&
	    chmod -v 600 ${BABY}/var/log/btmp || exit 1
	    
	    # copy profile into root's homedir
	    cp -v config/profile $BABY/root/.profile

	    # make sure these build variables are set
	    echo export BUILD32=\"$BUILD32\" >> $BABY/root/.profile
	    echo export BUILD64=\"$BUILD64\" >> $BABY/root/.profile
	    echo export MACHTYPE_TARGET32=\"$MACHTYPE_TARGET32\" >> $BABY/root/.profile
	    
	    # copy fstab into etc
	    #
	    # FIXME: this needs to have appropriate device name and
	    #        filesystem types inserted in it.
	    cp -v config/fstab $BABY/etc || exit 1

	    # NOTE: now touch /.ruckus_bootstrap_stage2, which causes init
	    #       to run the stage2 script on tty1 at boot
	    touch $BABY$RUCKUS_BOOTSTRAP_STAGE2_FILE || exit 1

	    ;;

	kernel)
	    setup_generic $1 || exit 1

	    if [ -n "$BUILD64" ]; then
		kernel_config=kernel-config-64bit
	    else
		kernel_config=kernel-config-32bit
	    fi

	    # get ready
	    MAKE="make KBUILD_SRC=$source -f $source/Makefile"
	    MAKE+=" ARCH=$ARCH_TARGET CROSS_COMPILE=$MACHTYPE_TARGET-"
	    pushd $builddir &&
	    $MAKE mrproper &&
	    popd || exit 1

	    # get set
	    cp -v config/$kernel_config $builddir/.config &&
	    pushd $builddir &&
	    $MAKE oldconfig &&
	    popd || exit 1

	    # NOTE: if you want to do a make menuconfig to tweak .config,
	    #       NCURSES_PREFIX has to be set to $PREFIX_FINAL.

	    # go!
	    pushd $builddir &&
	    $MAKE -j$JOBCOUNT_KBUILD &&
	    popd || exit 1

	    # now actually install the resulting kernel files
	    pushd $builddir &&
	    cp -v arch/$ARCH_TARGET/boot/bzImage $BABY/boot/vmlinuz-ruckus-bootstrap &&
	    cp -v System.map $BABY/boot/System.map-ruckus-bootstrap &&
	    cp -v .config $BABY/boot/config-ruckus-bootstrap &&
	    popd || exit 1
	    ;;

	bootscripts)
	    setup_generic $1 || exit 1

	    # install the scripts
	    pushd $builddir &&
	    make SOURCEDIR=$source -f $source/Makefile \
		DESTDIR=$BABY install-minimal &&
	    popd || exit 1

	    # groom them a bit
	    echo "UTC=1" > $BABY/etc/sysconfig/clock || exit 1

	    ;;

	fix-perms)
	    # this has to chown everything to root, so root permissions are
	    # required...

	    # NOTE: bootstrap-early already assumes sudo is configured for
	    #       the build user, so we'll silently use it here as well.
	    #
	    # NOTE: using multiple sudo calls here instead of a single one
	    #       just to make this easier to read/maintain.  assuming
	    #       sudo is configured to work correctly, the additional
	    #       overhead should be negligible.
	    sudo chown -Rc 0:0 $BABY &&
	    sudo chgrp -c 13 $BABY/var/{run/utmp,log/lastlog} || exit 1
	    if [ ! -c $BABY/dev/console ]; then
		sudo mknod -m 600 $BABY/dev/console c 5 1 || exit 1
	    fi
	    if [ ! -c $BABY/dev/null ]; then
		sudo mknod -m 666 $BABY/dev/null c 1 3 || exit 1
	    fi

	    # FIXME: double check that files that were setuid build_user are
	    #        now setuid root.  pretty sure this should be the case.
	    #        $PREFIX_FINAL/bin/{mount,umount}, for example, should
	    #        have mode of 4755
	    #
	    # NOTE: i was right to wory about setuid stuff.  looks like
	    #       somewhere along the line the setuid bit is getting
	    #       dropped.
	    setuid_list=""
	    setuid_list+=" /bootstrap/bin/mount"
	    setuid_list+=" /bootstrap/bin/umount"
	    setuid_list+=" /bootstrap/bin/busybox"
	    #setuid_list+=" /bootstrap/bin/ping" #bb
	    #setuid_list+=" /bootstrap/bin/ping6" #bb
	    #setuid_list+=" /bootstrap/bin/su" #bb
	    #setuid_list+=" /bootstrap/bin/at" #at
	    #setuid_list+=" /bootstrap/bin/chage" #shadow-utils
	    setuid_list+=" /bootstrap/bin/chfn"
	    setuid_list+=" /bootstrap/bin/chsh"
	    #setuid_list+=" /bootstrap/bin/crontab" #vixie-cron
	    #setuid_list+=" /bootstrap/bin/cu" #uucp
	    #setuid_list+=" /bootstrap/bin/gpasswd" #shadow-utils
	    setuid_list+=" /bootstrap/bin/newgrp"
	    #setuid_list+=" /bootstrap/bin/newrole" #policycoreutils
	    #setuid_list+=" /bootstrap/bin/passwd" #passwd #????
	    #setuid_list+=" /bootstrap/bin/Xorg" #xorg-server
	    #setuid_list+=" /bootstrap/bin/dumpcap" #wireshark
	    #setuid_list+=" /bootstrap/bin/fusermount" #fuse
	    setuid_list+=" /bootstrap/bin/ntfs-3g"
	    #setuid_list+=" /bootstrap/bin/rlogin" #inetutils
	    #setuid_list+=" /bootstrap/bin/rsh" #inetutils
	    #setuid_list+=" /bootstrap/sbin/ccreds_validate" #pam_ccreds
	    #setuid_list+=" /bootstrap/sbin/userhelper" #usermode
	    #setuid_list+=" /bootstrap/sbin/uucico" #uucp
	    #setuid_list+=" /bootstrap/sbin/uuxqt" #uucp
	    #setuid_list+=" /bootstrap/sbin/pam_timestamp_check" #pam
	    #setuid_list+=" /bootstrap/sbin/unix_chkpwd" #pam

	    for x in $setuid_list; do
		sudo chmod -c u+s $BABY$x || exit 1
	    done

	    ;;

	*)
	    build_generic $1 $OPTS || exit 1
	    ;;
    esac
}


packages=""
packages+=" gmp"
packages+=" mpfr"
packages+=" mpc"
packages+=" ppl"
packages+=" cloog-ppl"
packages+=" zlib"
packages+=" binutils"
packages+=" gcc"
packages+=" ncurses"

# FIXME: what about the ncurses patch...?
packages+=" busybox"

# NOTE: The following CLFS /tools packages are replaced by our busybox
#       package's equivilent tools
#
#packages+=" bash"
#packages+=" coreutils"
#packages+=" diffutils"
#packages+=" findutils" # missing locate...
#packages+=" gawk"
#packages+=" grep"
#packages+=" gzip"
#packages+=" patch"
#packages+=" sed"
#packages+=" tar"
#packages+=" vim"
#packages+=" xz-utils"

packages+=" bison"
packages+=" file"
packages+=" flex"

# FIXME: should gettext do ./autogen.sh --quick?
packages+=" gettext"

# FIXME: old patch not needed any more?
packages+=" m4"

# FIXME: git repo was down...
packages+=" make"

packages+=" texinfo"

# boot prep
#
# FIXME: hmm... not sure how i'm gonna do this...  CLFS builds a bunch of
#        basic utils, udev, and a stripped down kernel in the target
#        filesystem (ie, not /bootstrap) to make a bootable system.  Then
#        the next chapter in CLFS overwrites the installed files with the
#        final versions.  I guess this is doable...  The final system
#        packages are going to be packaged and installed with SRP, so we'll
#        have backup files all over the place that need to be remove.
#        Additionally, it would be nice if we could guarantee that there are
#        no bootstrap files left over.  Not sure how important that is,
#        though.
#
# FIXME: CLFS installs util-linux-ng at this point... we're using busybox as
#        a replacement and it's already installed in /bootstrap...  Do the
#        util-linux portions of it really need to be in the proper places?
#        or will /bootstrap do?  If /bootstrap isn't good enough for that
#        part of busybox, why not just install the whole darn thing in the
#        baby filesystem and let it all be overwritten by the busybox srp
#        later on...?
#
#        Actually, it might be simpler (at least for now) to install
#        symlinks for all the busybox binaries that got intsalled in
#        /bootstrap in /bin, /sbin, etc.
#
# FIXME: hey, busybox installs a udev replacement called 'mdev'... should we
#        use that instead of udev for our bootstrap boot?  we could either
#        not compile it later on (and make sure we remove the bootstrap
#        version), or just leave it and make sure out bootscripts use udev
#        intead.  using mdev instead of udev will probably not fly well down
#        the road if we really want our development desktops to be built on
#        top of our base-most image...  maybe the final dev image switches
#        over to udev.  or it might be simpler to use udev all the way
#        through... it can't add that much space
#
# NOTE: The following CLFS /tools packages (for booting) are currently
#       replaced by our busybox package... but we might want to actually
#       install the real versions.  util-linux-ng, for example, installs
#       pkg-config files that are searched for when building udev and/or hal
#       later on...  util-linux also provides us with crypto arguments for
#       losetup and mount.
#
#packages+=" sysvinit"
#packages+=" module-init-tools"
#packages+=" udev"

packages+=" create-dirs"

# NOTE: create-symlinks requires .build/busybox/busybox.links...
packages+=" create-symlinks"

# more boot packages
packages+=" util-linux"
packages+=" e2fsprogs"

# NOTE: We want this to be a pretty usable tiny bootstrap system, so we're
#       gonna include propper NTFS support here as well.  Now we'll have
#       support for ext2/3/4, vfat, and ntfs filesystems along with
#       losetup/mount support for the kernel's cryptoloop code.
packages+=" ntfs-3g"

# FIXME: mdev vs udev.  I suspect that if we base our desktop image on our
#        embedded image, parts of the desktop (GNOME, KDE, etc) are going to
#        require udev.  Modern versions of udev, however, don't appear to
#        play well with busybox's (or e2fsprogs') versions of blkid and
#        libuuid.  So, our final system might want to use util-linux-ng and
#        udev instead of busybox's mdev setup.  Not really sure how best to
#        handle this yet.  Anyway, it's probably simpler for our bootable
#        bootstrap system to just use busybox's mdev for now.
#packages+=" udev"

# NOTE: we're adding the testsuite tools here.  CLFS actually builds them
#       after booting up in the bootstrap system, but it works out better
#       for us if the bootstrap system is already completely ready to
#       rock-n-roll after the cross-compiling stage.
#packages=""
#packages+=" tcl"
#packages+=" expect"
#packages+=" dejagnu"
#packages+=" asdf"

# FIXME: considering including extra documentation tools in here as well, so
#        we don't have to wory about tools not existing yet in the bootstrap
#        environment.
#packages+=" tetex"
#packages+=" asdf"
#packages+=" xfig"
#packages+=" transfig"
#packages+=" netpbm"
#packages+=" latex2html"
#packages+=" graphviz"
#packages+=" doxygen"
#packages+=" ghostscript"
#packages+=" gtkdoc"

#packages+=" freetype"
#packages+=" docbook-xml"
#packages+=" docbook-xsl"
#packages+=" libxml2"
#packages+=" libxslt"
#packages+=" fontconfig"

# FIXME: also considering including openssh, zsh, and emacs, just to have an
#        even more comfortable environment.  this will increase the size and
#        time to build bootstrap, but will result in a very featureful
#        environment
# FIXME: does this need gnutls, or libgcrypt?
#packages+=" openssl"
#packages+=" openssh"
#packages+=" zsh"
#packages+=" emacs"

# this will handle config files for init, mdev, users/groups, logfiles,
# login scripts, fstab, needed device nodes, etc
packages+=" create-conf"

packages+=" kernel"
packages+=" bootscripts"

# FIXME: CLFS doesn't install grub at this point, but if we're going to
#        automate the whole build process (ie, automaticaly reboot into the
#        baby system), we'll need to not only install it on the system,
#        we'll have to actually install it in the MBR and configure it
#        appropriately...
#
# FIXME: some of this will have to be done as root, and there will have to
#        be some variable substitution in the grub.conf file
#
#packages+=" grub"
#packages+=" grub-mbr"
#packages+=" grub-conf"

# this stage will set the ownership of our baby filesystem to root instead
# of our build user
packages+=" fix-perms"



mkdir -p $PWD/.build

# now iterate through building for our target architecture using our
# cross-compiler.
for p in $packages; do
    echo "building final bootstrap package: $p"
    build $p || exit 1
done


# remove the cross-compiler and it's utilities
#
# NOTE: we're all done cross-compiling at this point and we're about to
#       reboot into our stage2 bootstrap environment using our new native
#       bootstrap compiler.
rm -rf $BABY/$PREFIX_CROSS || exit 1

# remove the bootstrap and bootstrap-cross symlinks
rm $PREFIX_CROSS $PREFIX_FINAL || exit 1

# make a backup of our progress.
#
# NOTE: this has to be done using tar because dump can only do incrementals
#       of an entire filesystem
#
# NOTE: using sudo for this to make sure our build user has appropriate
#       permissions to read all the files we're backing up
cp $BUILDROOT/baby-bootstrap-cross.snar \
    $BUILDROOT/baby-bootstrap-final.snar &&
sudo tar -vcf $BUILDROOT/baby-bootstrap-final.tar \
    -g $BUILDROOT/baby-bootstrap-final.snar -C $BABY . || exit 1

# FIXME: might be silly to do incremental tar above... we've chowned every
#        file since the last backup, so won't that flag every single file
#        has having to be included in this backup... which would kinda
#        defeat the whole purpose of incremental backups?

# NOTE: now we have to move $BABY/* to $INSTALLROOT.  we can either do a
#       globbing mv, or we can untar our baby*.tar files... depends on how
#       much we care about preserving the original contents of $BABY.
#       considering that we already have the tar files backing up BABY, we
#       might as well do a globbing mv
sudo mv $BABY/* $INSTALLROOT
sudo rmdir $BABY




# NOTE: The following CLFS final system packages are replaced by our busybox
#       package's equivilent tools
#
#packages+=" inetd"
#packages+=" less/more"
#packages+=" iproute2"


# NOTE: The following non-CLFS packages are also replaced by our busybox
#       setup
#
#packages+=" cpio"
#packages+=" rpm"
#packages+=" httpd"
#packages+=" dhcpd"
#packages+=" dhcpclient"
#pacakges+=" bind"




# hmm, might want full versions of these:
#
# fsck (from e2fsprogs? or coreutils?)
# mount, losetup (for cryptoloop)
# bash (for script compatability (maybe zsh can pretend to be bash?))
# sysvinit (for actual runlevels)
# udev (for HAL (and X and GNOME))
# bind
# dhcpd
# ntpd
# httpd
# inetd
# iproute
# less

#tar -vcf $BUILDROOT/baby-bootstrap-final.tar -g $BUILDROOT/baby.snar -C $BABY .
