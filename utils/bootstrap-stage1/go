#!/bin/bash

# should set toplevel via autoconf?
toplevel=$PWD/../..

# source our common variables and functions
. $toplevel/utils/bootstrap-early/functions


build()
{
    # set some common variables for all targets
    #
    # NOTE: We don't need any conditionals here because all supported build
    #       types use CLFS_TARGET for --host throughout the stage1 bootstrap.
    OPTS="--prefix=$PREFIX_FINAL"
    OPTS+=" --build=${CLFS_HOST}"
    OPTS+=" --host=${CLFS_TARGET}"

    # put libs in lib64 if we're building x86_64 multilib
    if [ -n "$BUILD32" ]; then
	OPTS+=" --libdir=$PREFIX_FINAL/lib64"
    fi

    OPTS+=" --disable-static"
    OPTS+=" --enable-shared"
    OPTS+=" --disable-nls"

    set_cross_compile

    case "$1" in
	gmp)
	    HOST_CC=gcc \
		build_generic $1 $OPTS \
		--enable-cxx || exit 1
	    ;;

	isl)
	    build_generic $1 $OPTS \
		--with-gmp-prefix=$PREFIX_FINAL || exit 1
	    ;;

        cloog)
	    build_generic $1 $OPTS \
		--with-gmp-prefix=$PREFIX_FINAL \
		--with-isl-prefix=$PREFIX_FINAL || exit 1
            ;;

	zlib)
	    # NOTE: zlib doesn't use autotools... despite the "configure"
	    #       script and autotool-ish configure flags.  This means it
	    #       doesn't support out-of-tree builds, and its build system
	    #       usage is just different enough to break our
	    #       configure_generic routine...
	    #
	    # FIXME: i think zlib is using CMake, which we should
	    #        perhaps build support for into our generic build
	    #        scripts... although, the real problem here is
	    #        configure failing if passed any invalid args...
	    build_in_tree=yes setup_generic $1 || exit 1

	    # NOTE: It also fails to configure if any unknown flags are passed
	    #       in, so we can't use our generic OPTS variable...
	    OPTS="--prefix=$PREFIX_FINAL"

	    if [ -n "$BUILD32" ]; then
		OPTS+=" --libdir=$PREFIX_FINAL/lib64"
	    fi

	    pushd $builddir &&
	    ./configure $OPTS &&
	    popd || exit 1

	    compile_generic $1 || exit 1
	    ;;

	binutils)
	    # FIXME: CLFS 20130924 has a sed statement to fix build problems
	    #        on host systems w/ texinfo 5.x.  My boxes hav 4.x, so I
	    #        don't need it for now, but we should add this check to
	    #        configure.  Either add the sed statement here
	    #        universally and conditionally build texinfo 5.x in
	    #        bootstrap-early or have the configure script enable the
	    #        sed statement only if host system has texinfo 5.x.
	    #        Whichever is easier.
            #
            # FIXME: If we do it, don't forget to un-sed at the end as we might
            #        be building in-tree or referencing a git checkout...
	    #
	    # sed -i -e 's/@colophon/@@colophon/' \
	    #     -e 's/doc@cygnus.com/doc@@cygnus.com/' bfd/doc/bfd.texinfo

            # add 64bit support if desired
            if [ -n "$BUILD64" ]; then
                OPTS+=" --enable-64-bit-bfd"
            fi
            # disable multilib if we're building pure 32 or 64 bit
            if [ -z "$BUILD32" ]; then
                OPTS+=" --disable-multilib"
                OPTS+=" --with-lib-path=$PREFIX_FINAL/lib"
            else
                OPTS+=" --with-lib-path=$PREFIX_FINAL/lib64:$PREFIX_FINAL/lib"
            fi

	    setup_generic $1 &&
	    configure_generic $1 $OPTS \
                --target=${CLFS_TARGET} || exit 1

	    pushd $builddir &&
	    make configure-host &&
	    make -j$JOBCOUNT &&
	    make install &&
	    popd || exit 1
	    ;;

	gcc)
	    setup_generic gcc || exit 1

            # apply the CLFS specs patch
	    if [ ! -f $builddir/Makefile ]; then
                # NOTE: gcc has a different patch for pure64 than for x86 or
                #       x86_64 multilib.
                if [ -n "$BUILD64" -a -z "$BUILD32" ]; then
                    p=$toplevel/utils/bootstrap-cross/patches/gcc/*-pure64_specs-*.patch
                else
                    p=$toplevel/utils/bootstrap-cross/patches/gcc/*-specs-*.patch
                fi
		pushd $source &&
		patch -Np1 < $p || exit 1
		popd
	    fi

	    # make GCC look in PREFIX_FINAL (i.e., not the host sys)
            #
            # FIXME: This is only ok because we use a dist tarball for gcc's
            #        sources... if we ever swtich to a git tree, we'll need to
            #        either make a copy of the source tree or undo this at the
            #        end...
            pushd $source
	    echo "#undef STANDARD_STARTFILE_PREFIX_1" >> gcc/config/linux.h
            echo "#define STANDARD_STARTFILE_PREFIX_1 \"$PREFIX_FINAL/lib/\"" >> gcc/config/linux.h
	    echo "#undef STANDARD_STARTFILE_PREFIX_2" >> gcc/config/linux.h
            echo "#define STANDARD_STARTFILE_PREFIX_2 \"\"" >> gcc/config/linux.h
            popd

            # Apply a sed subsitution that will suppress the execution
            # of the fixincludes script:
            #
            # FIXME: same here, we could need to undo this
            pushd $source &&
            cp -v gcc/Makefile.in{,.orig} &&
            sed 's@\./fixinc\.sh@-c true@' gcc/Makefile.in.orig > gcc/Makefile.in &&
            popd || exit 1

            # extra tweaks
            if [ -n "$BUILD32" ]; then
                # x86_64 multilib
                OPTS+=" --libexecdir=$PREFIX_FINAL/lib64"
            else
                # x86_64 pure or x86
                OPTS+=" --disable-multilib"
            fi

            configure_generic $1 $OPTS \
                --target=${CLFS_TARGET} \
                --with-local-prefix=$PREFIX_FINAL \
                --enable-long-long --enable-c99 --enable-shared --enable-threads=posix \
                --disable-nls --enable-__cxa_atexit --enable-languages=c,c++ \
                --disable-libstdcxx-pch --enable-cloog-backend=isl --with-gmp=$PREFIX_FINAL \
                --with-mpfr=$PREFIX_FINAL --with-mpc=$PREFIX_FINAL --with-isl=$PREFIX_FINAL \
                --disable-isl-version-check --with-cloog=$PREFIX_FINAL --with-system-zlib \
                --with-native-system-header-dir=$PREFIX_FINAL/include --disable-libssp \
                --disable-install-libiberty  --enable-libstdcxx-time \
                --enable-checking=release || exit 1

	    pushd $builddir || exit 1
	    #  The following will prevent GCC from looking in the wrong
	    #  directories for headers and libraries
            cp -v Makefile{,.orig} &&
            sed "/^HOST_\(GMP\|ISL\|CLOOG\)\(LIBS\|INC\)/s:$PREFIX_FINAL:$PREFIX_CROSS:g" \
                Makefile.orig > Makefile || exit 1

	    make -j$JOBCOUNT AS_FOR_TARGET="${AS}" LD_FOR_TARGET="${LD}" &&
	    make install &&
	    popd || exit 1
	    ;;

	ncurses)
            # FIXME: There is also a CLFS patch to fix some bash-related
            #        problems, but I haven't run into the bug it fixes, so I've
            #        left it out for now.
	    build_generic $1 $OPTS \
                --without-debug --without-ada \
                --enable-overwrite --with-build-cc=gcc || exit 1
		;;

	busybox)
	    setup_generic $1 || exit 1

	    # get ready
	    MAKE="make KBUILD_SRC=$source -f $source/Makefile"
	    MAKE+=" ARCH=$ARCH_TARGET CROSS_COMPILE=$CLFS_TARGET-"
	    pushd $builddir &&
	    $MAKE mrproper &&
	    popd || exit 1

	    # create .config
	    #
            # FIXME: update all these comments once we have this all
            #        straightened out.  ;-)
            #
	    # NOTE: planning on using the busybox variants of everything
	    #       possible except for programs provided by the following
	    #       packages:
	    #
	    #       - e2fsprogs (findfs, fsck.ext2, mkfs.ext2, etc)
	    #       - util-linux (blkid, mount, losetup, agetty, etc)
	    #       - dhcpd, dnsd (dnsmasq instead)
	    #
	    # NOTE: if you want to do a make menuconfig to tweak .config,
	    #       NCURSES_PREFIX has to be set to $PREFIX_FINAL in order
	    #       to use the ncurses installed via bootstrap-early (and
	    #       our KBUILD patch needs to be applied)
            cp -v config/bb-config $builddir/.config &&
	    pushd $builddir &&
	    $MAKE oldconfig &&
            popd || exit 1

	    # build
	    #
	    # FIXME: current embedded CLFS book doesn't set ARCH here, but
	    #        it does have a config patch...
            pushd $builddir &&
	    $MAKE -j$JOBCOUNT_KBUILD &&
	    popd || exit 1

	    # install
            pushd $builddir &&
	    $MAKE CONFIG_PREFIX=$PREFIX_FINAL install &&
            popd || exit 1

	    # NOTE: busybox binary is setuid root later on under
	    #       fix-perms

	    # FIXME: there are a bunch of config files in
	    #        $source/examples that we might want installed too
	    #cp $source/examples/depmod.pl $PREFIX_FINAL/bin &&
	    #chmod 755 $PREFIX_FINAL/bin/depmod.pl|| exit 1

	    ;;

        bison)
            setup_generic $1 || exit 1

            # Apply a sed which disables the building of bison.help
            # when cross-compiling.
            #
            # NOTE: In $source!  This means we either have to undo
            #       this at the end or make a copy of the source tree
            #       (because bison is a git submodule in src/)
            pushd $source &&
            [ -f Makefile.in.orig ] && exit 1
            cp -v Makefile.in{,.orig} &&
            sed '/bison.help:/s/^/# /' Makefile.in.orig > Makefile.in &&
            popd || exit 1

            # The configure script does not determine the correct
            # value for the following. Set the value manually:
            #
            # NOTE: In $builddir!!!
            pushd $builddir
            echo "ac_cv_prog_lex_is_flex=yes" > config.cache
            popd

            M4=m4 configure_generic $1 $OPTS \
                --cache-file=config.cache &&
            compile_generic $1 || exit 1

            # revert the Makefile.in changes
            pushd $source &&
            mv Makefile.in{.orig,} &&
            popd || exit 1
            ;;

	flex)
	    setup_generic $1 || exit 1

	    # When cross-compiling, the configure script does not determine
	    # the correct values for the following, so we'll set the values
	    # manually
	    pushd $builddir &&
	    echo ac_cv_func_malloc_0_nonnull=yes > config.cache &&
	    echo ac_cv_func_realloc_0_nonnull=yes >> config.cache &&
	    popd || exit 1

            M4=m4 configure_generic $1 $OPTS \
		--cache-file=config.cache || exit 1

            # NOTE: We can't let flex build manpage, because help2man tries to
            #       run ../flex --help, which is cross-compiled for a
            #       non-native architecture.  The following sed statement
            #       disables manpage generation for now.
            #
            # NOTE: CLFS doesn't run into this because they use dist tarballs
            #       as apposed to git trees.
	    #
	    # FIXME: Flex is still failing during doc on my avlinux
	    #        box... not sure why...
            pushd $builddir &&
            sed -i 's|^dist_man_MANS|#dist_man_MANS|' doc/Makefile &&
            popd || exit 1

	    compile_generic $1 || exit 1
	    ;;

	gettext)
	    setup_generic $1 || exit

	    # Only the programs in the gettext-tools directory need to be
	    # installed for the temp-system
	    source=$source/gettext-tools
	    configure=$source/configure
	    echo source: $source
	    echo configure: $configure

	    # When cross-compiling the Gettext configure script assumes we
	    # don't have a working wcwidth when we do. The following will
	    # fix possible compilation errors because of this assumption
	    pushd $builddir &&
	    echo "gl_cv_func_wcwidth_works=yes" > config.cache &&
	    popd || exit 1

	    # FIXME: We've got --enable-shared --disable-static in
	    #        $OPTS... Does disabling shard now re-enable static?
	    configure_generic $1 $OPTS \
		--disable-shared \
		--cache-file=config.cache || exit 1

	    pushd $builddir &&
	    make -j$JOBCOUNT -C gnulib-lib &&
	    make -j$JOBCOUNT -C src msgfmt &&
	    cp -v src/msgfmt $PREFIX_FINAL/bin &&
	    popd || exit 1
	    ;;

	m4)
	    setup_generic $1 || exit 1

	    # Configure can not properly determine the results of the
	    # following tests
	    pushd $builddir &&
	    echo gl_cv_func_btowc_eof=yes > config.cache &&
	    echo gl_cv_func_mbrtowc_incomplete_state=yes >> config.cache &&
	    echo gl_cv_func_mbrtowc_sanitycheck=yes >> config.cache &&
	    echo gl_cv_func_mbrtowc_null_arg=yes >> config.cache &&
	    echo gl_cv_func_mbrtowc_retval=yes >> config.cache &&
	    echo gl_cv_func_mbrtowc_nul_retval=yes >> config.cache &&
	    echo gl_cv_func_wcrtomb_retval=yes >> config.cache &&
	    echo gl_cv_func_wctob_works=yes >> config.cache &&
	    popd || exit 1

	    configure_generic $1 $OPTS \
		--cache-file=config.cache &&
	    compile_generic || exit 1
	    ;;

	texinfo)
	    # We have a configure.ac patch and need to force an autoreconf
	    autoreconf=yes \
		setup_generic $1 || exit 1

	    # We need to set LDFLAGS like this so that texinfo's build can
	    # find our bootstrap-early stuff (ncurses, specifically).
	    LDFLAGS=-L$PREFIX_EARLY/lib \
		configure_generic $1 $OPTS || exit 1

	    pushd $builddir &&
	    make -j$JOBCOUNT -C tools/gnulib/lib &&
	    make -j$JOBCOUNT -C tools &&
	    make -j$JOBCOUNT &&
	    make install &&
	    popd || exit 1
	    ;;

	create-dirs)
	    mkdir -pv ${CLFS}/{bin,boot,dev,{etc/,}opt,home,lib,mnt}
	    mkdir -pv ${CLFS}/{proc,media/{floppy,cdrom},run/{,shm},sbin,srv,sys}
	    mkdir -pv ${CLFS}/var/{lock,log,mail,spool}
	    mkdir -pv ${CLFS}/var/{opt,cache,lib/{misc,locate},local}
	    install -dv ${CLFS}/root -m 0750
	    install -dv ${CLFS}{/var,}/tmp -m 1777
	    mkdir -pv ${CLFS}/usr/{,local/}{bin,include,lib,sbin,src}
	    mkdir -pv ${CLFS}/usr/{,local/}share/{doc,info,locale,man}
	    mkdir -pv ${CLFS}/usr/{,local/}share/{misc,terminfo,zoneinfo}
	    mkdir -pv ${CLFS}/usr/{,local/}share/man/man{1,2,3,4,5,6,7,8}
	    for dir in ${CLFS}/usr{,/local}; do
		ln -sv share/{man,doc,info} $dir
	    done

	    if [ -n "$BUILD32" ]; then
		# multilib dirs
		mkdir -pv ${CLFS}/lib64
		mkdir -pv ${CLFS}/var/lib64/{misc,locate}
		mkdir -pv ${CLFS}/usr/{,local/}lib64
		install -dv ${CLFS}/usr/lib/locale
		ln -sv ../lib/locale ${CLFS}/usr/lib64
	    fi

	    # I like these too much to leave out...
	    mkdir -pv $CLFS/mnt/{cdrom,flash,floppy,crypt}

	    echo done
	    ;;

	create-symlinks)

            # FIXME: take the 2>/dev/null off all these lines to more closely
            #        match CLFS, unless there was a really good reason I added
            #        them...
            #
            # FIXME: This freshly copy-n-pasted (and then variable substituted)
            #        block of ln commands from 20130924 differs from what I had
            #        before:
            #
            #        1. It no longer creates /bin/{mount,umount} or
            #           /sbin/{swapon,swapoff}.
            #
            #        2. It now creates /bin/{login,passwd},
            #           /sbin/{agetty,blkid}, and /var/run.

	    ln -sv $PREFIX_FINAL/bin/{bash,cat,echo,grep,login,passwd,pwd,sleep,stty} ${CLFS}/bin 2>/dev/null
	    ln -sv $PREFIX_FINAL/bin/file ${CLFS}/usr/bin 2>/dev/null
	    ln -sv $PREFIX_FINAL/sbin/{agetty,blkid} ${CLFS}/sbin 2>/dev/null
	    ln -sv $PREFIX_FINAL/lib/libgcc_s.so{,.1} ${CLFS}/usr/lib 2>/dev/null

	    ln -sv $PREFIX_FINAL/lib/libstd*so* ${CLFS}/usr/lib 2>/dev/null

	    ln -sv ../run ${CLFS}/var/run

	    if [ -n "$BUILD32" ]; then
		# x86_64 multilib only
		ln -sv $PREFIX_FINAL/lib64/libgcc_s.so{,.1} ${CLFS}/usr/lib64 2>/dev/null
		ln -sv $PREFIX_FINAL/lib64/libstd*so* ${CLFS}/usr/lib64 2>/dev/null

	    elif [ -n "$BUILD64" ]; then
		# x86_64 pure only

		# To enable some c++ tests in the Glibc and Binutils testsuites
		# to link, create a directory and make some symbolic links:
		mkdir -pv ${CLFS}/usr/lib64
		ln -sv $PREFIX_FINAL/lib/libstd*so* ${CLFS}/usr/lib64 2>/dev/null

	    fi

	    # CLFS used bash for this one, but we're using busybox's ash
	    # instead.  in case we change this later, we just symlink our
	    # bootstrap sh symlink to our baby system's /bin/sh
	    ln -sv $PREFIX_FINAL/bin/sh ${CLFS}/bin/sh 2>/dev/null

	    # we've got some more symlinks to make, because we use our
	    # boostrap busybox install in place of a bunch of extra packages
	    # that CLFS installs directly in the baby system.  the easiest
	    # thing to do here, is just make symlinks to all the busybox
	    # symlinks in the baby system by parsing busybox.links in
	    # busybox's builddir
	    for x in $(cat .build/busybox/busybox.links || exit 1); do
		ln -sv $PREFIX_FINAL$x $CLFS$x 2>/dev/null
	    done
	    
	    echo done
	    ;;

	e2fsprogs)
	    setup_generic $1 || exit 1

	    if [ -n "$BUILD32" ]; then
		# multilib only

		# Make sure the libraries get installed to /tools/lib64
		#
		# NOTE: In $source!  Don't forget to undo this when we're
		#	done...
		pushd $source &&
		[ -f configure.orig ] && exit 1
		cp -v configure{,.orig} &&
		sed -e "/libdir=.*\/lib/s@/lib@/lib64@g" configure.orig > configure &&
		popd || exit 1
	    fi

	    # NOTE: PKG_CONFIG variable is used by e2fsprogs build scripts,
	    #	    it's not something I added.
	    #
	    # FIXME: New command from CLFS 20130924 disables libblkid, libuuid,
	    #	     and uuid... not sure how that will play with busybox's
	    #	     mdev (as apposed to eudev)...
	    #
	    # FIXME: Actually, last time around I chose to not build these
	    #	     because they weren't cross-compiling correctly... so it
	    #	     must be ok?
	    PKG_CONFIG=true \
		configure_generic $1 $OPTS \
		--enable-elf-shlibs \
		--disable-libblkid --disable-libuuid --disable-fsck \
		--disable-uuidd || exit 1

	    # set some extra variables for building
	    tmp_OPTS="LIBUUID=\"-luuid\" STATIC_LIBUUID=\"-luuid\""
	    tmp_OPTS+=" LIBBLKID=\"-lblkid\" STATIC_LIBBLKID=\"-lblkid\""

	    if [ -n "$BUILD32" ]; then
		# x86_64 multilib only
		tmp_OPTS+=" LDFLAGS=\"-Wl,-rpath,$PREFIX_FINAL/lib64\""

	    elif [ -n "$BUILD64" ]; then
		# x86_64 pure only
		tmp_OPTS+=" LDFLAGS=\"-Wl,-rpath,$PREFIX_FINAL/lib\""
	    fi

	    pushd $builddir &&
	    make -j$JOBCOUNT $tmp_OPTS &&
	    make install &&
	    make install-libs &&
	    ln -sv $PREFIX_FINAL/sbin/{fsck.ext2,fsck.ext3,fsck.ext4,e2fsck} ${CLFS}/sbin &&
	    popd || exit 1

	    if [ -n "$BUILD32" ]; then
		# NOTE: we need to undo the lib64 sed we did above, since we
		#	could be working in-tree.
		pushd $source &&
		mv -v configure{.orig,} &&
		popd || exit 1
	    fi

	    echo done
	    ;;

	ntfs-3g)
	    # set build_in_tree because we have a bootstrap patch for
	    # configure.ac
	    build_in_tree=yes \
		patches=$toplevel/utils/bootstrap-stage1/patches/$1/*.patch \
		setup_generic $1 || exit 1

	    configure_generic $1 $OPTS \
		--disable-ldconfig \
		--exec-prefix=$PREFIX_FINAL || exit 1

	    pushd $builddir &&
	    make -j$JOBCOUNT &&
	    make DESTDIR=$CLFS install &&
	    popd || exit 1

	    # FIXME: this might need extra setuid magic

	    ;;

	create-conf)
	    # this will handle config files for init, mdev, users/groups,
            # logfiles, login scripts, fstab, needed device nodes, etc
	    
	    # copy inittab and mdev.conf into etc
	    mkdir -vp $CLFS/etc &&
	    cp -v config/inittab $CLFS/etc &&
	    cp -v config/mdev.conf $CLFS/etc || exit 1

	    # copy passwd and group files into etc
	    cp -v config/{passwd,group} $CLFS/etc || exit 1
	    
	    # initialize login related log files.
	    #
	    # NOTE: busybox's init replacement might not use these, but if
	    #       switch over to the real sysvinit later on we'll want
	    #       these files
	    touch ${CLFS}/var/run/utmp ${CLFS}/var/log/{btmp,lastlog,wtmp} &&
	    chmod -v 664 ${CLFS}/var/run/utmp ${CLFS}/var/log/lastlog &&
	    chmod -v 600 ${CLFS}/var/log/btmp || exit 1
	    
	    # copy profile into root's homedir
	    cp -v config/profile $CLFS/root/.profile

	    # make sure these build variables are set
	    echo export BUILD32=\"$BUILD32\" >> $CLFS/root/.profile
	    echo export BUILD64=\"$BUILD64\" >> $CLFS/root/.profile
	    # FIXME: what about CLFS_HOST and CLFS_TARGET?  CLFS_TARGET is no
	    #        longer needed, probably the same for CLFS_HOST.  TARGET32
	    #        is still needed when we go to build 32bit libs.
	    echo export CLFS_TARGET32=\"$CLFS_TARGET32\" >> $CLFS/root/.profile
	    
	    # copy fstab into etc
	    #
	    # FIXME: this needs to have appropriate device name and
	    #        filesystem types inserted in it.
	    cp -v config/fstab $CLFS/etc || exit 1

	    # NOTE: now touch /.ruckus_bootstrap_stage2, which causes init
	    #       to run the stage2 script on tty1 at boot
	    touch $CLFS$RUCKUS_BOOTSTRAP_STAGE2_FILE || exit 1

	    ;;

	kernel)
            # FIXME: I should redo the kernel configs, perhaps using ruckusrd
            #        for initramfs...
            #
            #        Don't forget, this is the cross-compiled bare-bones kernel
            #        just to get us booted up...  if we can live w/out modules,
            #        that would be great.  That being said, it would be nice to
            #        be kinda distro-kernel-ish so that most people with most
            #        hardware can just use our bootstrap config... we'll see.

	    setup_generic $1 || exit 1

	    if [ -n "$BUILD64" ]; then
		kernel_config=kernel-config-64bit
	    else
		kernel_config=kernel-config-32bit
	    fi

	    # get ready
	    MAKE="make KBUILD_SRC=$source -f $source/Makefile"
	    MAKE+=" ARCH=$ARCH_TARGET CROSS_COMPILE=$CLFS_TARGET-"
	    pushd $builddir &&
	    $MAKE mrproper &&
	    popd || exit 1

	    # get set
	    cp -v config/$kernel_config $builddir/.config &&
	    pushd $builddir &&
	    $MAKE oldconfig &&
	    popd || exit 1

	    # NOTE: if you want to do a make menuconfig to tweak .config,
	    #       NCURSES_PREFIX has to be set to $PREFIX_FINAL.

	    # go!
	    pushd $builddir &&
	    $MAKE -j$JOBCOUNT_KBUILD &&
	    popd || exit 1

            # FIXME: $MAKE INSTALL_MOD_PATH=${CLFS} modules_install

            # FIXME: $MAKE INSTALL_FW_PATH=${CLFS}/lib/firmware firmware_install

	    # now actually install the resulting kernel files
	    pushd $builddir &&
	    cp -v arch/$ARCH_TARGET/boot/bzImage $CLFS/boot/vmlinuz-ruckus-bootstrap &&
	    cp -v System.map $CLFS/boot/System.map-ruckus-bootstrap &&
	    cp -v .config $CLFS/boot/config-ruckus-bootstrap &&
	    popd || exit 1
	    ;;

	bootscripts)
	    setup_generic $1 || exit 1

	    # install the scripts
	    pushd $builddir &&
	    make SOURCEDIR=$source -f $source/Makefile \
		DESTDIR=$CLFS install-minimal &&
	    popd || exit 1

	    # groom them a bit
	    echo "UTC=1" > $CLFS/etc/sysconfig/clock || exit 1

	    ;;

	syslinux)
            # FIXME: should move this to stage2 and early
            #
            # FIXME: same with ruckusrd

	    build_in_tree=yes setup_generic $1 || exit 1

	    # NOTE: devel.mk uses sets development-only debug flags,
	    #       which may or may not cause the build to fail
	    #       (e.g., -Wno-clobbered doesn't seem to work with
	    #       gcc-4.5.2
	    rm -f $builddir/mk/devel.mk || exit 1

	    pushd $builddir &&
	    make CROSS_COMPILE=$CLFS_TARGET- -j$JOBCOUNT &&
	    install -m 755 extlinux/extlinux $PREFIX_CROSS/bin &&
	    install -d -m 755 $PREFIX_CROSS/syslinux &&
	    install -m 644 mbr/mbr.bin $PREFIX_CROSS/syslinux &&
	    popd || exit 1
	    ;;

	fix-perms)
	    # this has to chown everything to root, so root permissions are
	    # required...

	    # NOTE: bootstrap-early already assumes sudo is configured for
	    #       the build user, so we'll silently use it here as well.
	    #
	    # NOTE: using multiple sudo calls here instead of a single one
	    #       just to make this easier to read/maintain.  assuming
	    #       sudo is configured to work correctly, the additional
	    #       overhead should be negligible.
	    sudo chown -Rc 0:0 $CLFS &&
	    sudo chgrp -c 13 $CLFS/var/{run/utmp,log/lastlog} || exit 1
	    if [ ! -c $CLFS/dev/console ]; then
		sudo mknod -m 600 $CLFS/dev/console c 5 1 || exit 1
	    fi
	    if [ ! -c $CLFS/dev/null ]; then
		sudo mknod -m 666 $CLFS/dev/null c 1 3 || exit 1
	    fi

	    # FIXME: double check that files that were setuid build_user are
	    #        now setuid root.  pretty sure this should be the case.
	    #        $PREFIX_FINAL/bin/{mount,umount}, for example, should
	    #        have mode of 4755
	    #
	    # NOTE: i was right to wory about setuid stuff.  looks like
	    #       somewhere along the line the setuid bit is getting
	    #       dropped.
	    setuid_list=""
	    setuid_list+=" /tools/bin/mount"
	    setuid_list+=" /tools/bin/umount"
	    setuid_list+=" /tools/bin/busybox"
	    #setuid_list+=" /tools/bin/ping" #bb
	    #setuid_list+=" /tools/bin/ping6" #bb
	    #setuid_list+=" /tools/bin/su" #bb
	    #setuid_list+=" /tools/bin/at" #at
	    #setuid_list+=" /tools/bin/chage" #shadow-utils
	    setuid_list+=" /tools/bin/chfn"
	    setuid_list+=" /tools/bin/chsh"
	    #setuid_list+=" /tools/bin/crontab" #vixie-cron
	    #setuid_list+=" /tools/bin/cu" #uucp
	    #setuid_list+=" /tools/bin/gpasswd" #shadow-utils
	    setuid_list+=" /tools/bin/newgrp"
	    #setuid_list+=" /tools/bin/newrole" #policycoreutils
	    #setuid_list+=" /tools/bin/passwd" #passwd #????
	    #setuid_list+=" /tools/bin/Xorg" #xorg-server
	    #setuid_list+=" /tools/bin/dumpcap" #wireshark
	    #setuid_list+=" /tools/bin/fusermount" #fuse
	    setuid_list+=" /tools/bin/ntfs-3g"
	    #setuid_list+=" /tools/bin/rlogin" #inetutils
	    #setuid_list+=" /tools/bin/rsh" #inetutils
	    #setuid_list+=" /tools/sbin/ccreds_validate" #pam_ccreds
	    #setuid_list+=" /tools/sbin/userhelper" #usermode
	    #setuid_list+=" /tools/sbin/uucico" #uucp
	    #setuid_list+=" /tools/sbin/uuxqt" #uucp
	    #setuid_list+=" /tools/sbin/pam_timestamp_check" #pam
	    #setuid_list+=" /tools/sbin/unix_chkpwd" #pam

	    for x in $setuid_list; do
		sudo chmod -c u+s $CLFS$x || exit 1
	    done

	    ;;

	*)
	    build_generic $1 $OPTS || exit 1
	    ;;
    esac
}


packages=""
packages+=" gmp"
packages+=" mpfr"
packages+=" mpc"
packages+=" isl"
packages+=" cloog"
packages+=" zlib"
packages+=" binutils"
packages+=" gcc"
packages+=" ncurses"

# FIXME: what about the ncurses patch...?
packages+=" busybox"

# NOTE: The following CLFS /tools packages are replaced by our busybox
#       package's equivilent tools
#
#packages+=" bash"
#packages+=" bzip2"
#packages+=" coreutils"
#packages+=" diffutils"
#packages+=" findutils" # still missing locate...? do i care?
#packages+=" gawk"
#packages+=" grep"
#packages+=" gzip"
#packages+=" patch"
#packages+=" sed"
#packages+=" tar"
#packages+=" vim"
#packages+=" xz-utils"
#
# NOTE: The busybox xz applet(s) only support decompressing... If we need to
#       compress with xz from the bootstrap system, we'll need to install the
#       real xz package.  However, this does mean we're perfectly capable of
#       untarring tar.xz files transparently using busybox.

packages+=" bison"

packages+=" file"
packages+=" flex"

packages+=" gettext"

packages+=" m4"
packages+=" make"

packages+=" texinfo"

# boot prep
#
# FIXME: hmm... not sure how i'm gonna do this...  CLFS builds a bunch of
#        basic utils, udev, and a stripped down kernel in the target
#        filesystem (ie, not /tools) to make a bootable system.  Then
#        the next chapter in CLFS overwrites the installed files with the
#        final versions.  I guess this is doable...  The final system
#        packages are going to be packaged and installed with SRP, so we'll
#        have backup files all over the place that need to be remove.
#        Additionally, it would be nice if we could guarantee that there are
#        no bootstrap files left over.  Not sure how important that is,
#        though.
#
# FIXME: CLFS installs util-linux-ng at this point... we're using busybox as
#        a replacement and it's already installed in /tools...  Do the
#        util-linux portions of it really need to be in the proper places?
#        or will /tools do?  If /tools isn't good enough for that
#        part of busybox, why not just install the whole darn thing in the
#        baby filesystem and let it all be overwritten by the busybox srp
#        later on...?
#
#        Actually, it might be simpler (at least for now) to install
#        symlinks for all the busybox binaries that got intsalled in
#        /tools in /bin, /sbin, etc.
#
# FIXME: hey, busybox installs a udev replacement called 'mdev'... should we
#        use that instead of udev for our bootstrap boot?  we could either
#        not compile it later on (and make sure we remove the bootstrap
#        version), or just leave it and make sure out bootscripts use udev
#        intead.  using mdev instead of udev will probably not fly well down
#        the road if we really want our development desktops to be built on
#        top of our base-most image...  maybe the final dev image switches
#        over to udev.  or it might be simpler to use udev all the way
#        through... it can't add that much space
#
# NOTE: The following CLFS /tools packages (for booting) are currently
#       replaced by our busybox package... but we might want to actually
#       install the real versions.  util-linux-ng, for example, installs
#       pkg-config files that are searched for when building udev and/or hal
#       later on...  util-linux also provides us with crypto arguments for
#       losetup and mount.
#
#packages+=" sysvinit"
#packages+=" module-init-tools"
#packages+=" udev"

packages+=" create-dirs"

# NOTE: create-symlinks requires .build/busybox/busybox.links...
packages+=" create-symlinks"

# more boot packages
#
# FIXME: am i building util-linux or using busybox applets?  i might want
#        cryptoloop and i might want -o remount.  transparent -o loop might
#        have diff behavior.
#
#packages+=" util-linux" # for transparent cryptoloop mounting?
packages+=" e2fsprogs" # for bulletproof ext2/3/4 support

# NOTE: We want this to be a pretty usable tiny bootstrap system, so we're
#       gonna include propper NTFS support here as well.  Now we'll have
#       support for ext2/3/4, vfat, and ntfs filesystems along with
#       losetup/mount support for the kernel's cryptoloop code.
#
# FIXME: actually, the cryptoloop stuff in the latest util-linux is broken.
#        it's been deprecated for years in favor of dm-crypt, so i doubt it's
#        going to be fixed...  if the transparent cryptoloop mount usage was
#        the only reason i went with the real util-linux here, i should
#        reconsider.
packages+=" ntfs-3g"

# FIXME: mdev vs udev.  I suspect that if we base our desktop image on our
#        embedded image, parts of the desktop (GNOME, KDE, etc) are going to
#        require udev.  Modern versions of udev, however, don't appear to
#        play well with busybox's (or e2fsprogs') versions of blkid and
#        libuuid.  So, our final system might want to use util-linux-ng and
#        udev instead of busybox's mdev setup.  Not really sure how best to
#        handle this yet.  Anyway, it's probably simpler for our bootable
#        bootstrap system to just use busybox's mdev for now.
#packages+=" udev"

# this will handle config files for init, mdev, users/groups, logfiles,
# login scripts, fstab, needed device nodes, etc
packages+=" create-conf"

packages+=" kernel"
packages+=" bootscripts"

# FIXME: CLFS doesn't install grub at this point, but if we're going to
#        automate the whole build process (ie, automaticaly reboot into the
#        baby system), we'll need to not only install it on the system,
#        we'll have to actually install it in the MBR and configure it
#        appropriately...
#
# FIXME: some of this will have to be done as root, and there will have to
#        be some variable substitution in the grub.conf file
#
# FIXME: we're actually gonna use syslinux (extlinux), which is sooo
#        much easier.
#
#packages+=" grub"
#packages+=" grub-mbr"
#packages+=" grub-conf"
#
# NOTE: syslinux needs nasm in bootstrap-cross
#
# FIXME: syslinux should ONLY need nasm if you rebuild all the stuff that the
#        maintainer pretty much begs you not to...  and even if we did need it
#        here, we would need to cross-compile it HERE, not build it in
#        bootstrap-cross (which BUILDS the cross-compiler).
#
#        wait, i'm all confused now.  we need it to RUN on our HOST system
#        (i.e., so it DOES need to be built PRIOR to this bootstrap
#        stage)... but why was i building it in bootstrap-cross as apposed to
#        bootstrap-early?
#
packages+=" syslinux"

# this stage will set the ownership of our baby filesystem to root instead
# of our build user
packages+=" fix-perms"



mkdir -p $PWD/.build

# now iterate through building for our target architecture using our
# cross-compiler.
for p in $packages; do
    echo "building bootstrap-stage1 package: $p"
    build $p || exit 1
done


# remove the cross-compiler and it's utilities
#
# NOTE: we're all done cross-compiling at this point and we're about to
#       reboot into our stage2 bootstrap environment using our new native
#       bootstrap compiler.
sudo rm -rf $CLFS$PREFIX_CROSS || exit 1

# remove the bootstrap and bootstrap-cross symlinks
sudo rm -f $PREFIX_CROSS $PREFIX_FINAL || exit 1

# make a backup of our progress.
#
# NOTE: This is not an incremental backup because we've just chowned every
#       single file since the last backup, so an incremental backup would
#       include every single file... which would be pretty silly.
#
# NOTE: using sudo for this to make sure our build user has appropriate
#       permissions to read all the files we're backing up
echo -n "creating bootstrap-stage1 backup... "
sudo tar -zcf $BUILDROOT/baby-bootstrap-stage1.tar.gz -C $CLFS . || exit 1
echo "done."


# NOTE: now we have to move $CLFS/* to $INSTALLROOT.  we can either do a
#       globbing mv, or we can untar our baby*.tar files... depends on how
#       much we care about preserving the original contents of $CLFS.
#       considering that we already have the tar files backing up CLFS, we
#       might as well do a globbing mv
sudo mv $CLFS/* $INSTALLROOT
sudo rmdir $CLFS

# FIXME: ownership of $CLFS's new toplevel directory (which becomes / once
#        we boot up into stage2) has not been modified by these scripts, so
#        it's probably inappropriate (i.e., owned by non-root).

echo -e "\n\nNow it's time to actually make the bootstrap-stage2 environment bootable!  Good luck!"
echo -e "\n1. Install and configure bootloader (e.g., extlinux)"
echo -e "\n2. Edit /etc/fstab rootfs and swap entries"
exit 0



# NOTE: The following CLFS final system packages are replaced by our busybox
#       package's equivilent tools
#
#packages+=" inetd"
#packages+=" less/more"
#packages+=" iproute2"


# NOTE: The following non-CLFS packages are also replaced by our busybox
#       setup
#
#packages+=" cpio"
#packages+=" rpm"
#packages+=" httpd"
#packages+=" dhcpd"
#packages+=" dhcpclient"
#pacakges+=" bind"
