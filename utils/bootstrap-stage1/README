-*- mode: outline; mode: flyspell -*-

* README - utils/bootstrap-stage1

This is the first half of the final bootstrap stage.  This stage is built
using the toolchain provided by the bootstrap-cross stage.  The end result
is a bootable bootstrap system used to build the rest of the system.

The reason behind splitting the final bootstrap stage in two is simple;
cross-compiling is a pain.  Stage1 uses the cross-compiler and builds just
enough to result in a bootable system.  We then boot into the baby system
and build the rest of the bootstrap tools natively.

After this step is complete, the resulting $CLFS dir can be used to populate
a seperate filesystem, which can then be made bootable by editing the
host system's bootloader configuration (e.g., /boot/grub/menu.lst).


NOTE: I should eventually automate the process by which $CLFS actually
      becomes bootable... but it might involve toasting the host machine.
      This is unacceptable in my home environment, so for now I'll manually
      set up a dual boot.  The process will eventually be:

      1. Create ext4 rootfs on given partition
      2. Untar baby-bootstrap-stage1.tar.gz
      3. Generate /etc/fstab so the rootfs and swap devices are correct
      4. Update host system's GRUB config to make the new partition bootable

NOTE: What if I created a bootable DVD for the bootable bootstrap
      environment...?  This might be an option, but it will further lock us
      into whatever architectures are supported by isolinux.  That being
      said, this project really just aims to support x86 and x86_64, so this
      might be a good plan.  It's definately more complicated, though,
      because the create a partition plan can actually go and build right in
      the bootstrap environment... but the bootable DVD option will need to
      then go and create a partition, filesystem, etc, to do the building
      in... maybe someday.

NOTE: Why is it that autoreconf_generic from bootstrap-early results in a
      good gettext source tree, but using the same function from
      bootstrap-final (assuming that gettext got reverted to a pristine git
      checkout) results in a borked source tree that's still got a few
      Makefiles in it?  Trying to configure the examples dir at that point
      fails, because it's 'already configured'.

NOTE: Only diff I can see is that CC and CXX are overriden to use the
      cross-compiler... I don't understand why that's breaking things...
