#!/bin/bash

# should set toplevel via autoconf?
toplevel=$PWD/../..

# source our common variables and functions
. $toplevel/utils/bootstrap-early/functions


# NOTE: Everything that used to be done at the end of the stage1 go script is
#       in here.  This stuff needs to be run as root.  It will do the final
#       groom/install onto some type of media so that the user can go boot it
#       up to kick off stage2!  Woo!


fix_perms()
{
    # FIXME: We do this w/ find instead of chown -R so that we can skip
    #        /ruckus.  It doesn't track failure, though...
    echo -n "chowning all files to 0:0... "
    find $CLFS -wholename $CLFS/ruckus -prune -o \
        -exec chown 0:0 {} \;
    echo "done"

    chgrp -v 13 $CLFS/var/{run/utmp,log/lastlog} || exit 1
    if [ ! -c $CLFS/dev/console ]; then
	mknod -m 600 $CLFS/dev/console c 5 1 || exit 1
    fi
    if [ ! -c $CLFS/dev/null ]; then
	mknod -m 666 $CLFS/dev/null c 1 3 || exit 1
    fi

    # add this so we can use the compiled-in default busybox inittab on a xen
    # domU w/out initrd w/out seeing tons of errors regarding missing tty
    # device nodes.
    #
    #for x in {0,1,2,3,4,5,6}; do
    #    mknod -m 600 $CLFS/dev/tty$x c 4 $x || exit 1
    #done

    # FIXME: we need to add /etc/init.d/rcS to mount virtual filesystems
    #        (/proc, /sys, etc), start mdev(?), and kick off our
    #        builder... perhaps it should also create the tty0 device nodes?


    # setuid for special needs binaries
    #
    # NOTE: Any file that was installed setuid by build_user will drop the
    #       setuid bit when chowned to 0:0.
    #
    # NOTE: Since we're using busybox for pretty much everything now, this list
    #       is pretty short... ;-)
    setuid_list=""
    setuid_list+=" /tools/bin/busybox"

    for x in $setuid_list; do
	chmod -v u+s $CLFS$x || exit 1
    done
}




# remove the cross-compiler and it's utilities
#
# NOTE: we're all done cross-compiling at this point and we're about to
#       reboot into our stage2 bootstrap environment using our new native
#       bootstrap compiler.
echo -n "removing the cross-compiler ($CLFS$PREFIX_CROSS)... "
rm -rf $CLFS$PREFIX_CROSS || exit 1
echo "done"


# permissions magic
fix_perms || exit 1


# remove the bootstrap and bootstrap-cross symlinks
#
# FIXME: do i really want to do this?
#rm -f $PREFIX_CROSS $PREFIX_FINAL || exit 1

# FIXME: clean out utils/*/.build at this point?  should free up over 7G
#        depending on what was built.

# FIXME: umount CLFS_DEV and RUCKUS_DEV so we can boot the domU


exit 0
