#!/bin/bash

# These variables get set by the Makefile, but try to autodetect them assuming
# we're building in-tree by hand if they're not set
[ -n "$ruckus_srcdir" ] || ruckus_srcdir=$PWD/../..
[ -n "$ruckus_builddir" ] || ruckus_builddir=$PWD/../..

# source our common variables and functions
. $ruckus_srcdir/utils/bootstrap-early/functions


# NOTE: Everything that used to be done at the end of the stage1 go script is
#       in here.  This stuff needs to be run as root.  It will do the final
#       groom/install onto some type of media so that the user can go boot it
#       up to kick off stage2!  Woo!


fix_perms()
{
    # NOTE: We do this w/ find instead of chown -R so that we can skip /ruckus.
    #       We don't track failure here, but that's ok.
    #
    echo -n "chowning all files to 0:0... "
    find $CLFS -wholename $CLFS/ruckus -prune -o \
        -wholename $CLFS/ruckus-build -prune -o \
        -exec chown --no-dereference 0:0 {} \;
    echo "done"

    # FIXME: where did this come from...? I can't find them in the CLFS
    #        3.0.0-systemd book... are they no longer needed?
    #
    #chgrp -v 13 $CLFS/var/{run/utmp,log/lastlog} || exit 1

    # create initial device nodes
    if [ ! -c $CLFS/dev/console ]; then
        mknod -m 0600 ${CLFS}/dev/console c 5 1 || exit 1
    fi
    if [ ! -c $CLFS/dev/null ]; then
        mknod -m 0666 ${CLFS}/dev/null c 1 3 || exit 1
    fi

    # setuid for special needs binaries
    #
    # NOTE: Any file that was installed setuid by build_user will drop the
    #       setuid bit when chowned to 0:0.
    #
    # NOTE: Since we're using busybox for pretty much everything now, this list
    #       is pretty short... ;-)
    #
    setuid_list=""
    setuid_list+=" $CLFS/bin/busybox"

    for x in $setuid_list; do
        chmod -v u+s $x || exit 1
    done
}



# make LVM snapshot device if configured
if [ -n "$RUCKUS_DEV_SNAPSHOT" ]; then
    echo "creating RUCKUS_DEV snapshot device"
    # NOTE: RUCKUS_DEV is an absolute path, but --name is supposed to be a
    #       short name... so we need to do some parsing here...  and it COULD
    #       be specified as /dev/mapper/VG-LV or as /dev/VG/LV... yay
    #
    if [ -n "$(echo $RUCKUS_DEV | grep "^/dev/mapper")" ]; then
        # /dev/mapper
        thename=$(echo $RUCKUS_DEV | awk -F- '{print $NF}')
    else
        # /dev/vg
        thename=$(basename $RUCKUS_DEV)
    fi
    echo lvcreate --snapshot --name=$thename --size=100M $RUCKUS_DEV_SNAPSHOT
    lvcreate --snapshot --name=$thename --size=100M $RUCKUS_DEV_SNAPSHOT ||
    exit 1
fi


# remove the cross-compiler and it's utilities
#
# NOTE: we're all done cross-compiling at this point and we're about to
#       reboot into our stage2 bootstrap environment using our new native
#       bootstrap compiler.
#
echo -n "removing the cross-compiler ($CLFS$PREFIX_CROSS)... "
rm -rf $CLFS$PREFIX_CROSS || exit 1
echo "done"


# permissions magic
fix_perms || exit 1

# remove the bootstrap and bootstrap-cross symlinks
#
# FIXME: do i really want to do this?  i don't think so...
#
#rm -f $PREFIX_CROSS $PREFIX_TOOLS || exit 1

# FIXME: clean out utils/*/.build at this point?  should free up over 7G
#        depending on what was built.
#
#        i don't think we're going to automatically do that either.
#
#        perhaps we should make a clean target to do this?

echo all done.
exit 0
