-*- mode: org; mode: flyspell -*-

* Intro

Source Ruckus Linux - an embeddable, robust, free, Linux meta-distro

What's a meta distro?  It's a collection of build tools, source packages,
scripts, and documentation all ready to be built into a Linux distro.

Source Ruckus Linux can be used out-of-the-box, but it's real strength lies
in being used as a base to derive your OWN distro from.  In other words, it
exists purely to be forked, although it can be used as-is.

The build scripts for bootstrapping, cross-compiling, etc, are based on those
documented by the Cross Linux From Scratch (CLFS) project, but the projects
should deviate pretty wildly from there.  Super special thanks to all the
LFS, BLFS, and CLFS contributors for making this possible!  See the following
pages for more info on the Linux From Scratch projects.

LFS - http://www.linuxfromscratch.org/
BLFS - http://www.linuxfromscratch.org/blfs/
CLFS - http://trac.cross-lfs.org/


* Goals

** 32bit, 64bit, or 64bit multilib build

At build time, the user should be able to select a specific architecture to
cross-compile the Linux distro for (x86, x86_64 (pure64 or multilib), sparc,
ppc, etc).  Obviously, there are some limitations (e.g., pure64 can't use grub
v1, etc) and if the target system isn't bootable on the build hardware (ie,
building sparc on an x86 machine), the second half of the build will have to
be done elsewhere.

configure opts

  --with-arch={i686, x86_64, etc}

  --disable-multilib


The --disable-multilib flag should disable any multilib stuff in all the build
scripts and notes files (lib64, 2nd compilation, etc).

If building for 32bit, --disable-multilib will automatically be set.

Using --with-arch=x86_64 with --disable-multilib should result in a pure64
system (64bit libs in /lib).

NOTE: Although the CLFS books officially have instructions for x86, x86_64,
      PowerPC, MIPS, and Sparc and have developmental ARM support, Source
      Ruckus will be limited to x86 and x86_64 (at least for now).  The reason
      is simple: I only have x86 and x86_64 hardware.  There's nothing to keep
      YOU from taking this and the CLFS books and your own funky hardware and
      hacking up the build scripts.  ;-)


** Build missing host dependencies

Unlike CLFS, we're going to not only detect missing host dependencies via
autoconf, but we'll also build/install them so you don't have to wory about
it.  Why not, right?  We've got the whole opensource universe cloned in here
already.  This is handled by the bootstrap-early build stage.


** Support for building offline

After cloning, initializing and updating submodules, and running the
get_sources script, you should be able to unplug your ethernet cable (or
turn off your WIFI), bring your laptop to the beach, and build the whole
darned thing w/out any package sneaking out to the internet to download
stuff.  I can't be the only person that this bothers... can I?  How am I
supposed to KNOW w/out a doubt what's in my OS if half the packages just
magically download extra things while they're building?  Hog wash, I say!
This may be a PITB to implement, but I'm doing it because I believe it to be
important.


** Hard-realtime Scheduling (perhaps?)

Using CONFIG_PREEMPT gives us soft-realtime scheduling.  Hard-realtime
scheduling could be accomplished by using Ingo Molnar's CONFIG_PREEMPT_RT
patches, or by using a layered microkernel approach.  PREEMPT_RT is probably
less likely to break things, although it might not play well with Xen or KVM
virtual machines.  We'll see.

This will probably have to be added as a secondary kernel option (i.e.,
kernel-rt package in addition to the standard kernel package).

NOTE: This is getting pretty unlikely.


** Nicely integrated Xen4 virtualization

The default kernel setup will be for a Xen pvops dom0 using the latest Xen4
hypervisor and management tools.

Source Ruckus's use of Xen will NOT involve using 3rd party management tools
(e.g., libvirt), but will instead concentrate on only the mainline xen
tools (e.g, xm, libxenlight, xl).


** Tiered ROOTFS Images

The idea here is provide a hierarchy of filesystem images to install from,
with each image being applied on top of it's parent images.  The result of
this will be a nice, tiered, system suited for embedded, server, or
development environments.

Using tiered fs images instead of package-by-package installations will
speed up installation considerably (no dependency calculations).
Package-by-package changes can be handled by modifying the build system and
rolling your own distro!  Fork me!

*** tiny
Tiny, be small above all else.  No X server or libs, EGLIBC, busybox, only
what's absolutely necessary.  I thought about using uclibc, but that would
break binary compatibility with the rest of the images (ie, we couldn't use
the tiny image as a base to build the base and extra images off of).

*** base
Still really small, but now add in basic X, libs, tools, daemons, etc, need.

*** server
Adds all kinds of extra server functionality to the base system (apache,
mysql, bugzilla, bind, dhcpd, samba, etc).

*** workstation
This should add everything needed for a tidy workstation installation (e.g.,
LXDE, fluxbox, firefox, thunderbird, libreoffice, latex, maybe some small
multimedia tools).

NOTE: Leaning towards sticking EFL, and Enlightenment in here.

*** extra
Workstation, development and/or play environment (gnome, multimedia, debug
symbols, extra deb libs and tools, etc).

Everything else.  This is the complete dev system with everything and the
kitchen sink thrown in.

Big Fat Desktop Environments (GNOME, KDE), java, seamonkey, additional
multimedia stuff.

ALL debug symbols added back in!


* Version 3.0? But I've never heard of it...

Yeah, my bad.  Source Ruckus Linux has been my baby since back in 2000 when I
first started dabbling with Linux From Scratch.  I had a very low profile
1.0.0 release at college (Spring of 2002?), but once I got out and got a job,
development ceased.  A few years later, I started work on 2.0 (complete w/ a
full rewrite of SRP, my package manager)... but it never got off the ground.
Life, work, and other fun things got in the way.

This latest incarnation, started taking shape in my imagination back in 2010,
eventually resulting in this git repo being started.  Development has been
very on-and-off (same for SRP and RuckusRD), but it's come a long way since
then.  :-)
