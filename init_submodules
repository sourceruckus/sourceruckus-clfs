#!/usr/bin/env python3
# -*- mode: python -*-

import argparse
import configparser
import subprocess
import shutil
import os
import sys
from pprint import pprint



def git_submod_init(cwd):
    go = "git submodule init --depth=1"
    print("[cwd="+cwd+"]", go)
    if not config.dry_run:
        subprocess.check_call(go.split(), cwd=cwd)


def git_submod_update(path, cwd):
    go = "git submodule update " + path
    print("[cwd="+cwd+"]", go)
    if not config.dry_run:
        subprocess.check_call(go.split(), cwd=cwd)

    if config.clean:
        clean_cwd = os.path.join(cwd, path)
        for go in ["git clean -dfx", "git checkout ."]:
            print("[cwd="+clean_cwd+"]", go)
            if not config.dry_run:
                subprocess.check_call(go.split(), cwd=clean_cwd)


def git_config(key, val=None, cwd=".", remove=False):
    go = "git config "
    if remove:
        go += "--remove-section "
    go += key
    if val:
        go += " "+val
    print("[cwd="+cwd+"]", go)
    if not config.dry_run:
        subprocess.check_call(go.split(), cwd=cwd)


def delete_all_submods():
    global ERR

    with open(toplevel+"/.gitmodules") as f:
        c = configparser.ConfigParser()
        c.read_file(f)

    for x in c:
        if x == "DEFAULT":
            continue

        # remove the cloned tree
        t = toplevel+"/"+c[x]['path']
        print("removing", t)
        if not config.dry_run:
            try:
                shutil.rmtree(t)
                # leave an empty dir behind
                #
                # NOTE: This is because our shared module detection algo
                #       looks for a toplevel/src/submod dir to see if we
                #       have a toplevel clone to share...
                os.mkdir(t)
            except:
                pass

        # remove its .git dir
        t =  toplevel+"/.git/modules/"+c[x]['path']
        print("removing", t)
        if not config.dry_run:
            try:
                shutil.rmtree(t)
            except:
                pass

        # remove it from toplevel config
        t = "submodule."+c[x]['path']
        try:
            git_config(t, remove=True)
        except:
            pass


def do_submod(path):
    global ERR
    global shared_ones
    global todo

    try:
        f = open(path+"/.gitmodules")
    except:
        # all done
        return

    # initialize the submodules
    try:
        git_submod_init(cwd=path)
    except Exception as e:
        print("ERROR:", e)
        ERR+=1
        return

    # setup a ConfigParser instance to read the file with
    c = configparser.ConfigParser()
    c.read_file(f)
    f.close()

    for x in c:
        if not x.startswith("submodule "):
            continue

        # strip off trailing slashes... apparently, this happens (e.g.,
        # git://git.qemu.org/vgabios.git/ in qemu)
        url = c[x]["url"]
        if url.endswith("/"):
            url = url[:-1]

        # figure out if we've already set this submod up
        shared=toplevel+"/src/"+os.path.basename(url).split('.git')[0]
        #print("CHECKING '{}' for shared mod at".format(url), shared)
        config_done = False
        try:
            for y in shared_ones[shared]:
                if path == y[0]:
                    config_done = True
        except:
            pass

        # check for previous clone to share with
        if os.path.exists(shared) and path != "." and not config_done:
            try:
                git_config("submodule.{}.url".format(c[x]["path"]),
                           shared,
                           cwd=path)
            except Exception as e:
                print("WARNING: failed to configure shared submod:", e)

            # NOTE: We have to make sure that toplevel/src submod has
            #       already been cloned before we actually update.
            #       Otherwise, it's entirely possible that a submod of a
            #       submod will try to share a toplevel submod repo that
            #       hasn't actually been cloned yet.
            #
            # NOTE: We're going to fix this by keeping track of these
            #       special to-be-shared submods, and waiting until we've
            #       finished the rest of our submods to initialize them.
            if shared not in shared_ones:
                shared_ones[shared] = []
            shared_ones[shared].append((path, c[x]["path"]))

            # let the toplevel know to re-run this
            todo=True
            continue

        # override url if in mirror
        for m in config.mirrors:
            for murl in config.mirrors[m]:
                if url.startswith(murl) and not config_done:
                    try:
                        git_config("submodule.{}.url".format(c[x]["path"]),
                                   url.replace(murl, m),
                                   cwd=path)
                    except Exception as e:
                        print("WARNING: failed to configure mirror:", e)
                        # NOTE: We don't bother to bail out here, we might
                        #       not need this, so don't make it fatal.

        # update
        try:
            # make sure path exists
            #
            # NOTE: We don't treat a missing path as an error.  This case
            #       comes up when a source tree isn't correctly configured
            #       for submodules.  For example, cloog's isl submodule has
            #       a .gitmodules file that specifies a URL and path for
            #       piplib, but the submodule hasn't been added to the repo.
            #       In other words, this script doesn't care if the
            #       knucklehead maintaining a 3rd party git repo has it
            #       misconfigured.
            if os.path.exists(path+"/"+c[x]["path"]):
                git_submod_update(c[x]["path"], cwd=path)
        except Exception as e:
            print("ERROR:", e)
            # NOTE: Keep looping, but let the user know we had a failure via
            #       ERR return value
            ERR+=1

        # recurse!
        do_submod(path+"/"+c[x]["path"])





desc = """\
init_submodules -- recursive bootstrap util for Source Ruckus Linux
(C) 2001-2013 Michael D Labriola <michael.d.labriola@gmail.com>
"""

epi = """\
example: ./init_submodules --dry-run --mirrors=MIRRORS
"""


p = argparse.ArgumentParser(
    formatter_class=argparse.RawDescriptionHelpFormatter,
    prog='init_submodules',
    description=desc.rstrip(),
    epilog=epi.rstrip()
    )

p.add_argument('-n', '--dry-run', action='store_true',
               help="Don't really do anything, just print output.")

p.add_argument('-m', '--mirrors', metavar='MIRRORS',
               help="""Read a map of mirror info from the specified file.
               Format of file is simply {'mirror_url': [list, of, urls,
               that, use, this, mirror]}""")

p.add_argument('--clean', action='store_true',
               help="Clean all submodules (i.e., return them to freshly checked out state).")

p.add_argument('--remove', action='store_true',
               help="Remove all submodules.")


# namespace holding our runtime config
config = None

ERR = 0

toplevel = os.path.dirname(os.path.abspath(sys.argv[0]))
shared_ones = {}


if __name__ == "__main__":
    config = p.parse_args()
    print(config)
    print(toplevel)

    if config.remove:
        delete_all_submods()
        sys.exit(ERR)

    # read in our MIRRORS file
    if config.mirrors:
        try:
            with open(config.mirrors) as f:
                config.mirrors = eval(f.read())
        except Exception as e:
            print("WARNING: failed to read MIRRORS file:", e)
            config.mirrors = {}
    else:
        config.mirrors = {}

    pprint(config.mirrors)

    # NOTE: The semi-lame way in which we're handling the recursion here (do
    #       it over and over infinitely until a pass does not result in any
    #       shared repos being configured) means we will ALWAYS iterate
    #       through N times, where N is the maximum depth needed to satisfy
    #       all submods, even if they're already setup and cloned.
    #
    # FIXME: We could fix this by checking to see if the shared submod we're
    #        configuring has already been cloned... but then I don't think
    #        we can guarantee that we'll init everything unless we start
    #        with a clean checkout.
    todo = True
    while todo:
        todo = False
        # do_submod will set todo back to True if any submods got skipped
        do_submod(".")

    sys.exit(ERR)
