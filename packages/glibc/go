#!/bin/sh

# FIXME: figure out where to get this stuff from...
export ruckus_srcdir=/ruckus
export ruckus_builddir=/ruckus-build
. $ruckus_srcdir/utils/bootstrap-early/functions

# We'll be building out-of-tree using source tarball and patches.  There's a
# bunch of sedd-ing into the source tree that happens, so if we ever do switch
# to a git submodule, we'll want to come back here and checkout seperate copies
# of the source for the different build stages.
#
# If we're building 64bit multilib, this script builds 32bit libs, then 64bit
# libs in a single package.  The 2 stages are built in completely separate
# source/build trees.


# prep ########################################################################

# detect exact /tools* path
#
# NOTE: For CLFS, this is always /tools, but we append the arch string to that
#       dir so that we can build multiple bootstrap environments in parallel.
#
pushd /tools* &&
TOOLS=$PWD &&
popd || exit 1
echo TOOLS: $TOOLS

# detect LINKER
#
# NOTE: CLFS does this in both 32bit and 64bit sections for multilib, but the
#       output is always the same, so we just do it once here.
#
LINKER=$(readelf -l $TOOLS/bin/bash | \
    sed -n "s@.*interpret.*$TOOLS\(.*\)]\$@\1@p")
if [ -z "$LINKER" ]; then
    echo "FAILED to detect linker!"
    exit 1
fi
echo LINKER: $LINKER


# stage1 (/lib install) #######################################################

# /lib install
#
# NOTE: For x86 and x86_64-64, this is 32bit and 64bit, respectively.  For
#       x86_64 multilib, it's 32bit and doesn't include any postinstall bits
#       (e.g., timezone, locales).
#
#       reword...?
#
#       For x86 and x86_64, this is 32bit.  For x86_64-64 it's actually 64bit
#       and needs some extra tweaks to build correctly (i.e., the build system
#       assumes that if you're builing 64 bit, you're using a classic lib/lib64
#       multilib directory scheme).
#
# FIXME: i686 doesn't specify $BUILD32 or --host... the BUILD32 stuff can just
#        expand to nothing and go away, but we'll need to add --host only when
#        building multilib
#
# FIXME: pure64 has to add slibdir=/lib to configparams and specify
#        --libdir=/usr/lib
#
setup_generic glibc &&
pushd $source || exit 1

# From CLFS: At the end of the installation, the build system will run a sanity
# test to make sure everything installed properly. This script performs its
# tests by attempting to compile test programs against certain
# libraries. However it does not specify the path to ld.so, and our toolchain
# is still configured to use the one in /tools. The following set of commands
# will force the script to use the complete path of the new ld.so that was just
# installed
#
# NOTE: We autodetect LINKER above
#
sed -i "s|libs -o|libs -L/usr/lib -Wl,-dynamic-linker=${LINKER} -o|" \
    scripts/test-installation.pl || exit 1

# From CLFS: Apply the following sed so the tzselect script works properly:
sed -i 's/\\$$(pwd)/`pwd`/' timezone/Makefile || exit 1

# From CLFS: In multilib, we tend to think that compiling for ${CLFS_TARGET32}
# is not cross-compiling. Glibc takes the traditional view that if you are
# building for a different host then you are cross-compiling, so you won't be
# running the tests and therefore you don't need the locale files. When we run
# the tests, many will fail if the locale files are missing. The following sed
# allows these tests to succeed:
#
# FIXME: I don't think the CLFS sed is working for this version of glibc... it
#        looks like they've moved the cross-compiling conditional into
#        Makeconfig and set a new variable run-built-tests, which is only set
#        if not set (i.e., i think we can just override it on the command
#        line!)
#
#sed -i '/cross-compiling/s@ifeq@ifneq@g' localedata/Makefile

pushd $builddir || exit 1

OPTS="--prefix=/usr --disable-profile --enable-kernel=2.6.32"
OPTS="$OPTS --libexecdir=/usr/lib/glibc --enable-obsolete-rpc"

if [ -n "$BUILD32" ]; then
    # x86_64 multilib
    OPTS="$OPTS --host=${CLFS_TARGET32}"

elif [ -n "$BUILD64" ]; then
    # pure64
    OPTS="$OPTS --libdir=/usr/lib"

    # From CLFS: Tell Glibc to install its libraries into /lib:
    echo "slibdir=/lib" >> configparms || exit 1
fi

# NOTE: CLFS only specifies CC and CXX during the 32bit portion of a multilib
#       build, but it essentially expands to a no-op in the other configs, so
#       we just let it.
#
CC="gcc ${BUILD32}" CXX="g++ ${BUILD32}" \
    $configure $OPTS || exit 1

# compile it!
make -j$JOBCOUNT || exit 1

# run the testsuite!
#
# NOTE: CLFS does the following to log testsuite errors.  We want to weed out
#       any acceptable failures and make the whole build fail if anything ELSE
#       fails automatically w/out the user having to read the messages.
#
# make -k check 2>&1 | tee glibc-check-log; grep Error glibc-check-log
#
make -k -j$JOBCOUNT run-built-tests=yes check || exit 1

echo WOOHOO

exit 0




# stage2 (lib64 install) ######################################################

# FIXME: i think we can re-use srcdir as long as we re-sed the LINKER thingy...
#
# /lib64 install
sed -i "s|libs -o|libs -L/usr/lib64 -Wl,-dynamic-linker=${LINKER} -o|" \
  scripts/test-installation.pl

sed -i 's/\\$$(pwd)/`pwd`/' timezone/Makefile

pushd $builddir
echo "slibdir=/lib64" >> configparms

CC="gcc ${BUILD64}" CXX="g++ ${BUILD64}" \
    ../glibc-2.19/configure --prefix=/usr \
    --disable-profile --enable-kernel=2.6.32 \
    --libexecdir=/usr/lib64/glibc --libdir=/usr/lib64 \
    --enable-obsolete-rpc

make

make -k check 2>&1 | tee glibc-check-log; grep Error glibc-check-log




# postinstall stuff


# slurp up kernel headers
