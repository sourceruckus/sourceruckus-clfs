# -*- mode: conf -*-
[header]
name = glibc
version = 2.19
pkg_rev = 1

description = The Glibc package contains the main C library. This library
              provides the basic routines for allocating memory, searching
              directories, opening and closing files, reading and writing
              files, string handling, pattern matching, arithmetic, and so on.


[script]
%%BUFFER_BEGIN%%
#!/bin/sh

# FIXME: This build script assumes that the following variables are set in your
#        environment in accordance with the variable set up in the CLFS book.
#        Decisions are made based on these variables (e.g., pure64 vs
#        multilib).  Maybe we should stick this in an rc file
#        somewhere... otherwise a user may innocently tweak their .profile and
#        change the behavior of this script.
#
#        we should either install an /etc/ruckusrc or have srp slurp up the
#        variables at install-time and embedd their values into it's functions
#        script.
#
#        or both?
#
# BUILD32
# BUILD64
# CLFS_TARGET32
#

. $FUNCTIONS || exit 1


# We'll be building out-of-tree using source tarball and patches.  There's a
# bunch of sedd-ing into the source tree that happens, so if we ever do switch
# to a git submodule, we'll want to come back here and checkout seperate copies
# of the source for the different build stages.
#
# If we're building 64bit multilib, this script builds 32bit libs, then 64bit
# libs in a single package.  The 2 stages are built in completely separate
# source/build trees.


# prep ########################################################################

# detect exact /tools* path
#
# NOTE: For CLFS, this is always /tools, but we append the arch string to that
#       dir so that we can build multiple bootstrap environments in parallel.
#
pushd /tools* &&
TOOLS=$PWD &&
popd || exit 1
echo TOOLS: $TOOLS

# detect LINKER
#
# NOTE: CLFS does this in both 32bit and 64bit sections for multilib, but the
#       output is always the same, so we just do it once here.
#
LINKER=$(readelf -l $TOOLS/bin/bash | \
    sed -n "s@.*interpret.*$TOOLS\(.*\)]\$@\1@p")
if [ -z "$LINKER" ]; then
    echo "FAILED to detect linker!"
    exit 1
fi
echo LINKER: $LINKER

# stage1 (/lib install) #######################################################

# /lib install
#
# NOTE: For x86 and x86_64-64, this is 32bit and 64bit, respectively.  For
#       x86_64 multilib, it's 32bit and doesn't include any postinstall bits
#       (e.g., timezone, locales).
#
#       reword...?
#
#       For x86 and x86_64, this is 32bit.  For x86_64-64 it's actually 64bit
#       and needs some extra tweaks to build correctly (i.e., the build system
#       assumes that if you're builing 64 bit, you're using a classic lib/lib64
#       multilib directory scheme).
#
# FIXME: i686 doesn't specify $BUILD32 or --host... the BUILD32 stuff can just
#        expand to nothing and go away, but we'll need to add --host only when
#        building multilib
#
# FIXME: pure64 has to add slibdir=/lib to configparams and specify
#        --libdir=/usr/lib
#
# NOTE: i should already have a source dir (extracted, copied, or symlinked).
#       setup_generic should create a build/lib dir and set builddir and
#       configure for future use.
#
# FIXME: the bootstrap builder's setup_generic also automatically applies
#        patches found in same dir as source tarball... and could also be
#        passed in a list of patches to explicitly apply.  this all happens
#        before autoreconf_generic.
#
# FIXME: it could also be told to checkout a new tree (assuming that SOURCE_DIR
#        is a git repo).  may need to allow setup_generic to create multiple
#        source dirs (e.g., source-lib and source-lib64) so we can do multiple
#        builds for packages that don't support out-of-tree building
#
setup_generic lib &&
pushd $sourcedir || exit 1

# From CLFS: At the end of the installation, the build system will run a sanity
# test to make sure everything installed properly. This script performs its
# tests by attempting to compile test programs against certain
# libraries. However it does not specify the path to ld.so, and our toolchain
# is still configured to use the one in /tools. The following set of commands
# will force the script to use the complete path of the new ld.so that was just
# installed
#
# NOTE: We autodetect LINKER above
#
# FIXME: will this need to point into PAYLOAD_DIR?  is glibc something that we
#        just cannot build/install propperly using DESTDIR?
#
sed -i "s|libs -o|libs -L/usr/lib -Wl,-dynamic-linker=${LINKER} -o|" \
    scripts/test-installation.pl || exit 1

# From CLFS: Apply the following sed so the tzselect script works properly:
sed -i 's/\\$$(pwd)/`pwd`/' timezone/Makefile || exit 1

# From CLFS: In multilib, we tend to think that compiling for ${CLFS_TARGET32}
# is not cross-compiling. Glibc takes the traditional view that if you are
# building for a different host then you are cross-compiling, so you won't be
# running the tests and therefore you don't need the locale files. When we run
# the tests, many will fail if the locale files are missing. The following sed
# allows these tests to succeed:
#
# FIXME: I don't think the CLFS sed is working for this version of glibc... it
#        looks like they've moved the cross-compiling conditional into
#        Makeconfig and set a new variable run-built-tests, which is only set
#        if not set (i.e., i think we can just override it on the command
#        line!)
#
#sed -i '/cross-compiling/s@ifeq@ifneq@g' localedata/Makefile

pushd $builddir || exit 1

OPTS="--prefix=/usr --disable-profile --enable-kernel=2.6.32"
OPTS="$OPTS --libexecdir=/usr/lib/glibc --enable-obsolete-rpc"

if [ -n "$BUILD32" ]; then
    # x86_64 multilib
    OPTS="$OPTS --host=${CLFS_TARGET32}"

elif [ -n "$BUILD64" ]; then
    # pure64
    OPTS="$OPTS --libdir=/usr/lib"

    # From CLFS: Tell Glibc to install its libraries into /lib:
    echo "slibdir=/lib" >> configparms || exit 1
fi

# NOTE: CLFS only specifies CC and CXX during the 32bit portion of a multilib
#       build, but it essentially expands to a no-op in the other configs, so
#       we just let it.
#
CC="gcc ${BUILD32}" CXX="g++ ${BUILD32}" \
    $configure $OPTS || exit 1

# compile it!
make -j$JOBCOUNT || exit 1

# run the testsuite!
#
# NOTE: CLFS does the following to log testsuite errors.  We want to weed out
#       any acceptable failures and make the whole build fail if anything ELSE
#       fails automatically w/out the user having to read the messages.
#
# make -k check 2>&1 | tee glibc-check-log; grep Error glibc-check-log
#
# FIXME: I had a -j$JOBCOUNT in here last time, and got failures... reran w/out
#        the -j and it passed... but it might not have actually re-run the
#        tests... leave this FIXME here until I've verivied that I can pass the
#        check.
#
# NOTE: Ok, we can't guarantee that all tests will pass (in fact, there's
#       ALWAYS a few failures), so we can't do a "make check || exit 1".  The
#       next best thing is to log the results and install the logfile along
#       with the package so we can at least review the failures later.
#
echo "running stage1 testsuite... this will take a while"
log=/usr/share/glibc/glibc-stage1-check.log
mkdir -p $(dirname $PAYLOAD_DIR$log) || exit 1
#make -k run-built-tests=yes check > $PAYLOAD_DIR$log 2>&1
make -k run-built-tests=yes check 2>&1 | tee $PAYLOAD_DIR$log

# install!
if [ -n "$BUILD64" -a -z "$BUILD32" ]; then
    # pure64 tweaks
    #
    # From CLFS: The install will finish by checking that everything is
    # correctly installed. Unfortunately, it will test for a multilib
    # installation. On x86_64 Pure64 this means it will try to test the
    # non-existent 32-bit loader which has a different name from the 64-bit
    # loader (unlike on other 64-bit architectures). We fool it by creating a
    # symlink to the real loader.
    ln -sv ld-2.19.so $PAYLOAD_DIR/lib/ld-linux.so.2 || exit 1
fi

make DESTDIR=$PAYLOAD_DIR install &&
rm -v $PAYLOAD_DIR/usr/include/rpcsvc/*.x || exit 1

if [ -n "$BUILD64" -a -z "$BUILD32" ]; then
    # pure64 tweaks
    #
    # From CLFS: Now we can remove this symlink. We also need to correct the
    # /usr/bin/ldd script - if you look at this, you will see it references not
    # only the 32-bit linker, but also /lib64 where it thinks the 64-bit linker
    # is. The following sed will correct this
    rm -v $PAYLOAD_DIR/lib/ld-linux.so.2 &&
    sed -i '/RTLDLIST/s%/ld-linux.so.2 /lib64%%' \
        $PAYLOAD_DIR/usr/bin/ldd || exit 1
fi


# stage2 (lib64 install) ######################################################
if [ -n "$BUILD32" ]; then
    # setup a new build tree and reuse the source dir setup from stage1
    setup_generic lib64 || exit 1

    # NOTE: Since we're re-using the source dir from stage1, we need to replace
    #       what we sedded in with a lib64 version...  CLFS does two independant
    #       seds.
    #
    pushd $sourcedir &&
    sed -i "s|-L/usr/lib -Wl,-dynamic-link|-L/usr/lib64 -Wl,-dynamic-link|" \
        scripts/test-installation.pl &&
    popd || exit 1

    pushd $builddir || exit 1

    # From CLFS: Tell Glibc to install its 64-bit libraries into /lib64:
    echo "slibdir=/lib64" >> configparms

    OPTS="--prefix=/usr --disable-profile --enable-kernel=2.6.32"
    OPTS="$OPTS --libexecdir=/usr/lib64/glibc --libdir=/usr/lib64"
    OPTS="$OPTS --enable-obsolete-rpc"

    CC="gcc ${BUILD64}" CXX="g++ ${BUILD64}" \
        $configure  $OPTS || exit 1

    # compile it!
    make -j$JOBCOUNT || exit 1

    # run the testsuite!
    echo "running stage2 testsuite... this will take a while"
    log=/usr/share/glibc/glibc-stage2-check.log
    mkdir -p $(dirname $PAYLOAD_DIR$log) || exit 1
    #make -k run-built-tests=yes check > $PAYLOAD_DIR$log 2>&1
    make -k run-built-tests=yes check 2>&1 | tee $PAYLOAD_DIR$log

    # install!
    make DESTDIR=$PAYLOAD_DIR install &&
    rm -v $PAYLOAD_DIR/usr/include/rpcsvc/*.x || exit 1
fi


# postinstall stuff ###########################################################
#
# FIXME: Does any of this have to wait until we've REALLY installed via srp?
#        Looks like localedef is a part of glibc... so is zic... but i thought
#        that was available in my bootstrap environment...?
#
#        /tools/bin/localedef (bootstrap-stage1 glibc)
#        /tools/sbin/zic (bootstrap-stage1 glibc)
#
#        Do those work?  Do they write to the correct places?  How do I even
#        verify that...?
#
#        Can localedef write into my SRP_PAYLOAD_DIR?  What about zic?
#
# FIXME: Woops, don't think I've downloaded tzdata yet...  Wait... should
#        tzdata be its own package?
#

# nscd
cp -v $sourcedir/nscd/nscd.conf $PAYLOAD_DIR/etc/nscd.conf &&
mkdir -pv $PAYLOAD_DIR/var/cache/nscd &&
install -v -Dm644 $sourcedir/nscd/nscd.tmpfiles \
    $PAYLOAD_DIR/usr/lib/tmpfiles.d/nscd.conf &&
install -v -Dm644 $sourcedir/nscd/nscd.service \
    $PAYLOAD_DIR/lib/systemd/system/nscd.service || exit 1


# internationalization

# From CLFS: To save time, an alternative to running the previous command
# (which generates and installs every locale listed in the
# glibc-2.19/localedata/SUPPORTED file) is to install only those locales that
# are wanted and needed. This can be achieved by using the localedef
# command. Information on this command is located in the INSTALL file in the
# Glibc source. However, there are a number of locales that are essential in
# order for the tests of future packages to pass, in particular, the libstdc++
# tests from GCC. The following instructions, instead of the install-locales
# target used above, will install the minimum set of locales necessary for the
# tests to run successfully:
#
# FIXME: can I use the installed localedef (cross-compiled glibc in stage1?) or
#        do I need to use the localedef that's just been installed in
#        PAYLOAD_DIR.  Might have to LD_PRELOAD some stuff to use that one if
#        it's not statically linked...
#
# FIXME: also, need to play with error handling here...
#
mkdir -pv $PAYLOAD_DIR/usr/lib/locale
localedef --prefix=$PAYLOAD_DIR -i cs_CZ -f UTF-8 cs_CZ.UTF-8
localedef --prefix=$PAYLOAD_DIR -i de_DE -f ISO-8859-1 de_DE
localedef --prefix=$PAYLOAD_DIR -i de_DE@euro -f ISO-8859-15 de_DE@euro
localedef --prefix=$PAYLOAD_DIR -i en_HK -f ISO-8859-1 en_HK
localedef --prefix=$PAYLOAD_DIR -i en_PH -f ISO-8859-1 en_PH
localedef --prefix=$PAYLOAD_DIR -i en_US -f ISO-8859-1 en_US
localedef --prefix=$PAYLOAD_DIR -i es_MX -f ISO-8859-1 es_MX
localedef --prefix=$PAYLOAD_DIR -i fa_IR -f UTF-8 fa_IR
localedef --prefix=$PAYLOAD_DIR -i fr_FR -f ISO-8859-1 fr_FR
localedef --prefix=$PAYLOAD_DIR -i fr_FR@euro -f ISO-8859-15 fr_FR@euro
localedef --prefix=$PAYLOAD_DIR -i it_IT -f ISO-8859-1 it_IT
localedef --prefix=$PAYLOAD_DIR -i ja_JP -f EUC-JP ja_JP

# From CLFS: Some locales installed by the make localedata/install-locales
# command above are not properly supported by some applications that are in
# CLFS and CBLFS. Because of the various problems that arise due to application
# programmers making assumptions that break in such locales, CLFS should not be
# used in locales that utilize multibyte character sets (including UTF-8) or
# right-to-left writing order. Numerous unofficial and unstable patches are
# required to fix these problems, and it has been decided by the CLFS
# developers not to support such complex locales at this time. This applies to
# the ja_JP and fa_IR locales as well - they have been installed only for GCC
# and Gettext tests to pass, and the watch program (part of the Procps-ng
# package) does not work properly in them. Various attempts to circumvent these
# restrictions are documented in internationalization-related hints.


# run-time configuration

## nsswitch
#
# FIXME: Should I go ahead and enable NIS for password, group, and shadow right
#        here?  or leave it simple like CLFS does?
#
cat > $PAYLOAD_DIR/etc/nsswitch.conf << "EOF"
# Begin /etc/nsswitch.conf

passwd: files
group: files
shadow: files

hosts: files dns
networks: files

protocols: files
services: files
ethers: files
rpc: files

# End /etc/nsswitch.conf
EOF


# dynamic loader
#
# NOTE: We copy-n-paste the file from x86_64 CLFS, then sed out the lib64 stuff
#       if it was unneeded.
cat > $PAYLOAD_DIR/etc/ld.so.conf << "EOF"
# Begin /etc/ld.so.conf

/usr/local/lib
/usr/local/lib64
/opt/lib
/opt/lib64

# End /etc/ld.so.conf
EOF

# cut out the lib64 lines if not multilib
if [ -z "$BUILD32" ]; then
    sed -i /lib64/d $PAYLOAD_DIR/etc/ld.so.conf || exit 1
fi

# slurp up kernel headers
#
# NOTE: This depends on /usr/include being devoid of anything but kernel
#       headers... which is true during a full source ruckus build, but will
#       include tons of other stuff if we're just trying to rebuild glibc
#       package on a running system... I think this is safe, because I don't
#       think we can really just rebuild glibc w/out needing to do a full
#       rebuild.
#
# FIXME: Can we get away with just slurping up asm, asm-generic, and linux
#        subdirs?  At present, that list would have to also include drm, mtd,
#        rdma, scsi, sound, uapi, video, and xen... and I don't think
#        maintaining that list of subdirs makes sense.
#
# FIXME: Actually, we cannot build this package outside the bootstrap
#        environment because the TOOLS and LINKER stuff at the beginning will
#        fail... so we can almost guarantee that /usr/include will JUST be our
#        kernel headers.
#
mkdir -p $PAYLOAD_DIR/usr &&
cp -va /usr/include $PAYLOAD_DIR/usr/ || exit 1

%%BUFFER_END%%
