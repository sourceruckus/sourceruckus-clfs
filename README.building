-*- mode: org; mode: flyspell -*-

* Prep
Partition, create filesystem(s), etc.  You'll probably want to set up a USB
thumb drive or 2nd HDD to use as the install dev.  This is the dev that will
end up getting the bootstrap system installed on it.  It need not contain the
ruckus source tree (use --with-ruckus-dev and --with-ruckus-path to specify
that).

*NOTE*: Installation device must exist and be mounted prior to configure.

*NOTE*: Installation partition must be writable by the build user.

*NOTE*: x86 tree built up through bootstrap-stage1 is about 13G plus about 100M
        for the installed hostprep stuff (although that will depend on what
        gets built).  About 5.5G of that can be deleted by cleaning out the
        build files in utils.

*NOTE*: x86_64 multilib through bootstrap-stage1 is about 15G plus about 100M
        for the installed hostprep stuff.  About 7G can be deleted by cleaning
        out the build files in utils.

*NOTE*: pre-bootstrap-install, install dev has about 900M used (x86_64
        multilib).  After bootstrap-install, it's dropped to 580M.

*NOTE*: If using a flash drive, EXT4 w/out journal might be a good idea.
        mkfs.ext4 -O ^has_journal /dev/sdXN


* Configuring

./autogen.sh \
    --prefix=/mnt/root-true/ruckus-hostprep \
    --enable-stage2-auto \
    --with-install-dev=/dev/sdf1 \
    --with-ruckus-dev=/dev/sda3 \
    --with-ruckus-path=/ruckus



INIT_SUBMOD_ARGS="-m MIRRORS" ./autogen.sh \
    --prefix=/mnt/root-true/ruckus-hostprep \
    --with-hostprep-only

INIT_SUBMOD_ARGS="-m MIRRORS" ./autogen.sh \
    --prefix=/mnt/root-true/ruckus-hostprep \
    --enable-stage2-auto \
    --with-install-dev=/dev/mapper/vg00-baby \
    --with-ruckus-dev-snapshot=/dev/mapper/vg00-ruckus

INIT_SUBMOD_ARGS="-m MIRRORS" ./autogen.sh \
    --prefix=/mnt/root-true/ruckus-hostprep \
    --enable-stage2-auto \
    --with-arch=i686 \
    --without-stage1-xen \
    --with-install-dev=/dev/mapper/vg00-baby32 \
    --with-ruckus-dev-snapshot=/dev/mapper/vg00-ruckus

INIT_SUBMOD_ARGS="-m MIRRORS" ./autogen.sh \
    --prefix=/mnt/root-true/ruckus-hostprep \
    --enable-stage2-auto \
    --with-arch=x86_64 --disable-multilib \
    --without-stage1-xen \
    --with-install-dev=/dev/mapper/vg00-baby64 \
    --with-ruckus-dev-snapshot=/dev/mapper/vg00-ruckus




* Building

** Prep

make download

*NOTE*: The download target takes a long time, and could fail if any of the
        git submodules or download URL's happen to be down (or have changed).
        I haven't timed it.


make hostprep

*NOTE*: The first time through a build, the git submodules are bootstrapped on
        demand (i.e., by running autoreconf, autogen.sh, or bootstrap.sh).
        This tends to add quite a bit to the 1st build in a clean checkout,
        particularly with the low-level GNU toolchain trees that use gnulib
        (e.g., gettext, bison).  Most (all?) compile-time benchmarks in here
        are with prebootstrapped submodules (i.e., after building once and
        then cleaning).

*NOTE*: hostprep took about __ minutes on my AMD A10-6700 APU box (x86_64
        multilib, prebootstrapped).  (8 minutes on a AMD A10-7850K, 5 minutes
        on my AMD FX-8350)

*NOTE*: hostprep took about __ minutes on my AMD A10-6700 APU box (i686 w/ Xen
        Detour, prebootstrapped).  (17 minutes on my AMD FX-8350)


** Stage 1

make bootstrap

*NOTE*: bootstrap actually installs to the install dev as the build user,
        permissions are fixed and some things are tidied up as root in the
        bootstrap-install target.

*NOTE*: bootstrap took another __ minutes on my A10-6700 (x86_64 multilib), 53
        on the A10-7850K, 35 on the FX-8350.

*NOTE*: x86_64-64, FX-8350, bare-metal: 28 minutes
        i686, FX-8350, bare-metal: 28 minutes

        x86_64-64, FX-8350, xen: 37 minutes
        x86_64, FX-8350, xen: 45 minutes
        i686, FX-8350, xen: 36 minutes

        x86_64, A10-6700, xen: 74 minutes


sudo make bootstrap-install


** Stage 2
Configure system to boot off the freshly compiled Xen hypervisor, reboot into
Xen.

*NOTE*: have to unmount both CLFS_DEV and RUCKUS_DEV before starting the xen
        domU.

As root:

. /path/to/ruckus-hostprep/ruckus-builder.env

Follow the instructions printed to the screen.

Stage 2 bootstrap should commence when system finishes booting.


** Final?

Should the final build (i.e., building/installing packages, dumping
filesystems, etc) happen automatically as soon as the stage2 bootstrap is
finished building...?

I think yes, as long as RUCKUS_BOOTSTRAP_STAGE2_FILE existed and we
automatically kicked off the stage2 builder...
